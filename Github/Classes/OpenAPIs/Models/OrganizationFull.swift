//
// OrganizationFull.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Organization Full */
public struct OrganizationFull: Codable {

    public var login: String
    public var id: Int
    public var nodeId: String
    public var url: String
    public var reposUrl: String
    public var eventsUrl: String
    public var hooksUrl: String
    public var issuesUrl: String
    public var membersUrl: String
    public var publicMembersUrl: String
    public var avatarUrl: String
    public var description: String?
    public var name: String?
    public var company: String?
    public var blog: String?
    public var location: String?
    public var email: String?
    public var twitterUsername: String?
    public var isVerified: Bool?
    public var hasOrganizationProjects: Bool
    public var hasRepositoryProjects: Bool
    public var publicRepos: Int
    public var publicGists: Int
    public var followers: Int
    public var following: Int
    public var htmlUrl: String
    public var createdAt: Date
    public var type: String
    public var totalPrivateRepos: Int?
    public var ownedPrivateRepos: Int?
    public var privateGists: Int?
    public var diskUsage: Int?
    public var collaborators: Int?
    public var billingEmail: String?
    public var plan: OrganizationFullPlan?
    public var defaultRepositoryPermission: String?
    public var membersCanCreateRepositories: Bool?
    public var twoFactorRequirementEnabled: Bool?
    public var membersAllowedRepositoryCreationType: String?
    public var membersCanCreatePublicRepositories: Bool?
    public var membersCanCreatePrivateRepositories: Bool?
    public var membersCanCreateInternalRepositories: Bool?
    public var membersCanCreatePages: Bool?
    public var updatedAt: Date

    public init(login: String, id: Int, nodeId: String, url: String, reposUrl: String, eventsUrl: String, hooksUrl: String, issuesUrl: String, membersUrl: String, publicMembersUrl: String, avatarUrl: String, description: String?, name: String? = nil, company: String? = nil, blog: String? = nil, location: String? = nil, email: String? = nil, twitterUsername: String? = nil, isVerified: Bool? = nil, hasOrganizationProjects: Bool, hasRepositoryProjects: Bool, publicRepos: Int, publicGists: Int, followers: Int, following: Int, htmlUrl: String, createdAt: Date, type: String, totalPrivateRepos: Int? = nil, ownedPrivateRepos: Int? = nil, privateGists: Int? = nil, diskUsage: Int? = nil, collaborators: Int? = nil, billingEmail: String? = nil, plan: OrganizationFullPlan? = nil, defaultRepositoryPermission: String? = nil, membersCanCreateRepositories: Bool? = nil, twoFactorRequirementEnabled: Bool? = nil, membersAllowedRepositoryCreationType: String? = nil, membersCanCreatePublicRepositories: Bool? = nil, membersCanCreatePrivateRepositories: Bool? = nil, membersCanCreateInternalRepositories: Bool? = nil, membersCanCreatePages: Bool? = nil, updatedAt: Date) {
        self.login = login
        self.id = id
        self.nodeId = nodeId
        self.url = url
        self.reposUrl = reposUrl
        self.eventsUrl = eventsUrl
        self.hooksUrl = hooksUrl
        self.issuesUrl = issuesUrl
        self.membersUrl = membersUrl
        self.publicMembersUrl = publicMembersUrl
        self.avatarUrl = avatarUrl
        self.description = description
        self.name = name
        self.company = company
        self.blog = blog
        self.location = location
        self.email = email
        self.twitterUsername = twitterUsername
        self.isVerified = isVerified
        self.hasOrganizationProjects = hasOrganizationProjects
        self.hasRepositoryProjects = hasRepositoryProjects
        self.publicRepos = publicRepos
        self.publicGists = publicGists
        self.followers = followers
        self.following = following
        self.htmlUrl = htmlUrl
        self.createdAt = createdAt
        self.type = type
        self.totalPrivateRepos = totalPrivateRepos
        self.ownedPrivateRepos = ownedPrivateRepos
        self.privateGists = privateGists
        self.diskUsage = diskUsage
        self.collaborators = collaborators
        self.billingEmail = billingEmail
        self.plan = plan
        self.defaultRepositoryPermission = defaultRepositoryPermission
        self.membersCanCreateRepositories = membersCanCreateRepositories
        self.twoFactorRequirementEnabled = twoFactorRequirementEnabled
        self.membersAllowedRepositoryCreationType = membersAllowedRepositoryCreationType
        self.membersCanCreatePublicRepositories = membersCanCreatePublicRepositories
        self.membersCanCreatePrivateRepositories = membersCanCreatePrivateRepositories
        self.membersCanCreateInternalRepositories = membersCanCreateInternalRepositories
        self.membersCanCreatePages = membersCanCreatePages
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable { 
        case login
        case id
        case nodeId = "node_id"
        case url
        case reposUrl = "repos_url"
        case eventsUrl = "events_url"
        case hooksUrl = "hooks_url"
        case issuesUrl = "issues_url"
        case membersUrl = "members_url"
        case publicMembersUrl = "public_members_url"
        case avatarUrl = "avatar_url"
        case description
        case name
        case company
        case blog
        case location
        case email
        case twitterUsername = "twitter_username"
        case isVerified = "is_verified"
        case hasOrganizationProjects = "has_organization_projects"
        case hasRepositoryProjects = "has_repository_projects"
        case publicRepos = "public_repos"
        case publicGists = "public_gists"
        case followers
        case following
        case htmlUrl = "html_url"
        case createdAt = "created_at"
        case type
        case totalPrivateRepos = "total_private_repos"
        case ownedPrivateRepos = "owned_private_repos"
        case privateGists = "private_gists"
        case diskUsage = "disk_usage"
        case collaborators
        case billingEmail = "billing_email"
        case plan
        case defaultRepositoryPermission = "default_repository_permission"
        case membersCanCreateRepositories = "members_can_create_repositories"
        case twoFactorRequirementEnabled = "two_factor_requirement_enabled"
        case membersAllowedRepositoryCreationType = "members_allowed_repository_creation_type"
        case membersCanCreatePublicRepositories = "members_can_create_public_repositories"
        case membersCanCreatePrivateRepositories = "members_can_create_private_repositories"
        case membersCanCreateInternalRepositories = "members_can_create_internal_repositories"
        case membersCanCreatePages = "members_can_create_pages"
        case updatedAt = "updated_at"
    }

}

