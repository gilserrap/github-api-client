//
// EnterpriseSettingsEnterprise.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public struct EnterpriseSettingsEnterprise: Codable {

    public var privateMode: Bool?
    public var publicPages: Bool?
    public var subdomainIsolation: Bool?
    public var signupEnabled: Bool?
    public var githubHostname: String?
    public var identiconsHost: String?
    public var httpProxy: String?
    public var authMode: String?
    public var expireSessions: Bool?
    public var adminPassword: String?
    public var configurationId: Int?
    public var configurationRunCount: Int?
    public var avatar: EnterpriseSettingsEnterpriseAvatar?
    public var customer: EnterpriseSettingsEnterpriseCustomer?
    public var license: EnterpriseSettingsEnterpriseLicense?
    public var githubSsl: EnterpriseSettingsEnterpriseGithubSsl?
    public var ldap: EnterpriseSettingsEnterpriseLdap?
    public var cas: EnterpriseSettingsEnterpriseCas?
    public var saml: EnterpriseSettingsEnterpriseSaml?
    public var githubOauth: EnterpriseSettingsEnterpriseGithubOauth?
    public var smtp: EnterpriseSettingsEnterpriseSmtp?
    public var ntp: EnterpriseSettingsEnterpriseNtp?
    public var timezone: String?
    public var snmp: EnterpriseSettingsEnterpriseSnmp?
    public var syslog: EnterpriseSettingsEnterpriseSyslog?
    public var assets: String?
    public var pages: BranchProtectionRequiredLinearHistory?
    public var collectd: EnterpriseSettingsEnterpriseCollectd?
    public var mapping: EnterpriseSettingsEnterpriseMapping?
    public var loadBalancer: String?

    public init(privateMode: Bool? = nil, publicPages: Bool? = nil, subdomainIsolation: Bool? = nil, signupEnabled: Bool? = nil, githubHostname: String? = nil, identiconsHost: String? = nil, httpProxy: String? = nil, authMode: String? = nil, expireSessions: Bool? = nil, adminPassword: String? = nil, configurationId: Int? = nil, configurationRunCount: Int? = nil, avatar: EnterpriseSettingsEnterpriseAvatar? = nil, customer: EnterpriseSettingsEnterpriseCustomer? = nil, license: EnterpriseSettingsEnterpriseLicense? = nil, githubSsl: EnterpriseSettingsEnterpriseGithubSsl? = nil, ldap: EnterpriseSettingsEnterpriseLdap? = nil, cas: EnterpriseSettingsEnterpriseCas? = nil, saml: EnterpriseSettingsEnterpriseSaml? = nil, githubOauth: EnterpriseSettingsEnterpriseGithubOauth? = nil, smtp: EnterpriseSettingsEnterpriseSmtp? = nil, ntp: EnterpriseSettingsEnterpriseNtp? = nil, timezone: String? = nil, snmp: EnterpriseSettingsEnterpriseSnmp? = nil, syslog: EnterpriseSettingsEnterpriseSyslog? = nil, assets: String? = nil, pages: BranchProtectionRequiredLinearHistory? = nil, collectd: EnterpriseSettingsEnterpriseCollectd? = nil, mapping: EnterpriseSettingsEnterpriseMapping? = nil, loadBalancer: String? = nil) {
        self.privateMode = privateMode
        self.publicPages = publicPages
        self.subdomainIsolation = subdomainIsolation
        self.signupEnabled = signupEnabled
        self.githubHostname = githubHostname
        self.identiconsHost = identiconsHost
        self.httpProxy = httpProxy
        self.authMode = authMode
        self.expireSessions = expireSessions
        self.adminPassword = adminPassword
        self.configurationId = configurationId
        self.configurationRunCount = configurationRunCount
        self.avatar = avatar
        self.customer = customer
        self.license = license
        self.githubSsl = githubSsl
        self.ldap = ldap
        self.cas = cas
        self.saml = saml
        self.githubOauth = githubOauth
        self.smtp = smtp
        self.ntp = ntp
        self.timezone = timezone
        self.snmp = snmp
        self.syslog = syslog
        self.assets = assets
        self.pages = pages
        self.collectd = collectd
        self.mapping = mapping
        self.loadBalancer = loadBalancer
    }

    public enum CodingKeys: String, CodingKey, CaseIterable { 
        case privateMode = "private_mode"
        case publicPages = "public_pages"
        case subdomainIsolation = "subdomain_isolation"
        case signupEnabled = "signup_enabled"
        case githubHostname = "github_hostname"
        case identiconsHost = "identicons_host"
        case httpProxy = "http_proxy"
        case authMode = "auth_mode"
        case expireSessions = "expire_sessions"
        case adminPassword = "admin_password"
        case configurationId = "configuration_id"
        case configurationRunCount = "configuration_run_count"
        case avatar
        case customer
        case license
        case githubSsl = "github_ssl"
        case ldap
        case cas
        case saml
        case githubOauth = "github_oauth"
        case smtp
        case ntp
        case timezone
        case snmp
        case syslog
        case assets
        case pages
        case collectd
        case mapping
        case loadBalancer = "load_balancer"
    }

}

