//
// InlineObject71.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public struct InlineObject71: Codable {

    public enum Visibility: String, Codable, CaseIterable {
        case _public = "public"
        case _private = "private"
        case visibility = "visibility"
        case _internal = "internal"
    }
    /** The name of the repository. */
    public var name: String?
    /** A short description of the repository. */
    public var description: String?
    /** A URL with more information about the repository. */
    public var homepage: String?
    /** Either &#x60;true&#x60; to make the repository private or &#x60;false&#x60; to make it public. Default: &#x60;false&#x60;.   **Note**: You will get a &#x60;422&#x60; error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a &#x60;422&#x60; error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. */
    public var _private: Bool? = false
    /** Can be &#x60;public&#x60; or &#x60;private&#x60;. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, &#x60;visibility&#x60; can also be &#x60;internal&#x60;. The &#x60;visibility&#x60; parameter overrides the &#x60;private&#x60; parameter when you use both along with the &#x60;nebula-preview&#x60; preview header. */
    public var visibility: Visibility?
    /** Either &#x60;true&#x60; to enable issues for this repository or &#x60;false&#x60; to disable them. */
    public var hasIssues: Bool? = true
    /** Either &#x60;true&#x60; to enable projects for this repository or &#x60;false&#x60; to disable them. **Note:** If you&#39;re creating a repository in an organization that has disabled repository projects, the default is &#x60;false&#x60;, and if you pass &#x60;true&#x60;, the API returns an error. */
    public var hasProjects: Bool? = true
    /** Either &#x60;true&#x60; to enable the wiki for this repository or &#x60;false&#x60; to disable it. */
    public var hasWiki: Bool? = true
    /** Either &#x60;true&#x60; to make this repo available as a template repository or &#x60;false&#x60; to prevent it. */
    public var isTemplate: Bool? = false
    /** Updates the default branch for this repository. */
    public var defaultBranch: String?
    /** Either &#x60;true&#x60; to allow squash-merging pull requests, or &#x60;false&#x60; to prevent squash-merging. */
    public var allowSquashMerge: Bool? = true
    /** Either &#x60;true&#x60; to allow merging pull requests with a merge commit, or &#x60;false&#x60; to prevent merging pull requests with merge commits. */
    public var allowMergeCommit: Bool? = true
    /** Either &#x60;true&#x60; to allow rebase-merging pull requests, or &#x60;false&#x60; to prevent rebase-merging. */
    public var allowRebaseMerge: Bool? = true
    /** Either &#x60;true&#x60; to allow automatically deleting head branches when pull requests are merged, or &#x60;false&#x60; to prevent automatic deletion. */
    public var deleteBranchOnMerge: Bool? = false
    /** &#x60;true&#x60; to archive this repository. **Note**: You cannot unarchive repositories through the API. */
    public var archived: Bool? = false

    public init(name: String? = nil, description: String? = nil, homepage: String? = nil, _private: Bool? = false, visibility: Visibility? = nil, hasIssues: Bool? = true, hasProjects: Bool? = true, hasWiki: Bool? = true, isTemplate: Bool? = false, defaultBranch: String? = nil, allowSquashMerge: Bool? = true, allowMergeCommit: Bool? = true, allowRebaseMerge: Bool? = true, deleteBranchOnMerge: Bool? = false, archived: Bool? = false) {
        self.name = name
        self.description = description
        self.homepage = homepage
        self._private = _private
        self.visibility = visibility
        self.hasIssues = hasIssues
        self.hasProjects = hasProjects
        self.hasWiki = hasWiki
        self.isTemplate = isTemplate
        self.defaultBranch = defaultBranch
        self.allowSquashMerge = allowSquashMerge
        self.allowMergeCommit = allowMergeCommit
        self.allowRebaseMerge = allowRebaseMerge
        self.deleteBranchOnMerge = deleteBranchOnMerge
        self.archived = archived
    }

    public enum CodingKeys: String, CodingKey, CaseIterable { 
        case name
        case description
        case homepage
        case _private = "private"
        case visibility
        case hasIssues = "has_issues"
        case hasProjects = "has_projects"
        case hasWiki = "has_wiki"
        case isTemplate = "is_template"
        case defaultBranch = "default_branch"
        case allowSquashMerge = "allow_squash_merge"
        case allowMergeCommit = "allow_merge_commit"
        case allowRebaseMerge = "allow_rebase_merge"
        case deleteBranchOnMerge = "delete_branch_on_merge"
        case archived
    }

}

