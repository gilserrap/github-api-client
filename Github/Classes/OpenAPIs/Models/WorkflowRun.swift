//
// WorkflowRun.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** An invocation of a workflow */
public struct WorkflowRun: Codable {

    /** The ID of the workflow run. */
    public var id: Int
    /** The name of the workflow run. */
    public var name: String?
    public var nodeId: String
    public var headBranch: String?
    /** The SHA of the head commit that points to the version of the worflow being run. */
    public var headSha: String
    /** The auto incrementing run number for the workflow run. */
    public var runNumber: Int
    public var event: String
    public var status: String?
    public var conclusion: String?
    /** The ID of the parent workflow. */
    public var workflowId: Int
    /** The URL to the workflow run. */
    public var url: String
    public var htmlUrl: String
    public var pullRequests: [PullRequestMinimal]?
    public var createdAt: Date
    public var updatedAt: Date
    /** The URL to the jobs for the workflow run. */
    public var jobsUrl: String
    /** The URL to download the logs for the workflow run. */
    public var logsUrl: String
    /** The URL to the associated check suite. */
    public var checkSuiteUrl: String
    /** The URL to the artifacts for the workflow run. */
    public var artifactsUrl: String
    /** The URL to cancel the workflow run. */
    public var cancelUrl: String
    /** The URL to rerun the workflow run. */
    public var rerunUrl: String
    /** The URL to the workflow. */
    public var workflowUrl: String
    public var headCommit: SimpleCommit
    public var repository: MinimalRepository
    public var headRepository: MinimalRepository
    public var headRepositoryId: Int?

    public init(id: Int, name: String? = nil, nodeId: String, headBranch: String?, headSha: String, runNumber: Int, event: String, status: String?, conclusion: String?, workflowId: Int, url: String, htmlUrl: String, pullRequests: [PullRequestMinimal]?, createdAt: Date, updatedAt: Date, jobsUrl: String, logsUrl: String, checkSuiteUrl: String, artifactsUrl: String, cancelUrl: String, rerunUrl: String, workflowUrl: String, headCommit: SimpleCommit, repository: MinimalRepository, headRepository: MinimalRepository, headRepositoryId: Int? = nil) {
        self.id = id
        self.name = name
        self.nodeId = nodeId
        self.headBranch = headBranch
        self.headSha = headSha
        self.runNumber = runNumber
        self.event = event
        self.status = status
        self.conclusion = conclusion
        self.workflowId = workflowId
        self.url = url
        self.htmlUrl = htmlUrl
        self.pullRequests = pullRequests
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.jobsUrl = jobsUrl
        self.logsUrl = logsUrl
        self.checkSuiteUrl = checkSuiteUrl
        self.artifactsUrl = artifactsUrl
        self.cancelUrl = cancelUrl
        self.rerunUrl = rerunUrl
        self.workflowUrl = workflowUrl
        self.headCommit = headCommit
        self.repository = repository
        self.headRepository = headRepository
        self.headRepositoryId = headRepositoryId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable { 
        case id
        case name
        case nodeId = "node_id"
        case headBranch = "head_branch"
        case headSha = "head_sha"
        case runNumber = "run_number"
        case event
        case status
        case conclusion
        case workflowId = "workflow_id"
        case url
        case htmlUrl = "html_url"
        case pullRequests = "pull_requests"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case jobsUrl = "jobs_url"
        case logsUrl = "logs_url"
        case checkSuiteUrl = "check_suite_url"
        case artifactsUrl = "artifacts_url"
        case cancelUrl = "cancel_url"
        case rerunUrl = "rerun_url"
        case workflowUrl = "workflow_url"
        case headCommit = "head_commit"
        case repository
        case headRepository = "head_repository"
        case headRepositoryId = "head_repository_id"
    }

}

