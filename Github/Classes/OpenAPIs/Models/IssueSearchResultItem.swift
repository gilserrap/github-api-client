//
// IssueSearchResultItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Issue Search Result Item */
public struct IssueSearchResultItem: Codable {

    public var url: String
    public var repositoryUrl: String
    public var labelsUrl: String
    public var commentsUrl: String
    public var eventsUrl: String
    public var htmlUrl: String
    public var id: Int
    public var nodeId: String
    public var number: Int
    public var title: String
    public var locked: Bool
    public var activeLockReason: String?
    public var assignees: [SimpleUser]?
    public var user: SimpleUser?
    public var labels: [IssueSearchResultItemLabels]
    public var state: String
    public var assignee: SimpleUser?
    public var milestone: Milestone?
    public var comments: Int
    public var createdAt: Date
    public var updatedAt: Date
    public var closedAt: Date?
    public var textMatches: [String]?
    public var pullRequest: IssueSimplePullRequest?
    public var body: String?
    public var score: Int
    public var authorAssociation: AuthorAssociation
    public var draft: Bool?
    public var repository: Repository?
    public var bodyHtml: String?
    public var bodyText: String?
    public var timelineUrl: String?
    public var performedViaGithubApp: Integration?

    public init(url: String, repositoryUrl: String, labelsUrl: String, commentsUrl: String, eventsUrl: String, htmlUrl: String, id: Int, nodeId: String, number: Int, title: String, locked: Bool, activeLockReason: String? = nil, assignees: [SimpleUser]? = nil, user: SimpleUser?, labels: [IssueSearchResultItemLabels], state: String, assignee: SimpleUser?, milestone: Milestone?, comments: Int, createdAt: Date, updatedAt: Date, closedAt: Date?, textMatches: [String]? = nil, pullRequest: IssueSimplePullRequest? = nil, body: String? = nil, score: Int, authorAssociation: AuthorAssociation, draft: Bool? = nil, repository: Repository? = nil, bodyHtml: String? = nil, bodyText: String? = nil, timelineUrl: String? = nil, performedViaGithubApp: Integration? = nil) {
        self.url = url
        self.repositoryUrl = repositoryUrl
        self.labelsUrl = labelsUrl
        self.commentsUrl = commentsUrl
        self.eventsUrl = eventsUrl
        self.htmlUrl = htmlUrl
        self.id = id
        self.nodeId = nodeId
        self.number = number
        self.title = title
        self.locked = locked
        self.activeLockReason = activeLockReason
        self.assignees = assignees
        self.user = user
        self.labels = labels
        self.state = state
        self.assignee = assignee
        self.milestone = milestone
        self.comments = comments
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.closedAt = closedAt
        self.textMatches = textMatches
        self.pullRequest = pullRequest
        self.body = body
        self.score = score
        self.authorAssociation = authorAssociation
        self.draft = draft
        self.repository = repository
        self.bodyHtml = bodyHtml
        self.bodyText = bodyText
        self.timelineUrl = timelineUrl
        self.performedViaGithubApp = performedViaGithubApp
    }

    public enum CodingKeys: String, CodingKey, CaseIterable { 
        case url
        case repositoryUrl = "repository_url"
        case labelsUrl = "labels_url"
        case commentsUrl = "comments_url"
        case eventsUrl = "events_url"
        case htmlUrl = "html_url"
        case id
        case nodeId = "node_id"
        case number
        case title
        case locked
        case activeLockReason = "active_lock_reason"
        case assignees
        case user
        case labels
        case state
        case assignee
        case milestone
        case comments
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case closedAt = "closed_at"
        case textMatches = "text_matches"
        case pullRequest = "pull_request"
        case body
        case score
        case authorAssociation = "author_association"
        case draft
        case repository
        case bodyHtml = "body_html"
        case bodyText = "body_text"
        case timelineUrl = "timeline_url"
        case performedViaGithubApp = "performed_via_github_app"
    }

}

