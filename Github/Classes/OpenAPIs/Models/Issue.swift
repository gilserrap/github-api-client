//
// Issue.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
public struct Issue: Codable {

    public var id: Int
    public var nodeId: String
    /** URL for the issue */
    public var url: String
    public var repositoryUrl: String
    public var labelsUrl: String
    public var commentsUrl: String
    public var eventsUrl: String
    public var htmlUrl: String
    /** Number uniquely identifying the issue within its repository */
    public var number: Int
    /** State of the issue; either &#39;open&#39; or &#39;closed&#39; */
    public var state: String
    /** Title of the issue */
    public var title: String
    /** Contents of the issue */
    public var body: String?
    public var user: SimpleUser?
    /** Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository */
    public var labels: [OneOfstringobject]
    public var assignee: SimpleUser?
    public var assignees: [SimpleUser]?
    public var milestone: Milestone?
    public var locked: Bool
    public var activeLockReason: String?
    public var comments: Int
    public var pullRequest: IssueSimplePullRequest?
    public var closedAt: Date?
    public var createdAt: Date
    public var updatedAt: Date
    public var closedBy: SimpleUser?
    public var bodyHtml: String?
    public var bodyText: String?
    public var timelineUrl: String?
    public var repository: Repository?
    public var performedViaGithubApp: Integration?
    public var authorAssociation: AuthorAssociation
    public var reactions: ReactionRollup?

    public init(id: Int, nodeId: String, url: String, repositoryUrl: String, labelsUrl: String, commentsUrl: String, eventsUrl: String, htmlUrl: String, number: Int, state: String, title: String, body: String? = nil, user: SimpleUser?, labels: [OneOfstringobject], assignee: SimpleUser?, assignees: [SimpleUser]? = nil, milestone: Milestone?, locked: Bool, activeLockReason: String? = nil, comments: Int, pullRequest: IssueSimplePullRequest? = nil, closedAt: Date?, createdAt: Date, updatedAt: Date, closedBy: SimpleUser? = nil, bodyHtml: String? = nil, bodyText: String? = nil, timelineUrl: String? = nil, repository: Repository? = nil, performedViaGithubApp: Integration? = nil, authorAssociation: AuthorAssociation, reactions: ReactionRollup? = nil) {
        self.id = id
        self.nodeId = nodeId
        self.url = url
        self.repositoryUrl = repositoryUrl
        self.labelsUrl = labelsUrl
        self.commentsUrl = commentsUrl
        self.eventsUrl = eventsUrl
        self.htmlUrl = htmlUrl
        self.number = number
        self.state = state
        self.title = title
        self.body = body
        self.user = user
        self.labels = labels
        self.assignee = assignee
        self.assignees = assignees
        self.milestone = milestone
        self.locked = locked
        self.activeLockReason = activeLockReason
        self.comments = comments
        self.pullRequest = pullRequest
        self.closedAt = closedAt
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.closedBy = closedBy
        self.bodyHtml = bodyHtml
        self.bodyText = bodyText
        self.timelineUrl = timelineUrl
        self.repository = repository
        self.performedViaGithubApp = performedViaGithubApp
        self.authorAssociation = authorAssociation
        self.reactions = reactions
    }

    public enum CodingKeys: String, CodingKey, CaseIterable { 
        case id
        case nodeId = "node_id"
        case url
        case repositoryUrl = "repository_url"
        case labelsUrl = "labels_url"
        case commentsUrl = "comments_url"
        case eventsUrl = "events_url"
        case htmlUrl = "html_url"
        case number
        case state
        case title
        case body
        case user
        case labels
        case assignee
        case assignees
        case milestone
        case locked
        case activeLockReason = "active_lock_reason"
        case comments
        case pullRequest = "pull_request"
        case closedAt = "closed_at"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case closedBy = "closed_by"
        case bodyHtml = "body_html"
        case bodyText = "body_text"
        case timelineUrl = "timeline_url"
        case repository
        case performedViaGithubApp = "performed_via_github_app"
        case authorAssociation = "author_association"
        case reactions
    }

}

