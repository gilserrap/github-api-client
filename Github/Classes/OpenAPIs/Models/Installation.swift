//
// Installation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Installation */
public struct Installation: Codable {

    public enum RepositorySelection: String, Codable, CaseIterable {
        case all = "all"
        case selected = "selected"
    }
    /** The ID of the installation. */
    public var id: Int
    /** Describe whether all repositories have been selected or there&#39;s a selection involved */
    public var repositorySelection: RepositorySelection
    public var accessTokensUrl: String
    public var repositoriesUrl: String
    public var htmlUrl: String
    public var appId: Int
    /** The ID of the user or organization this token is being scoped to. */
    public var targetId: Int
    public var targetType: String
    public var permissions: InstallationPermissions
    public var events: [String]
    public var createdAt: Date
    public var updatedAt: Date
    public var singleFileName: String?
    public var hasMultipleSingleFiles: Bool?
    public var singleFilePaths: [String]?
    public var appSlug: String
    public var suspendedBy: SimpleUser?
    public var suspendedAt: Date?
    public var contactEmail: String?

    public init(id: Int, repositorySelection: RepositorySelection, accessTokensUrl: String, repositoriesUrl: String, htmlUrl: String, appId: Int, targetId: Int, targetType: String, permissions: InstallationPermissions, events: [String], createdAt: Date, updatedAt: Date, singleFileName: String?, hasMultipleSingleFiles: Bool? = nil, singleFilePaths: [String]? = nil, appSlug: String, suspendedBy: SimpleUser? = nil, suspendedAt: Date? = nil, contactEmail: String? = nil) {
        self.id = id
        self.repositorySelection = repositorySelection
        self.accessTokensUrl = accessTokensUrl
        self.repositoriesUrl = repositoriesUrl
        self.htmlUrl = htmlUrl
        self.appId = appId
        self.targetId = targetId
        self.targetType = targetType
        self.permissions = permissions
        self.events = events
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.singleFileName = singleFileName
        self.hasMultipleSingleFiles = hasMultipleSingleFiles
        self.singleFilePaths = singleFilePaths
        self.appSlug = appSlug
        self.suspendedBy = suspendedBy
        self.suspendedAt = suspendedAt
        self.contactEmail = contactEmail
    }

    public enum CodingKeys: String, CodingKey, CaseIterable { 
        case id
        case repositorySelection = "repository_selection"
        case accessTokensUrl = "access_tokens_url"
        case repositoriesUrl = "repositories_url"
        case htmlUrl = "html_url"
        case appId = "app_id"
        case targetId = "target_id"
        case targetType = "target_type"
        case permissions
        case events
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case singleFileName = "single_file_name"
        case hasMultipleSingleFiles = "has_multiple_single_files"
        case singleFilePaths = "single_file_paths"
        case appSlug = "app_slug"
        case suspendedBy = "suspended_by"
        case suspendedAt = "suspended_at"
        case contactEmail = "contact_email"
    }

}

