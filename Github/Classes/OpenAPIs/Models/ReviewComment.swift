//
// ReviewComment.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Legacy Review Comment */
public struct ReviewComment: Codable {

    public enum Side: String, Codable, CaseIterable {
        case _left = "LEFT"
        case _right = "RIGHT"
    }
    public enum StartSide: String, Codable, CaseIterable {
        case _left = "LEFT"
        case _right = "RIGHT"
    }
    public var url: String
    public var pullRequestReviewId: Int?
    public var id: Int
    public var nodeId: String
    public var diffHunk: String
    public var path: String
    public var position: Int?
    public var originalPosition: Int
    public var commitId: String
    public var originalCommitId: String
    public var inReplyToId: Int?
    public var user: SimpleUser?
    public var body: String
    public var createdAt: Date
    public var updatedAt: Date
    public var htmlUrl: String
    public var pullRequestUrl: String
    public var authorAssociation: AuthorAssociation
    public var links: ReviewCommentLinks
    public var bodyText: String?
    public var bodyHtml: String?
    /** The side of the first line of the range for a multi-line comment. */
    public var side: Side? = ._right
    /** The side of the first line of the range for a multi-line comment. */
    public var startSide: StartSide? = ._right
    /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
    public var line: Int?
    /** The original line of the blob to which the comment applies. The last line of the range for a multi-line comment */
    public var originalLine: Int?
    /** The first line of the range for a multi-line comment. */
    public var startLine: Int?
    /** The original first line of the range for a multi-line comment. */
    public var originalStartLine: Int?

    public init(url: String, pullRequestReviewId: Int?, id: Int, nodeId: String, diffHunk: String, path: String, position: Int?, originalPosition: Int, commitId: String, originalCommitId: String, inReplyToId: Int? = nil, user: SimpleUser?, body: String, createdAt: Date, updatedAt: Date, htmlUrl: String, pullRequestUrl: String, authorAssociation: AuthorAssociation, links: ReviewCommentLinks, bodyText: String? = nil, bodyHtml: String? = nil, side: Side? = ._right, startSide: StartSide? = ._right, line: Int? = nil, originalLine: Int? = nil, startLine: Int? = nil, originalStartLine: Int? = nil) {
        self.url = url
        self.pullRequestReviewId = pullRequestReviewId
        self.id = id
        self.nodeId = nodeId
        self.diffHunk = diffHunk
        self.path = path
        self.position = position
        self.originalPosition = originalPosition
        self.commitId = commitId
        self.originalCommitId = originalCommitId
        self.inReplyToId = inReplyToId
        self.user = user
        self.body = body
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.htmlUrl = htmlUrl
        self.pullRequestUrl = pullRequestUrl
        self.authorAssociation = authorAssociation
        self.links = links
        self.bodyText = bodyText
        self.bodyHtml = bodyHtml
        self.side = side
        self.startSide = startSide
        self.line = line
        self.originalLine = originalLine
        self.startLine = startLine
        self.originalStartLine = originalStartLine
    }

    public enum CodingKeys: String, CodingKey, CaseIterable { 
        case url
        case pullRequestReviewId = "pull_request_review_id"
        case id
        case nodeId = "node_id"
        case diffHunk = "diff_hunk"
        case path
        case position
        case originalPosition = "original_position"
        case commitId = "commit_id"
        case originalCommitId = "original_commit_id"
        case inReplyToId = "in_reply_to_id"
        case user
        case body
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case htmlUrl = "html_url"
        case pullRequestUrl = "pull_request_url"
        case authorAssociation = "author_association"
        case links = "_links"
        case bodyText = "body_text"
        case bodyHtml = "body_html"
        case side
        case startSide = "start_side"
        case line
        case originalLine = "original_line"
        case startLine = "start_line"
        case originalStartLine = "original_start_line"
    }

}

