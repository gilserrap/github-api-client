//
// AppPermissions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** The permissions granted to the user-to-server access token. */
public struct AppPermissions: Codable {

    public enum Actions: String, Codable, CaseIterable {
        case read = "read"
        case write = "write"
    }
    public enum Administration: String, Codable, CaseIterable {
        case read = "read"
        case write = "write"
    }
    public enum Checks: String, Codable, CaseIterable {
        case read = "read"
        case write = "write"
    }
    public enum ContentReferences: String, Codable, CaseIterable {
        case read = "read"
        case write = "write"
    }
    public enum Contents: String, Codable, CaseIterable {
        case read = "read"
        case write = "write"
    }
    public enum Deployments: String, Codable, CaseIterable {
        case read = "read"
        case write = "write"
    }
    public enum Environments: String, Codable, CaseIterable {
        case read = "read"
        case write = "write"
    }
    public enum Issues: String, Codable, CaseIterable {
        case read = "read"
        case write = "write"
    }
    public enum Metadata: String, Codable, CaseIterable {
        case read = "read"
        case write = "write"
    }
    public enum Packages: String, Codable, CaseIterable {
        case read = "read"
        case write = "write"
    }
    public enum Pages: String, Codable, CaseIterable {
        case read = "read"
        case write = "write"
    }
    public enum PullRequests: String, Codable, CaseIterable {
        case read = "read"
        case write = "write"
    }
    public enum RepositoryHooks: String, Codable, CaseIterable {
        case read = "read"
        case write = "write"
    }
    public enum RepositoryProjects: String, Codable, CaseIterable {
        case read = "read"
        case write = "write"
        case admin = "admin"
    }
    public enum SecretScanningAlerts: String, Codable, CaseIterable {
        case read = "read"
        case write = "write"
    }
    public enum Secrets: String, Codable, CaseIterable {
        case read = "read"
        case write = "write"
    }
    public enum SecurityEvents: String, Codable, CaseIterable {
        case read = "read"
        case write = "write"
    }
    public enum SingleFile: String, Codable, CaseIterable {
        case read = "read"
        case write = "write"
    }
    public enum Statuses: String, Codable, CaseIterable {
        case read = "read"
        case write = "write"
    }
    public enum VulnerabilityAlerts: String, Codable, CaseIterable {
        case read = "read"
    }
    public enum Workflows: String, Codable, CaseIterable {
        case write = "write"
    }
    public enum Members: String, Codable, CaseIterable {
        case read = "read"
        case write = "write"
    }
    public enum OrganizationAdministration: String, Codable, CaseIterable {
        case read = "read"
        case write = "write"
    }
    public enum OrganizationHooks: String, Codable, CaseIterable {
        case read = "read"
        case write = "write"
    }
    public enum OrganizationPlan: String, Codable, CaseIterable {
        case read = "read"
    }
    public enum OrganizationProjects: String, Codable, CaseIterable {
        case read = "read"
        case write = "write"
        case admin = "admin"
    }
    public enum OrganizationSecrets: String, Codable, CaseIterable {
        case read = "read"
        case write = "write"
    }
    public enum OrganizationSelfHostedRunners: String, Codable, CaseIterable {
        case read = "read"
        case write = "write"
    }
    public enum OrganizationUserBlocking: String, Codable, CaseIterable {
        case read = "read"
        case write = "write"
    }
    public enum TeamDiscussions: String, Codable, CaseIterable {
        case read = "read"
        case write = "write"
    }
    /** The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: &#x60;read&#x60; or &#x60;write&#x60;. */
    public var actions: Actions?
    /** The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: &#x60;read&#x60; or &#x60;write&#x60;. */
    public var administration: Administration?
    /** The level of permission to grant the access token for checks on code. Can be one of: &#x60;read&#x60; or &#x60;write&#x60;. */
    public var checks: Checks?
    /** The level of permission to grant the access token for notification of content references and creation content attachments. Can be one of: &#x60;read&#x60; or &#x60;write&#x60;. */
    public var contentReferences: ContentReferences?
    /** The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: &#x60;read&#x60; or &#x60;write&#x60;. */
    public var contents: Contents?
    /** The level of permission to grant the access token for deployments and deployment statuses. Can be one of: &#x60;read&#x60; or &#x60;write&#x60;. */
    public var deployments: Deployments?
    /** The level of permission to grant the access token for managing repository environments. Can be one of: &#x60;read&#x60; or &#x60;write&#x60;. */
    public var environments: Environments?
    /** The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: &#x60;read&#x60; or &#x60;write&#x60;. */
    public var issues: Issues?
    /** The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: &#x60;read&#x60; or &#x60;write&#x60;. */
    public var metadata: Metadata?
    /** The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: &#x60;read&#x60; or &#x60;write&#x60;. */
    public var packages: Packages?
    /** The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: &#x60;read&#x60; or &#x60;write&#x60;. */
    public var pages: Pages?
    /** The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: &#x60;read&#x60; or &#x60;write&#x60;. */
    public var pullRequests: PullRequests?
    /** The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: &#x60;read&#x60; or &#x60;write&#x60;. */
    public var repositoryHooks: RepositoryHooks?
    /** The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: &#x60;read&#x60;, &#x60;write&#x60;, or &#x60;admin&#x60;. */
    public var repositoryProjects: RepositoryProjects?
    /** The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: &#x60;read&#x60; or &#x60;write&#x60;. */
    public var secretScanningAlerts: SecretScanningAlerts?
    /** The level of permission to grant the access token to manage repository secrets. Can be one of: &#x60;read&#x60; or &#x60;write&#x60;. */
    public var secrets: Secrets?
    /** The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: &#x60;read&#x60; or &#x60;write&#x60;. */
    public var securityEvents: SecurityEvents?
    /** The level of permission to grant the access token to manage just a single file. Can be one of: &#x60;read&#x60; or &#x60;write&#x60;. */
    public var singleFile: SingleFile?
    /** The level of permission to grant the access token for commit statuses. Can be one of: &#x60;read&#x60; or &#x60;write&#x60;. */
    public var statuses: Statuses?
    /** The level of permission to grant the access token to retrieve Dependabot alerts. Can be one of: &#x60;read&#x60;. */
    public var vulnerabilityAlerts: VulnerabilityAlerts?
    /** The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: &#x60;write&#x60;. */
    public var workflows: Workflows?
    /** The level of permission to grant the access token for organization teams and members. Can be one of: &#x60;read&#x60; or &#x60;write&#x60;. */
    public var members: Members?
    /** The level of permission to grant the access token to manage access to an organization. Can be one of: &#x60;read&#x60; or &#x60;write&#x60;. */
    public var organizationAdministration: OrganizationAdministration?
    /** The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: &#x60;read&#x60; or &#x60;write&#x60;. */
    public var organizationHooks: OrganizationHooks?
    /** The level of permission to grant the access token for viewing an organization&#39;s plan. Can be one of: &#x60;read&#x60;. */
    public var organizationPlan: OrganizationPlan?
    /** The level of permission to grant the access token to manage organization projects, columns, and cards. Can be one of: &#x60;read&#x60;, &#x60;write&#x60;, or &#x60;admin&#x60;. */
    public var organizationProjects: OrganizationProjects?
    /** The level of permission to grant the access token to manage organization secrets. Can be one of: &#x60;read&#x60; or &#x60;write&#x60;. */
    public var organizationSecrets: OrganizationSecrets?
    /** The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: &#x60;read&#x60; or &#x60;write&#x60;. */
    public var organizationSelfHostedRunners: OrganizationSelfHostedRunners?
    /** The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: &#x60;read&#x60; or &#x60;write&#x60;. */
    public var organizationUserBlocking: OrganizationUserBlocking?
    /** The level of permission to grant the access token to manage team discussions and related comments. Can be one of: &#x60;read&#x60; or &#x60;write&#x60;. */
    public var teamDiscussions: TeamDiscussions?

    public init(actions: Actions? = nil, administration: Administration? = nil, checks: Checks? = nil, contentReferences: ContentReferences? = nil, contents: Contents? = nil, deployments: Deployments? = nil, environments: Environments? = nil, issues: Issues? = nil, metadata: Metadata? = nil, packages: Packages? = nil, pages: Pages? = nil, pullRequests: PullRequests? = nil, repositoryHooks: RepositoryHooks? = nil, repositoryProjects: RepositoryProjects? = nil, secretScanningAlerts: SecretScanningAlerts? = nil, secrets: Secrets? = nil, securityEvents: SecurityEvents? = nil, singleFile: SingleFile? = nil, statuses: Statuses? = nil, vulnerabilityAlerts: VulnerabilityAlerts? = nil, workflows: Workflows? = nil, members: Members? = nil, organizationAdministration: OrganizationAdministration? = nil, organizationHooks: OrganizationHooks? = nil, organizationPlan: OrganizationPlan? = nil, organizationProjects: OrganizationProjects? = nil, organizationSecrets: OrganizationSecrets? = nil, organizationSelfHostedRunners: OrganizationSelfHostedRunners? = nil, organizationUserBlocking: OrganizationUserBlocking? = nil, teamDiscussions: TeamDiscussions? = nil) {
        self.actions = actions
        self.administration = administration
        self.checks = checks
        self.contentReferences = contentReferences
        self.contents = contents
        self.deployments = deployments
        self.environments = environments
        self.issues = issues
        self.metadata = metadata
        self.packages = packages
        self.pages = pages
        self.pullRequests = pullRequests
        self.repositoryHooks = repositoryHooks
        self.repositoryProjects = repositoryProjects
        self.secretScanningAlerts = secretScanningAlerts
        self.secrets = secrets
        self.securityEvents = securityEvents
        self.singleFile = singleFile
        self.statuses = statuses
        self.vulnerabilityAlerts = vulnerabilityAlerts
        self.workflows = workflows
        self.members = members
        self.organizationAdministration = organizationAdministration
        self.organizationHooks = organizationHooks
        self.organizationPlan = organizationPlan
        self.organizationProjects = organizationProjects
        self.organizationSecrets = organizationSecrets
        self.organizationSelfHostedRunners = organizationSelfHostedRunners
        self.organizationUserBlocking = organizationUserBlocking
        self.teamDiscussions = teamDiscussions
    }

    public enum CodingKeys: String, CodingKey, CaseIterable { 
        case actions
        case administration
        case checks
        case contentReferences = "content_references"
        case contents
        case deployments
        case environments
        case issues
        case metadata
        case packages
        case pages
        case pullRequests = "pull_requests"
        case repositoryHooks = "repository_hooks"
        case repositoryProjects = "repository_projects"
        case secretScanningAlerts = "secret_scanning_alerts"
        case secrets
        case securityEvents = "security_events"
        case singleFile = "single_file"
        case statuses
        case vulnerabilityAlerts = "vulnerability_alerts"
        case workflows
        case members
        case organizationAdministration = "organization_administration"
        case organizationHooks = "organization_hooks"
        case organizationPlan = "organization_plan"
        case organizationProjects = "organization_projects"
        case organizationSecrets = "organization_secrets"
        case organizationSelfHostedRunners = "organization_self_hosted_runners"
        case organizationUserBlocking = "organization_user_blocking"
        case teamDiscussions = "team_discussions"
    }

}

