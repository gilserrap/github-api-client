//
// InlineObject179.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public struct InlineObject179: Codable {

    /** The name of the repository. */
    public var name: String
    /** A short description of the repository. */
    public var description: String?
    /** A URL with more information about the repository. */
    public var homepage: String?
    /** Whether the repository is private or public. */
    public var _private: Bool? = false
    /** Whether issues are enabled. */
    public var hasIssues: Bool? = true
    /** Whether projects are enabled. */
    public var hasProjects: Bool? = true
    /** Whether the wiki is enabled. */
    public var hasWiki: Bool? = true
    /** The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. */
    public var teamId: Int?
    /** Whether the repository is initialized with a minimal README. */
    public var autoInit: Bool? = false
    /** The desired language or platform to apply to the .gitignore. */
    public var gitignoreTemplate: String?
    /** The license keyword of the open source license for this repository. */
    public var licenseTemplate: String?
    /** Whether to allow squash merges for pull requests. */
    public var allowSquashMerge: Bool? = true
    /** Whether to allow merge commits for pull requests. */
    public var allowMergeCommit: Bool? = true
    /** Whether to allow rebase merges for pull requests. */
    public var allowRebaseMerge: Bool? = true
    /** Whether to delete head branches when pull requests are merged */
    public var deleteBranchOnMerge: Bool? = false
    /** Whether downloads are enabled. */
    public var hasDownloads: Bool? = true
    /** Whether this repository acts as a template that can be used to generate new repositories. */
    public var isTemplate: Bool? = false

    public init(name: String, description: String? = nil, homepage: String? = nil, _private: Bool? = false, hasIssues: Bool? = true, hasProjects: Bool? = true, hasWiki: Bool? = true, teamId: Int? = nil, autoInit: Bool? = false, gitignoreTemplate: String? = nil, licenseTemplate: String? = nil, allowSquashMerge: Bool? = true, allowMergeCommit: Bool? = true, allowRebaseMerge: Bool? = true, deleteBranchOnMerge: Bool? = false, hasDownloads: Bool? = true, isTemplate: Bool? = false) {
        self.name = name
        self.description = description
        self.homepage = homepage
        self._private = _private
        self.hasIssues = hasIssues
        self.hasProjects = hasProjects
        self.hasWiki = hasWiki
        self.teamId = teamId
        self.autoInit = autoInit
        self.gitignoreTemplate = gitignoreTemplate
        self.licenseTemplate = licenseTemplate
        self.allowSquashMerge = allowSquashMerge
        self.allowMergeCommit = allowMergeCommit
        self.allowRebaseMerge = allowRebaseMerge
        self.deleteBranchOnMerge = deleteBranchOnMerge
        self.hasDownloads = hasDownloads
        self.isTemplate = isTemplate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable { 
        case name
        case description
        case homepage
        case _private = "private"
        case hasIssues = "has_issues"
        case hasProjects = "has_projects"
        case hasWiki = "has_wiki"
        case teamId = "team_id"
        case autoInit = "auto_init"
        case gitignoreTemplate = "gitignore_template"
        case licenseTemplate = "license_template"
        case allowSquashMerge = "allow_squash_merge"
        case allowMergeCommit = "allow_merge_commit"
        case allowRebaseMerge = "allow_rebase_merge"
        case deleteBranchOnMerge = "delete_branch_on_merge"
        case hasDownloads = "has_downloads"
        case isTemplate = "is_template"
    }

}

