//
// ReposOwnerRepoGitTreesTree.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public struct ReposOwnerRepoGitTreesTree: Codable {

    public enum Mode: String, Codable, CaseIterable {
        case _100644 = "100644"
        case _100755 = "100755"
        case _040000 = "040000"
        case _160000 = "160000"
        case _120000 = "120000"
    }
    public enum ModelType: String, Codable, CaseIterable {
        case blob = "blob"
        case tree = "tree"
        case commit = "commit"
    }
    /** The file referenced in the tree. */
    public var path: String?
    /** The file mode; one of &#x60;100644&#x60; for file (blob), &#x60;100755&#x60; for executable (blob), &#x60;040000&#x60; for subdirectory (tree), &#x60;160000&#x60; for submodule (commit), or &#x60;120000&#x60; for a blob that specifies the path of a symlink. */
    public var mode: Mode?
    /** Either &#x60;blob&#x60;, &#x60;tree&#x60;, or &#x60;commit&#x60;. */
    public var type: ModelType?
    /** The SHA1 checksum ID of the object in the tree. Also called &#x60;tree.sha&#x60;. If the value is &#x60;null&#x60; then the file will be deleted.      **Note:** Use either &#x60;tree.sha&#x60; or &#x60;content&#x60; to specify the contents of the entry. Using both &#x60;tree.sha&#x60; and &#x60;content&#x60; will return an error. */
    public var sha: String?
    /** The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or &#x60;tree.sha&#x60;.      **Note:** Use either &#x60;tree.sha&#x60; or &#x60;content&#x60; to specify the contents of the entry. Using both &#x60;tree.sha&#x60; and &#x60;content&#x60; will return an error. */
    public var content: String?

    public init(path: String? = nil, mode: Mode? = nil, type: ModelType? = nil, sha: String? = nil, content: String? = nil) {
        self.path = path
        self.mode = mode
        self.type = type
        self.sha = sha
        self.content = content
    }

}

