//
// InlineObject37.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public struct InlineObject37: Codable {

    public enum DefaultRepositoryPermission: String, Codable, CaseIterable {
        case read = "read"
        case write = "write"
        case admin = "admin"
        case _none = "none"
    }
    public enum MembersAllowedRepositoryCreationType: String, Codable, CaseIterable {
        case all = "all"
        case _private = "private"
        case _none = "none"
    }
    /** Billing email address. This address is not publicized. */
    public var billingEmail: String?
    /** The company name. */
    public var company: String?
    /** The publicly visible email address. */
    public var email: String?
    /** The Twitter username of the company. */
    public var twitterUsername: String?
    /** The location. */
    public var location: String?
    /** The shorthand name of the company. */
    public var name: String?
    /** The description of the company. */
    public var description: String?
    /** Toggles whether an organization can use organization projects. */
    public var hasOrganizationProjects: Bool?
    /** Toggles whether repositories that belong to the organization can use repository projects. */
    public var hasRepositoryProjects: Bool?
    /** Default permission level members have for organization repositories:   \\* &#x60;read&#x60; - can pull, but not push to or administer this repository.   \\* &#x60;write&#x60; - can pull and push, but not administer this repository.   \\* &#x60;admin&#x60; - can pull, push, and administer this repository.   \\* &#x60;none&#x60; - no permissions granted by default. */
    public var defaultRepositoryPermission: DefaultRepositoryPermission? = .read
    /** Toggles the ability of non-admin organization members to create repositories. Can be one of:   \\* &#x60;true&#x60; - all organization members can create repositories.   \\* &#x60;false&#x60; - only organization owners can create repositories.   Default: &#x60;true&#x60;   **Note:** A parameter can override this parameter. See &#x60;members_allowed_repository_creation_type&#x60; in this table for details. **Note:** A parameter can override this parameter. See &#x60;members_allowed_repository_creation_type&#x60; in this table for details. */
    public var membersCanCreateRepositories: Bool? = true
    /** Toggles whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. Can be one of:   \\* &#x60;true&#x60; - all organization members can create internal repositories.   \\* &#x60;false&#x60; - only organization owners can create internal repositories.   Default: &#x60;true&#x60;. For more information, see \&quot;[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\&quot; in the GitHub Help documentation. */
    public var membersCanCreateInternalRepositories: Bool?
    /** Toggles whether organization members can create private repositories, which are visible to organization members with permission. Can be one of:   \\* &#x60;true&#x60; - all organization members can create private repositories.   \\* &#x60;false&#x60; - only organization owners can create private repositories.   Default: &#x60;true&#x60;. For more information, see \&quot;[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\&quot; in the GitHub Help documentation. */
    public var membersCanCreatePrivateRepositories: Bool?
    /** Toggles whether organization members can create public repositories, which are visible to anyone. Can be one of:   \\* &#x60;true&#x60; - all organization members can create public repositories.   \\* &#x60;false&#x60; - only organization owners can create public repositories.   Default: &#x60;true&#x60;. For more information, see \&quot;[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\&quot; in the GitHub Help documentation. */
    public var membersCanCreatePublicRepositories: Bool?
    /** Specifies which types of repositories non-admin organization members can create. Can be one of:   \\* &#x60;all&#x60; - all organization members can create public and private repositories.   \\* &#x60;private&#x60; - members can create private repositories. This option is only available to repositories that are part of an organization on GitHub Enterprise Cloud.   \\* &#x60;none&#x60; - only admin members can create repositories.   **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in &#x60;members_can_create_repositories&#x60;. See the parameter deprecation notice in the operation description for details. */
    public var membersAllowedRepositoryCreationType: MembersAllowedRepositoryCreationType?
    /** Toggles whether organization members can create GitHub Pages sites. Can be one of:   \\* &#x60;true&#x60; - all organization members can create GitHub Pages sites.   \\* &#x60;false&#x60; - no organization members can create GitHub Pages sites. Existing published sites will not be impacted. */
    public var membersCanCreatePages: Bool? = true
    public var blog: String?

    public init(billingEmail: String? = nil, company: String? = nil, email: String? = nil, twitterUsername: String? = nil, location: String? = nil, name: String? = nil, description: String? = nil, hasOrganizationProjects: Bool? = nil, hasRepositoryProjects: Bool? = nil, defaultRepositoryPermission: DefaultRepositoryPermission? = .read, membersCanCreateRepositories: Bool? = true, membersCanCreateInternalRepositories: Bool? = nil, membersCanCreatePrivateRepositories: Bool? = nil, membersCanCreatePublicRepositories: Bool? = nil, membersAllowedRepositoryCreationType: MembersAllowedRepositoryCreationType? = nil, membersCanCreatePages: Bool? = true, blog: String? = nil) {
        self.billingEmail = billingEmail
        self.company = company
        self.email = email
        self.twitterUsername = twitterUsername
        self.location = location
        self.name = name
        self.description = description
        self.hasOrganizationProjects = hasOrganizationProjects
        self.hasRepositoryProjects = hasRepositoryProjects
        self.defaultRepositoryPermission = defaultRepositoryPermission
        self.membersCanCreateRepositories = membersCanCreateRepositories
        self.membersCanCreateInternalRepositories = membersCanCreateInternalRepositories
        self.membersCanCreatePrivateRepositories = membersCanCreatePrivateRepositories
        self.membersCanCreatePublicRepositories = membersCanCreatePublicRepositories
        self.membersAllowedRepositoryCreationType = membersAllowedRepositoryCreationType
        self.membersCanCreatePages = membersCanCreatePages
        self.blog = blog
    }

    public enum CodingKeys: String, CodingKey, CaseIterable { 
        case billingEmail = "billing_email"
        case company
        case email
        case twitterUsername = "twitter_username"
        case location
        case name
        case description
        case hasOrganizationProjects = "has_organization_projects"
        case hasRepositoryProjects = "has_repository_projects"
        case defaultRepositoryPermission = "default_repository_permission"
        case membersCanCreateRepositories = "members_can_create_repositories"
        case membersCanCreateInternalRepositories = "members_can_create_internal_repositories"
        case membersCanCreatePrivateRepositories = "members_can_create_private_repositories"
        case membersCanCreatePublicRepositories = "members_can_create_public_repositories"
        case membersAllowedRepositoryCreationType = "members_allowed_repository_creation_type"
        case membersCanCreatePages = "members_can_create_pages"
        case blog
    }

}

