//
// CheckRun.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** A check performed on the code of a given code change */
public struct CheckRun: Codable {

    public enum Status: String, Codable, CaseIterable {
        case queued = "queued"
        case inProgress = "in_progress"
        case completed = "completed"
    }
    public enum Conclusion: String, Codable, CaseIterable {
        case success = "success"
        case failure = "failure"
        case neutral = "neutral"
        case cancelled = "cancelled"
        case skipped = "skipped"
        case timedOut = "timed_out"
        case actionRequired = "action_required"
    }
    /** The id of the check. */
    public var id: Int
    /** The SHA of the commit that is being checked. */
    public var headSha: String
    public var nodeId: String
    public var externalId: String?
    public var url: String
    public var htmlUrl: String?
    public var detailsUrl: String?
    /** The phase of the lifecycle that the check is currently in. */
    public var status: Status
    public var conclusion: Conclusion?
    public var startedAt: Date?
    public var completedAt: Date?
    public var output: CheckRunOutput
    /** The name of the check. */
    public var name: String
    public var checkSuite: CheckRunCheckSuite?
    public var app: Integration?
    public var pullRequests: [PullRequestMinimal]

    public init(id: Int, headSha: String, nodeId: String, externalId: String?, url: String, htmlUrl: String?, detailsUrl: String?, status: Status, conclusion: Conclusion?, startedAt: Date?, completedAt: Date?, output: CheckRunOutput, name: String, checkSuite: CheckRunCheckSuite?, app: Integration?, pullRequests: [PullRequestMinimal]) {
        self.id = id
        self.headSha = headSha
        self.nodeId = nodeId
        self.externalId = externalId
        self.url = url
        self.htmlUrl = htmlUrl
        self.detailsUrl = detailsUrl
        self.status = status
        self.conclusion = conclusion
        self.startedAt = startedAt
        self.completedAt = completedAt
        self.output = output
        self.name = name
        self.checkSuite = checkSuite
        self.app = app
        self.pullRequests = pullRequests
    }

    public enum CodingKeys: String, CodingKey, CaseIterable { 
        case id
        case headSha = "head_sha"
        case nodeId = "node_id"
        case externalId = "external_id"
        case url
        case htmlUrl = "html_url"
        case detailsUrl = "details_url"
        case status
        case conclusion
        case startedAt = "started_at"
        case completedAt = "completed_at"
        case output
        case name
        case checkSuite = "check_suite"
        case app
        case pullRequests = "pull_requests"
    }

}

