//
// OrgsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class OrgsAPI {
    /**
     Check organization membership for a user
     
     - parameter org: (path)  
     - parameter username: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsCheckMembershipForUser(org: String, username: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgsCheckMembershipForUserWithRequestBuilder(org: org, username: username).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Check organization membership for a user
     - GET /orgs/{org}/members/{username}
     - Check if a user is, publicly or privately, a member of the organization.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#check-organization-membership-for-a-user
}
     - parameter org: (path)  
     - parameter username: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func orgsCheckMembershipForUserWithRequestBuilder(org: String, username: String) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/members/{username}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check public organization membership for a user
     
     - parameter org: (path)  
     - parameter username: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsCheckPublicMembershipForUser(org: String, username: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgsCheckPublicMembershipForUserWithRequestBuilder(org: org, username: username).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Check public organization membership for a user
     - GET /orgs/{org}/public_members/{username}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#check-public-organization-membership-for-a-user
}
     - parameter org: (path)  
     - parameter username: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func orgsCheckPublicMembershipForUserWithRequestBuilder(org: String, username: String) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/public_members/{username}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Convert an organization member to outside collaborator
     
     - parameter org: (path)  
     - parameter username: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsConvertMemberToOutsideCollaborator(org: String, username: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgsConvertMemberToOutsideCollaboratorWithRequestBuilder(org: org, username: username).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Convert an organization member to outside collaborator
     - PUT /orgs/{org}/outside_collaborators/{username}
     - When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see \"[Converting an organization member to an outside collaborator](https://help.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)\".
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#convert-an-organization-member-to-outside-collaborator
}
     - parameter org: (path)  
     - parameter username: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func orgsConvertMemberToOutsideCollaboratorWithRequestBuilder(org: String, username: String) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/outside_collaborators/{username}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create an organization webhook
     
     - parameter org: (path)  
     - parameter inlineObject46: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsCreateWebhook(org: String, inlineObject46: InlineObject46? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: OrgHook?,_ error: Error?) -> Void)) {
        orgsCreateWebhookWithRequestBuilder(org: org, inlineObject46: inlineObject46).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create an organization webhook
     - POST /orgs/{org}/hooks
     - Here's how you can create a hook that posts payloads in JSON format:
     - responseHeaders: [Location(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#create-an-organization-webhook
}
     - parameter org: (path)  
     - parameter inlineObject46: (body)  (optional)
     - returns: RequestBuilder<OrgHook> 
     */
    open class func orgsCreateWebhookWithRequestBuilder(org: String, inlineObject46: InlineObject46? = nil) -> RequestBuilder<OrgHook> {
        var path = "/orgs/{org}/hooks"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject46)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgHook>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete an organization webhook
     
     - parameter org: (path)  
     - parameter hookId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsDeleteWebhook(org: String, hookId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgsDeleteWebhookWithRequestBuilder(org: org, hookId: hookId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete an organization webhook
     - DELETE /orgs/{org}/hooks/{hook_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#delete-an-organization-webhook
}
     - parameter org: (path)  
     - parameter hookId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func orgsDeleteWebhookWithRequestBuilder(org: String, hookId: Int) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/hooks/{hook_id}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let hookIdPreEscape = "\(APIHelper.mapValueToPathItem(hookId))"
        let hookIdPostEscape = hookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{hook_id}", with: hookIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get an organization
     
     - parameter org: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsGet(org: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: OrganizationFull?,_ error: Error?) -> Void)) {
        orgsGetWithRequestBuilder(org: org).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get an organization
     - GET /orgs/{org}
     - To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).  GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub Enterprise Server plan. See \"[Authenticating with GitHub Apps](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/)\" for details. For an example response, see 'Response with GitHub Enterprise Server plan information' below.\"
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/orgs/#get-an-organization
}
     - parameter org: (path)  
     - returns: RequestBuilder<OrganizationFull> 
     */
    open class func orgsGetWithRequestBuilder(org: String) -> RequestBuilder<OrganizationFull> {
        var path = "/orgs/{org}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrganizationFull>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get an organization membership for the authenticated user
     
     - parameter org: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsGetMembershipForAuthenticatedUser(org: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: OrgMembership?,_ error: Error?) -> Void)) {
        orgsGetMembershipForAuthenticatedUserWithRequestBuilder(org: org).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get an organization membership for the authenticated user
     - GET /user/memberships/orgs/{org}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#get-an-organization-membership-for-the-authenticated-user
}
     - parameter org: (path)  
     - returns: RequestBuilder<OrgMembership> 
     */
    open class func orgsGetMembershipForAuthenticatedUserWithRequestBuilder(org: String) -> RequestBuilder<OrgMembership> {
        var path = "/user/memberships/orgs/{org}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgMembership>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get organization membership for a user
     
     - parameter org: (path)  
     - parameter username: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsGetMembershipForUser(org: String, username: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: OrgMembership?,_ error: Error?) -> Void)) {
        orgsGetMembershipForUserWithRequestBuilder(org: org, username: username).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get organization membership for a user
     - GET /orgs/{org}/memberships/{username}
     - In order to get a user's membership with an organization, the authenticated user must be an organization member.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#get-organization-membership-for-a-user
}
     - parameter org: (path)  
     - parameter username: (path)  
     - returns: RequestBuilder<OrgMembership> 
     */
    open class func orgsGetMembershipForUserWithRequestBuilder(org: String, username: String) -> RequestBuilder<OrgMembership> {
        var path = "/orgs/{org}/memberships/{username}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgMembership>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get an organization webhook
     
     - parameter org: (path)  
     - parameter hookId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsGetWebhook(org: String, hookId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: OrgHook?,_ error: Error?) -> Void)) {
        orgsGetWebhookWithRequestBuilder(org: org, hookId: hookId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get an organization webhook
     - GET /orgs/{org}/hooks/{hook_id}
     - Returns a webhook configured in an organization. To get only the webhook `config` properties, see \"[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization).\"
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#get-an-organization-webhook
}
     - parameter org: (path)  
     - parameter hookId: (path)  
     - returns: RequestBuilder<OrgHook> 
     */
    open class func orgsGetWebhookWithRequestBuilder(org: String, hookId: Int) -> RequestBuilder<OrgHook> {
        var path = "/orgs/{org}/hooks/{hook_id}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let hookIdPreEscape = "\(APIHelper.mapValueToPathItem(hookId))"
        let hookIdPostEscape = hookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{hook_id}", with: hookIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgHook>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a webhook configuration for an organization
     
     - parameter org: (path)  
     - parameter hookId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsGetWebhookConfigForOrg(org: String, hookId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: WebhookConfig?,_ error: Error?) -> Void)) {
        orgsGetWebhookConfigForOrgWithRequestBuilder(org: org, hookId: hookId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a webhook configuration for an organization
     - GET /orgs/{org}/hooks/{hook_id}/config
     - Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use \"[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook).\"  Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:read` permission.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/orgs#get-a-webhook-configuration-for-an-organization
}
     - parameter org: (path)  
     - parameter hookId: (path)  
     - returns: RequestBuilder<WebhookConfig> 
     */
    open class func orgsGetWebhookConfigForOrgWithRequestBuilder(org: String, hookId: Int) -> RequestBuilder<WebhookConfig> {
        var path = "/orgs/{org}/hooks/{hook_id}/config"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let hookIdPreEscape = "\(APIHelper.mapValueToPathItem(hookId))"
        let hookIdPostEscape = hookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{hook_id}", with: hookIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WebhookConfig>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List organizations
     
     - parameter since: (query) An organization ID. Only return organizations with an ID greater than this ID. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsList(since: Int? = nil, perPage: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [OrganizationSimple]?,_ error: Error?) -> Void)) {
        orgsListWithRequestBuilder(since: since, perPage: perPage).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List organizations
     - GET /organizations
     - Lists all organizations, in the order that they were created on GitHub Enterprise Server.  **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/orgs/#list-organizations
}
     - parameter since: (query) An organization ID. Only return organizations with an ID greater than this ID. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - returns: RequestBuilder<[OrganizationSimple]> 
     */
    open class func orgsListWithRequestBuilder(since: Int? = nil, perPage: Int? = nil) -> RequestBuilder<[OrganizationSimple]> {
        let path = "/organizations"
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "since": since?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[OrganizationSimple]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List app installations for an organization
     
     - parameter org: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsListAppInstallations(org: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20011?,_ error: Error?) -> Void)) {
        orgsListAppInstallationsWithRequestBuilder(org: org, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List app installations for an organization
     - GET /orgs/{org}/installations
     - Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/orgs/#list-app-installations-for-an-organization
}
     - parameter org: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<InlineResponse20011> 
     */
    open class func orgsListAppInstallationsWithRequestBuilder(org: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<InlineResponse20011> {
        var path = "/orgs/{org}/installations"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20011>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List organizations for the authenticated user
     
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsListForAuthenticatedUser(perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [OrganizationSimple]?,_ error: Error?) -> Void)) {
        orgsListForAuthenticatedUserWithRequestBuilder(perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List organizations for the authenticated user
     - GET /user/orgs
     - List organizations for the authenticated user.  **OAuth scope requirements**  This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/orgs/#list-organizations-for-the-authenticated-user
}
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[OrganizationSimple]> 
     */
    open class func orgsListForAuthenticatedUserWithRequestBuilder(perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[OrganizationSimple]> {
        let path = "/user/orgs"
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[OrganizationSimple]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List organizations for a user
     
     - parameter username: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsListForUser(username: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [OrganizationSimple]?,_ error: Error?) -> Void)) {
        orgsListForUserWithRequestBuilder(username: username, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List organizations for a user
     - GET /users/{username}/orgs
     - List [public organization memberships](https://help.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.  This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/orgs/#list-organizations-for-a-user
}
     - parameter username: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[OrganizationSimple]> 
     */
    open class func orgsListForUserWithRequestBuilder(username: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[OrganizationSimple]> {
        var path = "/users/{username}/orgs"
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[OrganizationSimple]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter filter
     */
    public enum Filter_orgsListMembers: String, CaseIterable {
        case _2faDisabled = "2fa_disabled"
        case all = "all"
    }

    /**
     * enum for parameter role
     */
    public enum Role_orgsListMembers: String, CaseIterable {
        case all = "all"
        case admin = "admin"
        case member = "member"
    }

    /**
     List organization members
     
     - parameter org: (path)  
     - parameter filter: (query) Filter members returned in the list. Can be one of:   \\* &#x60;2fa_disabled&#x60; - Members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled. Available for organization owners.   \\* &#x60;all&#x60; - All members the authenticated user can see. (optional, default to .all)
     - parameter role: (query) Filter members returned by their role. Can be one of:   \\* &#x60;all&#x60; - All members of the organization, regardless of role.   \\* &#x60;admin&#x60; - Organization owners.   \\* &#x60;member&#x60; - Non-owner organization members. (optional, default to .all)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsListMembers(org: String, filter: Filter_orgsListMembers? = nil, role: Role_orgsListMembers? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [SimpleUser]?,_ error: Error?) -> Void)) {
        orgsListMembersWithRequestBuilder(org: org, filter: filter, role: role, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List organization members
     - GET /orgs/{org}/members
     - List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#list-organization-members
}
     - parameter org: (path)  
     - parameter filter: (query) Filter members returned in the list. Can be one of:   \\* &#x60;2fa_disabled&#x60; - Members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled. Available for organization owners.   \\* &#x60;all&#x60; - All members the authenticated user can see. (optional, default to .all)
     - parameter role: (query) Filter members returned by their role. Can be one of:   \\* &#x60;all&#x60; - All members of the organization, regardless of role.   \\* &#x60;admin&#x60; - Organization owners.   \\* &#x60;member&#x60; - Non-owner organization members. (optional, default to .all)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[SimpleUser]> 
     */
    open class func orgsListMembersWithRequestBuilder(org: String, filter: Filter_orgsListMembers? = nil, role: Role_orgsListMembers? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[SimpleUser]> {
        var path = "/orgs/{org}/members"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter": filter?.encodeToJSON(), 
            "role": role?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[SimpleUser]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter state
     */
    public enum State_orgsListMembershipsForAuthenticatedUser: String, CaseIterable {
        case active = "active"
        case pending = "pending"
    }

    /**
     List organization memberships for the authenticated user
     
     - parameter state: (query) Indicates the state of the memberships to return. Can be either &#x60;active&#x60; or &#x60;pending&#x60;. If not specified, the API returns both active and pending memberships. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsListMembershipsForAuthenticatedUser(state: State_orgsListMembershipsForAuthenticatedUser? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [OrgMembership]?,_ error: Error?) -> Void)) {
        orgsListMembershipsForAuthenticatedUserWithRequestBuilder(state: state, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List organization memberships for the authenticated user
     - GET /user/memberships/orgs
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#list-organization-memberships-for-the-authenticated-user
}
     - parameter state: (query) Indicates the state of the memberships to return. Can be either &#x60;active&#x60; or &#x60;pending&#x60;. If not specified, the API returns both active and pending memberships. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[OrgMembership]> 
     */
    open class func orgsListMembershipsForAuthenticatedUserWithRequestBuilder(state: State_orgsListMembershipsForAuthenticatedUser? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[OrgMembership]> {
        let path = "/user/memberships/orgs"
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "state": state?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[OrgMembership]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter filter
     */
    public enum Filter_orgsListOutsideCollaborators: String, CaseIterable {
        case _2faDisabled = "2fa_disabled"
        case all = "all"
    }

    /**
     List outside collaborators for an organization
     
     - parameter org: (path)  
     - parameter filter: (query) Filter the list of outside collaborators. Can be one of:   \\* &#x60;2fa_disabled&#x60;: Outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled.   \\* &#x60;all&#x60;: All outside collaborators. (optional, default to .all)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsListOutsideCollaborators(org: String, filter: Filter_orgsListOutsideCollaborators? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [SimpleUser]?,_ error: Error?) -> Void)) {
        orgsListOutsideCollaboratorsWithRequestBuilder(org: org, filter: filter, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List outside collaborators for an organization
     - GET /orgs/{org}/outside_collaborators
     - List all users who are outside collaborators of an organization.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#list-outside-collaborators-for-an-organization
}
     - parameter org: (path)  
     - parameter filter: (query) Filter the list of outside collaborators. Can be one of:   \\* &#x60;2fa_disabled&#x60;: Outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled.   \\* &#x60;all&#x60;: All outside collaborators. (optional, default to .all)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[SimpleUser]> 
     */
    open class func orgsListOutsideCollaboratorsWithRequestBuilder(org: String, filter: Filter_orgsListOutsideCollaborators? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[SimpleUser]> {
        var path = "/orgs/{org}/outside_collaborators"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter": filter?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[SimpleUser]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List public organization members
     
     - parameter org: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsListPublicMembers(org: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [SimpleUser]?,_ error: Error?) -> Void)) {
        orgsListPublicMembersWithRequestBuilder(org: org, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List public organization members
     - GET /orgs/{org}/public_members
     - Members of an organization can choose to have their membership publicized or not.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#list-public-organization-members
}
     - parameter org: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[SimpleUser]> 
     */
    open class func orgsListPublicMembersWithRequestBuilder(org: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[SimpleUser]> {
        var path = "/orgs/{org}/public_members"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[SimpleUser]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List organization webhooks
     
     - parameter org: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsListWebhooks(org: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [OrgHook]?,_ error: Error?) -> Void)) {
        orgsListWebhooksWithRequestBuilder(org: org, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List organization webhooks
     - GET /orgs/{org}/hooks
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#list-organization-webhooks
}
     - parameter org: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[OrgHook]> 
     */
    open class func orgsListWebhooksWithRequestBuilder(org: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[OrgHook]> {
        var path = "/orgs/{org}/hooks"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[OrgHook]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Ping an organization webhook
     
     - parameter org: (path)  
     - parameter hookId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsPingWebhook(org: String, hookId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgsPingWebhookWithRequestBuilder(org: org, hookId: hookId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Ping an organization webhook
     - POST /orgs/{org}/hooks/{hook_id}/pings
     - This will trigger a [ping event](https://docs.github.com/enterprise-server@3.0/webhooks/#ping-event) to be sent to the hook.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#ping-an-organization-webhook
}
     - parameter org: (path)  
     - parameter hookId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func orgsPingWebhookWithRequestBuilder(org: String, hookId: Int) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/hooks/{hook_id}/pings"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let hookIdPreEscape = "\(APIHelper.mapValueToPathItem(hookId))"
        let hookIdPostEscape = hookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{hook_id}", with: hookIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove an organization member
     
     - parameter org: (path)  
     - parameter username: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsRemoveMember(org: String, username: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgsRemoveMemberWithRequestBuilder(org: org, username: username).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove an organization member
     - DELETE /orgs/{org}/members/{username}
     - Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#remove-an-organization-member
}
     - parameter org: (path)  
     - parameter username: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func orgsRemoveMemberWithRequestBuilder(org: String, username: String) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/members/{username}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove organization membership for a user
     
     - parameter org: (path)  
     - parameter username: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsRemoveMembershipForUser(org: String, username: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgsRemoveMembershipForUserWithRequestBuilder(org: org, username: username).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove organization membership for a user
     - DELETE /orgs/{org}/memberships/{username}
     - In order to remove a user's membership with an organization, the authenticated user must be an organization owner.  If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#remove-organization-membership-for-a-user
}
     - parameter org: (path)  
     - parameter username: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func orgsRemoveMembershipForUserWithRequestBuilder(org: String, username: String) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/memberships/{username}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove outside collaborator from an organization
     
     - parameter org: (path)  
     - parameter username: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsRemoveOutsideCollaborator(org: String, username: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgsRemoveOutsideCollaboratorWithRequestBuilder(org: org, username: username).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove outside collaborator from an organization
     - DELETE /orgs/{org}/outside_collaborators/{username}
     - Removing a user from this list will remove them from all the organization's repositories.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#remove-outside-collaborator-from-an-organization
}
     - parameter org: (path)  
     - parameter username: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func orgsRemoveOutsideCollaboratorWithRequestBuilder(org: String, username: String) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/outside_collaborators/{username}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove public organization membership for the authenticated user
     
     - parameter org: (path)  
     - parameter username: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsRemovePublicMembershipForAuthenticatedUser(org: String, username: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgsRemovePublicMembershipForAuthenticatedUserWithRequestBuilder(org: org, username: username).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove public organization membership for the authenticated user
     - DELETE /orgs/{org}/public_members/{username}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#remove-public-organization-membership-for-the-authenticated-user
}
     - parameter org: (path)  
     - parameter username: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func orgsRemovePublicMembershipForAuthenticatedUserWithRequestBuilder(org: String, username: String) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/public_members/{username}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set organization membership for a user
     
     - parameter org: (path)  
     - parameter username: (path)  
     - parameter inlineObject49: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsSetMembershipForUser(org: String, username: String, inlineObject49: InlineObject49? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: OrgMembership?,_ error: Error?) -> Void)) {
        orgsSetMembershipForUserWithRequestBuilder(org: org, username: username, inlineObject49: inlineObject49).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set organization membership for a user
     - PUT /orgs/{org}/memberships/{username}
     - Only authenticated organization owners can add a member to the organization or update the member's role.  *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.      *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.  **Rate limits**  To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#set-organization-membership-for-a-user
}
     - parameter org: (path)  
     - parameter username: (path)  
     - parameter inlineObject49: (body)  (optional)
     - returns: RequestBuilder<OrgMembership> 
     */
    open class func orgsSetMembershipForUserWithRequestBuilder(org: String, username: String, inlineObject49: InlineObject49? = nil) -> RequestBuilder<OrgMembership> {
        var path = "/orgs/{org}/memberships/{username}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject49)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgMembership>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set public organization membership for the authenticated user
     
     - parameter org: (path)  
     - parameter username: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsSetPublicMembershipForAuthenticatedUser(org: String, username: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgsSetPublicMembershipForAuthenticatedUserWithRequestBuilder(org: org, username: username).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set public organization membership for the authenticated user
     - PUT /orgs/{org}/public_members/{username}
     - The user can publicize their own membership. (A user cannot publicize the membership for another user.)  Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs).\"
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#set-public-organization-membership-for-the-authenticated-user
}
     - parameter org: (path)  
     - parameter username: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func orgsSetPublicMembershipForAuthenticatedUserWithRequestBuilder(org: String, username: String) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/public_members/{username}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update an organization
     
     - parameter org: (path)  
     - parameter inlineObject37: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsUpdate(org: String, inlineObject37: InlineObject37? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: OrganizationFull?,_ error: Error?) -> Void)) {
        orgsUpdateWithRequestBuilder(org: org, inlineObject37: inlineObject37).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update an organization
     - PATCH /orgs/{org}
     - **Parameter Deprecation Notice:** GitHub Enterprise Server will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).  Enables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/orgs/#update-an-organization
}
     - parameter org: (path)  
     - parameter inlineObject37: (body)  (optional)
     - returns: RequestBuilder<OrganizationFull> 
     */
    open class func orgsUpdateWithRequestBuilder(org: String, inlineObject37: InlineObject37? = nil) -> RequestBuilder<OrganizationFull> {
        var path = "/orgs/{org}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject37)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrganizationFull>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update an organization membership for the authenticated user
     
     - parameter org: (path)  
     - parameter inlineObject177: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsUpdateMembershipForAuthenticatedUser(org: String, inlineObject177: InlineObject177? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: OrgMembership?,_ error: Error?) -> Void)) {
        orgsUpdateMembershipForAuthenticatedUserWithRequestBuilder(org: org, inlineObject177: inlineObject177).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update an organization membership for the authenticated user
     - PATCH /user/memberships/orgs/{org}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#update-an-organization-membership-for-the-authenticated-user
}
     - parameter org: (path)  
     - parameter inlineObject177: (body)  (optional)
     - returns: RequestBuilder<OrgMembership> 
     */
    open class func orgsUpdateMembershipForAuthenticatedUserWithRequestBuilder(org: String, inlineObject177: InlineObject177? = nil) -> RequestBuilder<OrgMembership> {
        var path = "/user/memberships/orgs/{org}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject177)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgMembership>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update an organization webhook
     
     - parameter org: (path)  
     - parameter hookId: (path)  
     - parameter inlineObject47: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsUpdateWebhook(org: String, hookId: Int, inlineObject47: InlineObject47? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: OrgHook?,_ error: Error?) -> Void)) {
        orgsUpdateWebhookWithRequestBuilder(org: org, hookId: hookId, inlineObject47: inlineObject47).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update an organization webhook
     - PATCH /orgs/{org}/hooks/{hook_id}
     - Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use \"[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization).\"
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#update-an-organization-webhook
}
     - parameter org: (path)  
     - parameter hookId: (path)  
     - parameter inlineObject47: (body)  (optional)
     - returns: RequestBuilder<OrgHook> 
     */
    open class func orgsUpdateWebhookWithRequestBuilder(org: String, hookId: Int, inlineObject47: InlineObject47? = nil) -> RequestBuilder<OrgHook> {
        var path = "/orgs/{org}/hooks/{hook_id}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let hookIdPreEscape = "\(APIHelper.mapValueToPathItem(hookId))"
        let hookIdPostEscape = hookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{hook_id}", with: hookIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject47)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgHook>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a webhook configuration for an organization
     
     - parameter org: (path)  
     - parameter hookId: (path)  
     - parameter inlineObject48: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsUpdateWebhookConfigForOrg(org: String, hookId: Int, inlineObject48: InlineObject48? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: WebhookConfig?,_ error: Error?) -> Void)) {
        orgsUpdateWebhookConfigForOrgWithRequestBuilder(org: org, hookId: hookId, inlineObject48: inlineObject48).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a webhook configuration for an organization
     - PATCH /orgs/{org}/hooks/{hook_id}/config
     - Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use \"[Update an organization webhook ](/rest/reference/orgs#update-an-organization-webhook).\"  Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:write` permission.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/orgs#update-a-webhook-configuration-for-an-organization
}
     - parameter org: (path)  
     - parameter hookId: (path)  
     - parameter inlineObject48: (body)  (optional)
     - returns: RequestBuilder<WebhookConfig> 
     */
    open class func orgsUpdateWebhookConfigForOrgWithRequestBuilder(org: String, hookId: Int, inlineObject48: InlineObject48? = nil) -> RequestBuilder<WebhookConfig> {
        var path = "/orgs/{org}/hooks/{hook_id}/config"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let hookIdPreEscape = "\(APIHelper.mapValueToPathItem(hookId))"
        let hookIdPostEscape = hookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{hook_id}", with: hookIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject48)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WebhookConfig>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
