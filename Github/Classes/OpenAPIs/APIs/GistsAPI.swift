//
// GistsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class GistsAPI {
    /**
     Check if a gist is starred
     
     - parameter gistId: (path) gist_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsCheckIsStarred(gistId: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        gistsCheckIsStarredWithRequestBuilder(gistId: gistId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Check if a gist is starred
     - GET /gists/{gist_id}/star
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/gists/#check-if-a-gist-is-starred
}
     - parameter gistId: (path) gist_id parameter 
     - returns: RequestBuilder<Void> 
     */
    open class func gistsCheckIsStarredWithRequestBuilder(gistId: String) -> RequestBuilder<Void> {
        var path = "/gists/{gist_id}/star"
        let gistIdPreEscape = "\(APIHelper.mapValueToPathItem(gistId))"
        let gistIdPostEscape = gistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{gist_id}", with: gistIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a gist
     
     - parameter inlineObject31: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsCreate(inlineObject31: InlineObject31? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: GistSimple?,_ error: Error?) -> Void)) {
        gistsCreateWithRequestBuilder(inlineObject31: inlineObject31).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a gist
     - POST /gists
     - Allows you to add a new gist with one or more files.  **Note:** Don't name your files \"gistfile\" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
     - responseHeaders: [Location(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/gists/#create-a-gist
}
     - parameter inlineObject31: (body)  (optional)
     - returns: RequestBuilder<GistSimple> 
     */
    open class func gistsCreateWithRequestBuilder(inlineObject31: InlineObject31? = nil) -> RequestBuilder<GistSimple> {
        let path = "/gists"
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject31)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GistSimple>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a gist comment
     
     - parameter gistId: (path) gist_id parameter 
     - parameter inlineObject32: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsCreateComment(gistId: String, inlineObject32: InlineObject32? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: GistComment?,_ error: Error?) -> Void)) {
        gistsCreateCommentWithRequestBuilder(gistId: gistId, inlineObject32: inlineObject32).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a gist comment
     - POST /gists/{gist_id}/comments
     - responseHeaders: [Location(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/gists#create-a-gist-comment
}
     - parameter gistId: (path) gist_id parameter 
     - parameter inlineObject32: (body)  (optional)
     - returns: RequestBuilder<GistComment> 
     */
    open class func gistsCreateCommentWithRequestBuilder(gistId: String, inlineObject32: InlineObject32? = nil) -> RequestBuilder<GistComment> {
        var path = "/gists/{gist_id}/comments"
        let gistIdPreEscape = "\(APIHelper.mapValueToPathItem(gistId))"
        let gistIdPostEscape = gistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{gist_id}", with: gistIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject32)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GistComment>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a gist
     
     - parameter gistId: (path) gist_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsDelete(gistId: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        gistsDeleteWithRequestBuilder(gistId: gistId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a gist
     - DELETE /gists/{gist_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/gists/#delete-a-gist
}
     - parameter gistId: (path) gist_id parameter 
     - returns: RequestBuilder<Void> 
     */
    open class func gistsDeleteWithRequestBuilder(gistId: String) -> RequestBuilder<Void> {
        var path = "/gists/{gist_id}"
        let gistIdPreEscape = "\(APIHelper.mapValueToPathItem(gistId))"
        let gistIdPostEscape = gistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{gist_id}", with: gistIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a gist comment
     
     - parameter gistId: (path) gist_id parameter 
     - parameter commentId: (path) comment_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsDeleteComment(gistId: String, commentId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        gistsDeleteCommentWithRequestBuilder(gistId: gistId, commentId: commentId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a gist comment
     - DELETE /gists/{gist_id}/comments/{comment_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/gists#delete-a-gist-comment
}
     - parameter gistId: (path) gist_id parameter 
     - parameter commentId: (path) comment_id parameter 
     - returns: RequestBuilder<Void> 
     */
    open class func gistsDeleteCommentWithRequestBuilder(gistId: String, commentId: Int) -> RequestBuilder<Void> {
        var path = "/gists/{gist_id}/comments/{comment_id}"
        let gistIdPreEscape = "\(APIHelper.mapValueToPathItem(gistId))"
        let gistIdPostEscape = gistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{gist_id}", with: gistIdPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(APIHelper.mapValueToPathItem(commentId))"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_id}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Fork a gist
     
     - parameter gistId: (path) gist_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsFork(gistId: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: BaseGist?,_ error: Error?) -> Void)) {
        gistsForkWithRequestBuilder(gistId: gistId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Fork a gist
     - POST /gists/{gist_id}/forks
     - **Note**: This was previously `/gists/:gist_id/fork`.
     - responseHeaders: [Location(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/gists/#fork-a-gist
}
     - parameter gistId: (path) gist_id parameter 
     - returns: RequestBuilder<BaseGist> 
     */
    open class func gistsForkWithRequestBuilder(gistId: String) -> RequestBuilder<BaseGist> {
        var path = "/gists/{gist_id}/forks"
        let gistIdPreEscape = "\(APIHelper.mapValueToPathItem(gistId))"
        let gistIdPostEscape = gistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{gist_id}", with: gistIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BaseGist>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a gist
     
     - parameter gistId: (path) gist_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsGet(gistId: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: GistSimple?,_ error: Error?) -> Void)) {
        gistsGetWithRequestBuilder(gistId: gistId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a gist
     - GET /gists/{gist_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/gists/#get-a-gist
}
     - parameter gistId: (path) gist_id parameter 
     - returns: RequestBuilder<GistSimple> 
     */
    open class func gistsGetWithRequestBuilder(gistId: String) -> RequestBuilder<GistSimple> {
        var path = "/gists/{gist_id}"
        let gistIdPreEscape = "\(APIHelper.mapValueToPathItem(gistId))"
        let gistIdPostEscape = gistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{gist_id}", with: gistIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GistSimple>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a gist comment
     
     - parameter gistId: (path) gist_id parameter 
     - parameter commentId: (path) comment_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsGetComment(gistId: String, commentId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: GistComment?,_ error: Error?) -> Void)) {
        gistsGetCommentWithRequestBuilder(gistId: gistId, commentId: commentId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a gist comment
     - GET /gists/{gist_id}/comments/{comment_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/gists#get-a-gist-comment
}
     - parameter gistId: (path) gist_id parameter 
     - parameter commentId: (path) comment_id parameter 
     - returns: RequestBuilder<GistComment> 
     */
    open class func gistsGetCommentWithRequestBuilder(gistId: String, commentId: Int) -> RequestBuilder<GistComment> {
        var path = "/gists/{gist_id}/comments/{comment_id}"
        let gistIdPreEscape = "\(APIHelper.mapValueToPathItem(gistId))"
        let gistIdPostEscape = gistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{gist_id}", with: gistIdPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(APIHelper.mapValueToPathItem(commentId))"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_id}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GistComment>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a gist revision
     
     - parameter gistId: (path) gist_id parameter 
     - parameter sha: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsGetRevision(gistId: String, sha: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: GistSimple?,_ error: Error?) -> Void)) {
        gistsGetRevisionWithRequestBuilder(gistId: gistId, sha: sha).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a gist revision
     - GET /gists/{gist_id}/{sha}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/gists/#get-a-gist-revision
}
     - parameter gistId: (path) gist_id parameter 
     - parameter sha: (path)  
     - returns: RequestBuilder<GistSimple> 
     */
    open class func gistsGetRevisionWithRequestBuilder(gistId: String, sha: String) -> RequestBuilder<GistSimple> {
        var path = "/gists/{gist_id}/{sha}"
        let gistIdPreEscape = "\(APIHelper.mapValueToPathItem(gistId))"
        let gistIdPostEscape = gistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{gist_id}", with: gistIdPostEscape, options: .literal, range: nil)
        let shaPreEscape = "\(APIHelper.mapValueToPathItem(sha))"
        let shaPostEscape = shaPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sha}", with: shaPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GistSimple>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List gists for the authenticated user
     
     - parameter since: (query) Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsList(since: String? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [BaseGist]?,_ error: Error?) -> Void)) {
        gistsListWithRequestBuilder(since: since, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List gists for the authenticated user
     - GET /gists
     - Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/gists/#list-gists-for-the-authenticated-user
}
     - parameter since: (query) Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[BaseGist]> 
     */
    open class func gistsListWithRequestBuilder(since: String? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[BaseGist]> {
        let path = "/gists"
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "since": since?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[BaseGist]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List gist comments
     
     - parameter gistId: (path) gist_id parameter 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsListComments(gistId: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [GistComment]?,_ error: Error?) -> Void)) {
        gistsListCommentsWithRequestBuilder(gistId: gistId, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List gist comments
     - GET /gists/{gist_id}/comments
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/gists#list-gist-comments
}
     - parameter gistId: (path) gist_id parameter 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[GistComment]> 
     */
    open class func gistsListCommentsWithRequestBuilder(gistId: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[GistComment]> {
        var path = "/gists/{gist_id}/comments"
        let gistIdPreEscape = "\(APIHelper.mapValueToPathItem(gistId))"
        let gistIdPostEscape = gistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{gist_id}", with: gistIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[GistComment]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List gist commits
     
     - parameter gistId: (path) gist_id parameter 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsListCommits(gistId: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [GistCommit]?,_ error: Error?) -> Void)) {
        gistsListCommitsWithRequestBuilder(gistId: gistId, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List gist commits
     - GET /gists/{gist_id}/commits
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/gists/#list-gist-commits
}
     - parameter gistId: (path) gist_id parameter 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[GistCommit]> 
     */
    open class func gistsListCommitsWithRequestBuilder(gistId: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[GistCommit]> {
        var path = "/gists/{gist_id}/commits"
        let gistIdPreEscape = "\(APIHelper.mapValueToPathItem(gistId))"
        let gistIdPostEscape = gistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{gist_id}", with: gistIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[GistCommit]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List gists for a user
     
     - parameter username: (path)  
     - parameter since: (query) Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsListForUser(username: String, since: String? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [BaseGist]?,_ error: Error?) -> Void)) {
        gistsListForUserWithRequestBuilder(username: username, since: since, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List gists for a user
     - GET /users/{username}/gists
     - Lists public gists for the specified user:
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/gists/#list-gists-for-a-user
}
     - parameter username: (path)  
     - parameter since: (query) Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[BaseGist]> 
     */
    open class func gistsListForUserWithRequestBuilder(username: String, since: String? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[BaseGist]> {
        var path = "/users/{username}/gists"
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "since": since?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[BaseGist]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List gist forks
     
     - parameter gistId: (path) gist_id parameter 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsListForks(gistId: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [GistSimple]?,_ error: Error?) -> Void)) {
        gistsListForksWithRequestBuilder(gistId: gistId, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List gist forks
     - GET /gists/{gist_id}/forks
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/gists/#list-gist-forks
}
     - parameter gistId: (path) gist_id parameter 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[GistSimple]> 
     */
    open class func gistsListForksWithRequestBuilder(gistId: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[GistSimple]> {
        var path = "/gists/{gist_id}/forks"
        let gistIdPreEscape = "\(APIHelper.mapValueToPathItem(gistId))"
        let gistIdPostEscape = gistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{gist_id}", with: gistIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[GistSimple]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List public gists
     
     - parameter since: (query) Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsListPublic(since: String? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [BaseGist]?,_ error: Error?) -> Void)) {
        gistsListPublicWithRequestBuilder(since: since, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List public gists
     - GET /gists/public
     - List public gists sorted by most recently updated to least recently updated.  Note: With [pagination](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/gists/#list-public-gists
}
     - parameter since: (query) Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[BaseGist]> 
     */
    open class func gistsListPublicWithRequestBuilder(since: String? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[BaseGist]> {
        let path = "/gists/public"
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "since": since?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[BaseGist]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List starred gists
     
     - parameter since: (query) Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsListStarred(since: String? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [BaseGist]?,_ error: Error?) -> Void)) {
        gistsListStarredWithRequestBuilder(since: since, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List starred gists
     - GET /gists/starred
     - List the authenticated user's starred gists:
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/gists/#list-starred-gists
}
     - parameter since: (query) Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[BaseGist]> 
     */
    open class func gistsListStarredWithRequestBuilder(since: String? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[BaseGist]> {
        let path = "/gists/starred"
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "since": since?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[BaseGist]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Star a gist
     
     - parameter gistId: (path) gist_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsStar(gistId: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        gistsStarWithRequestBuilder(gistId: gistId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Star a gist
     - PUT /gists/{gist_id}/star
     - Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs).\"
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/gists/#star-a-gist
}
     - parameter gistId: (path) gist_id parameter 
     - returns: RequestBuilder<Void> 
     */
    open class func gistsStarWithRequestBuilder(gistId: String) -> RequestBuilder<Void> {
        var path = "/gists/{gist_id}/star"
        let gistIdPreEscape = "\(APIHelper.mapValueToPathItem(gistId))"
        let gistIdPostEscape = gistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{gist_id}", with: gistIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Unstar a gist
     
     - parameter gistId: (path) gist_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsUnstar(gistId: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        gistsUnstarWithRequestBuilder(gistId: gistId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Unstar a gist
     - DELETE /gists/{gist_id}/star
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/gists/#unstar-a-gist
}
     - parameter gistId: (path) gist_id parameter 
     - returns: RequestBuilder<Void> 
     */
    open class func gistsUnstarWithRequestBuilder(gistId: String) -> RequestBuilder<Void> {
        var path = "/gists/{gist_id}/star"
        let gistIdPreEscape = "\(APIHelper.mapValueToPathItem(gistId))"
        let gistIdPostEscape = gistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{gist_id}", with: gistIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update a gist
     
     - parameter gistId: (path) gist_id parameter 
     - parameter UNKNOWN_BASE_TYPE: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsUpdate(gistId: String, UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: GistSimple?,_ error: Error?) -> Void)) {
        gistsUpdateWithRequestBuilder(gistId: gistId, UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a gist
     - PATCH /gists/{gist_id}
     - Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/gists/#update-a-gist
}
     - parameter gistId: (path) gist_id parameter 
     - parameter UNKNOWN_BASE_TYPE: (body)  (optional)
     - returns: RequestBuilder<GistSimple> 
     */
    open class func gistsUpdateWithRequestBuilder(gistId: String, UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE? = nil) -> RequestBuilder<GistSimple> {
        var path = "/gists/{gist_id}"
        let gistIdPreEscape = "\(APIHelper.mapValueToPathItem(gistId))"
        let gistIdPostEscape = gistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{gist_id}", with: gistIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: UNKNOWN_BASE_TYPE)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GistSimple>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a gist comment
     
     - parameter gistId: (path) gist_id parameter 
     - parameter commentId: (path) comment_id parameter 
     - parameter inlineObject33: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsUpdateComment(gistId: String, commentId: Int, inlineObject33: InlineObject33? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: GistComment?,_ error: Error?) -> Void)) {
        gistsUpdateCommentWithRequestBuilder(gistId: gistId, commentId: commentId, inlineObject33: inlineObject33).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a gist comment
     - PATCH /gists/{gist_id}/comments/{comment_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/gists#update-a-gist-comment
}
     - parameter gistId: (path) gist_id parameter 
     - parameter commentId: (path) comment_id parameter 
     - parameter inlineObject33: (body)  (optional)
     - returns: RequestBuilder<GistComment> 
     */
    open class func gistsUpdateCommentWithRequestBuilder(gistId: String, commentId: Int, inlineObject33: InlineObject33? = nil) -> RequestBuilder<GistComment> {
        var path = "/gists/{gist_id}/comments/{comment_id}"
        let gistIdPreEscape = "\(APIHelper.mapValueToPathItem(gistId))"
        let gistIdPostEscape = gistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{gist_id}", with: gistIdPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(APIHelper.mapValueToPathItem(commentId))"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_id}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject33)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GistComment>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
