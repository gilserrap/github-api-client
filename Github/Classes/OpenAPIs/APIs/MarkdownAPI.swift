//
// MarkdownAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class MarkdownAPI {
    /**
     Render a Markdown document
     
     - parameter inlineObject34: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func markdownRender(inlineObject34: InlineObject34? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        markdownRenderWithRequestBuilder(inlineObject34: inlineObject34).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Render a Markdown document
     - POST /markdown
     - responseHeaders: [Content-Type(String), Content-Length(String), X-CommonMarker-Version(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/markdown/#render-a-markdown-document
}
     - parameter inlineObject34: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func markdownRenderWithRequestBuilder(inlineObject34: InlineObject34? = nil) -> RequestBuilder<Void> {
        let path = "/markdown"
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject34)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Render a Markdown document in raw mode
     
     - parameter body: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func markdownRenderRaw(body: String? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        markdownRenderRawWithRequestBuilder(body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Render a Markdown document in raw mode
     - POST /markdown/raw
     - You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.
     - responseHeaders: [X-CommonMarker-Version(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/markdown/#render-a-markdown-document-in-raw-mode
}
     - parameter body: (body)  (optional)
     - returns: RequestBuilder<String> 
     */
    open class func markdownRenderRawWithRequestBuilder(body: String? = nil) -> RequestBuilder<String> {
        let path = "/markdown/raw"
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
