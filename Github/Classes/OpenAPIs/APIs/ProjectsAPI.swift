//
// ProjectsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class ProjectsAPI {
    /**
     Add project collaborator
     
     - parameter projectId: (path)  
     - parameter username: (path)  
     - parameter inlineObject69: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func projectsAddCollaborator(projectId: Int, username: String, inlineObject69: InlineObject69? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        projectsAddCollaboratorWithRequestBuilder(projectId: projectId, username: username, inlineObject69: inlineObject69).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add project collaborator
     - PUT /projects/{project_id}/collaborators/{username}
     - Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/projects#add-project-collaborator
}
     - parameter projectId: (path)  
     - parameter username: (path)  
     - parameter inlineObject69: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func projectsAddCollaboratorWithRequestBuilder(projectId: Int, username: String, inlineObject69: InlineObject69? = nil) -> RequestBuilder<Void> {
        var path = "/projects/{project_id}/collaborators/{username}"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject69)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a project column
     
     - parameter projectId: (path)  
     - parameter inlineObject70: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func projectsCreateColumn(projectId: Int, inlineObject70: InlineObject70? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: ProjectColumn?,_ error: Error?) -> Void)) {
        projectsCreateColumnWithRequestBuilder(projectId: projectId, inlineObject70: inlineObject70).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a project column
     - POST /projects/{project_id}/columns
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/projects#create-a-project-column
}
     - parameter projectId: (path)  
     - parameter inlineObject70: (body)  (optional)
     - returns: RequestBuilder<ProjectColumn> 
     */
    open class func projectsCreateColumnWithRequestBuilder(projectId: Int, inlineObject70: InlineObject70? = nil) -> RequestBuilder<ProjectColumn> {
        var path = "/projects/{project_id}/columns"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject70)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ProjectColumn>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a user project
     
     - parameter inlineObject178: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func projectsCreateForAuthenticatedUser(inlineObject178: InlineObject178? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Project?,_ error: Error?) -> Void)) {
        projectsCreateForAuthenticatedUserWithRequestBuilder(inlineObject178: inlineObject178).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a user project
     - POST /user/projects
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/projects/#create-a-user-project
}
     - parameter inlineObject178: (body)  (optional)
     - returns: RequestBuilder<Project> 
     */
    open class func projectsCreateForAuthenticatedUserWithRequestBuilder(inlineObject178: InlineObject178? = nil) -> RequestBuilder<Project> {
        let path = "/user/projects"
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject178)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Project>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create an organization project
     
     - parameter org: (path)  
     - parameter inlineObject51: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func projectsCreateForOrg(org: String, inlineObject51: InlineObject51? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Project?,_ error: Error?) -> Void)) {
        projectsCreateForOrgWithRequestBuilder(org: org, inlineObject51: inlineObject51).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create an organization project
     - POST /orgs/{org}/projects
     - Creates an organization project board. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/projects/#create-an-organization-project
}
     - parameter org: (path)  
     - parameter inlineObject51: (body)  (optional)
     - returns: RequestBuilder<Project> 
     */
    open class func projectsCreateForOrgWithRequestBuilder(org: String, inlineObject51: InlineObject51? = nil) -> RequestBuilder<Project> {
        var path = "/orgs/{org}/projects"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject51)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Project>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a repository project
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject135: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func projectsCreateForRepo(owner: String, repo: String, inlineObject135: InlineObject135? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Project?,_ error: Error?) -> Void)) {
        projectsCreateForRepoWithRequestBuilder(owner: owner, repo: repo, inlineObject135: inlineObject135).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a repository project
     - POST /repos/{owner}/{repo}/projects
     - Creates a repository project board. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/projects/#create-a-repository-project
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject135: (body)  (optional)
     - returns: RequestBuilder<Project> 
     */
    open class func projectsCreateForRepoWithRequestBuilder(owner: String, repo: String, inlineObject135: InlineObject135? = nil) -> RequestBuilder<Project> {
        var path = "/repos/{owner}/{repo}/projects"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject135)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Project>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a project
     
     - parameter projectId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func projectsDelete(projectId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        projectsDeleteWithRequestBuilder(projectId: projectId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a project
     - DELETE /projects/{project_id}
     - Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/projects/#delete-a-project
}
     - parameter projectId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func projectsDeleteWithRequestBuilder(projectId: Int) -> RequestBuilder<Void> {
        var path = "/projects/{project_id}"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a project card
     
     - parameter cardId: (path) card_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func projectsDeleteCard(cardId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        projectsDeleteCardWithRequestBuilder(cardId: cardId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a project card
     - DELETE /projects/columns/cards/{card_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/projects#delete-a-project-card
}
     - parameter cardId: (path) card_id parameter 
     - returns: RequestBuilder<Void> 
     */
    open class func projectsDeleteCardWithRequestBuilder(cardId: Int) -> RequestBuilder<Void> {
        var path = "/projects/columns/cards/{card_id}"
        let cardIdPreEscape = "\(APIHelper.mapValueToPathItem(cardId))"
        let cardIdPostEscape = cardIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{card_id}", with: cardIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a project column
     
     - parameter columnId: (path) column_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func projectsDeleteColumn(columnId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        projectsDeleteColumnWithRequestBuilder(columnId: columnId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a project column
     - DELETE /projects/columns/{column_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/projects#delete-a-project-column
}
     - parameter columnId: (path) column_id parameter 
     - returns: RequestBuilder<Void> 
     */
    open class func projectsDeleteColumnWithRequestBuilder(columnId: Int) -> RequestBuilder<Void> {
        var path = "/projects/columns/{column_id}"
        let columnIdPreEscape = "\(APIHelper.mapValueToPathItem(columnId))"
        let columnIdPostEscape = columnIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{column_id}", with: columnIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a project
     
     - parameter projectId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func projectsGet(projectId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Project?,_ error: Error?) -> Void)) {
        projectsGetWithRequestBuilder(projectId: projectId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a project
     - GET /projects/{project_id}
     - Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/projects/#get-a-project
}
     - parameter projectId: (path)  
     - returns: RequestBuilder<Project> 
     */
    open class func projectsGetWithRequestBuilder(projectId: Int) -> RequestBuilder<Project> {
        var path = "/projects/{project_id}"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Project>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a project card
     
     - parameter cardId: (path) card_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func projectsGetCard(cardId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: ProjectCard?,_ error: Error?) -> Void)) {
        projectsGetCardWithRequestBuilder(cardId: cardId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a project card
     - GET /projects/columns/cards/{card_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/projects#get-a-project-card
}
     - parameter cardId: (path) card_id parameter 
     - returns: RequestBuilder<ProjectCard> 
     */
    open class func projectsGetCardWithRequestBuilder(cardId: Int) -> RequestBuilder<ProjectCard> {
        var path = "/projects/columns/cards/{card_id}"
        let cardIdPreEscape = "\(APIHelper.mapValueToPathItem(cardId))"
        let cardIdPostEscape = cardIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{card_id}", with: cardIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ProjectCard>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a project column
     
     - parameter columnId: (path) column_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func projectsGetColumn(columnId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: ProjectColumn?,_ error: Error?) -> Void)) {
        projectsGetColumnWithRequestBuilder(columnId: columnId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a project column
     - GET /projects/columns/{column_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/projects#get-a-project-column
}
     - parameter columnId: (path) column_id parameter 
     - returns: RequestBuilder<ProjectColumn> 
     */
    open class func projectsGetColumnWithRequestBuilder(columnId: Int) -> RequestBuilder<ProjectColumn> {
        var path = "/projects/columns/{column_id}"
        let columnIdPreEscape = "\(APIHelper.mapValueToPathItem(columnId))"
        let columnIdPostEscape = columnIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{column_id}", with: columnIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ProjectColumn>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get project permission for a user
     
     - parameter projectId: (path)  
     - parameter username: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func projectsGetPermissionForUser(projectId: Int, username: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: RepositoryCollaboratorPermission?,_ error: Error?) -> Void)) {
        projectsGetPermissionForUserWithRequestBuilder(projectId: projectId, username: username).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get project permission for a user
     - GET /projects/{project_id}/collaborators/{username}/permission
     - Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/projects#get-project-permission-for-a-user
}
     - parameter projectId: (path)  
     - parameter username: (path)  
     - returns: RequestBuilder<RepositoryCollaboratorPermission> 
     */
    open class func projectsGetPermissionForUserWithRequestBuilder(projectId: Int, username: String) -> RequestBuilder<RepositoryCollaboratorPermission> {
        var path = "/projects/{project_id}/collaborators/{username}/permission"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RepositoryCollaboratorPermission>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter archivedState
     */
    public enum ArchivedState_projectsListCards: String, CaseIterable {
        case all = "all"
        case archived = "archived"
        case notArchived = "not_archived"
    }

    /**
     List project cards
     
     - parameter columnId: (path) column_id parameter 
     - parameter archivedState: (query) Filters the project cards that are returned by the card&#39;s state. Can be one of &#x60;all&#x60;,&#x60;archived&#x60;, or &#x60;not_archived&#x60;. (optional, default to .notArchived)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func projectsListCards(columnId: Int, archivedState: ArchivedState_projectsListCards? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [ProjectCard]?,_ error: Error?) -> Void)) {
        projectsListCardsWithRequestBuilder(columnId: columnId, archivedState: archivedState, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List project cards
     - GET /projects/columns/{column_id}/cards
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/projects#list-project-cards
}
     - parameter columnId: (path) column_id parameter 
     - parameter archivedState: (query) Filters the project cards that are returned by the card&#39;s state. Can be one of &#x60;all&#x60;,&#x60;archived&#x60;, or &#x60;not_archived&#x60;. (optional, default to .notArchived)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[ProjectCard]> 
     */
    open class func projectsListCardsWithRequestBuilder(columnId: Int, archivedState: ArchivedState_projectsListCards? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[ProjectCard]> {
        var path = "/projects/columns/{column_id}/cards"
        let columnIdPreEscape = "\(APIHelper.mapValueToPathItem(columnId))"
        let columnIdPostEscape = columnIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{column_id}", with: columnIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "archived_state": archivedState?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[ProjectCard]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter affiliation
     */
    public enum Affiliation_projectsListCollaborators: String, CaseIterable {
        case outside = "outside"
        case direct = "direct"
        case all = "all"
    }

    /**
     List project collaborators
     
     - parameter projectId: (path)  
     - parameter affiliation: (query) Filters the collaborators by their affiliation. Can be one of:   \\* &#x60;outside&#x60;: Outside collaborators of a project that are not a member of the project&#39;s organization.   \\* &#x60;direct&#x60;: Collaborators with permissions to a project, regardless of organization membership status.   \\* &#x60;all&#x60;: All collaborators the authenticated user can see. (optional, default to .all)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func projectsListCollaborators(projectId: Int, affiliation: Affiliation_projectsListCollaborators? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [SimpleUser]?,_ error: Error?) -> Void)) {
        projectsListCollaboratorsWithRequestBuilder(projectId: projectId, affiliation: affiliation, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List project collaborators
     - GET /projects/{project_id}/collaborators
     - Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/projects#list-project-collaborators
}
     - parameter projectId: (path)  
     - parameter affiliation: (query) Filters the collaborators by their affiliation. Can be one of:   \\* &#x60;outside&#x60;: Outside collaborators of a project that are not a member of the project&#39;s organization.   \\* &#x60;direct&#x60;: Collaborators with permissions to a project, regardless of organization membership status.   \\* &#x60;all&#x60;: All collaborators the authenticated user can see. (optional, default to .all)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[SimpleUser]> 
     */
    open class func projectsListCollaboratorsWithRequestBuilder(projectId: Int, affiliation: Affiliation_projectsListCollaborators? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[SimpleUser]> {
        var path = "/projects/{project_id}/collaborators"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "affiliation": affiliation?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[SimpleUser]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List project columns
     
     - parameter projectId: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func projectsListColumns(projectId: Int, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [ProjectColumn]?,_ error: Error?) -> Void)) {
        projectsListColumnsWithRequestBuilder(projectId: projectId, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List project columns
     - GET /projects/{project_id}/columns
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/projects#list-project-columns
}
     - parameter projectId: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[ProjectColumn]> 
     */
    open class func projectsListColumnsWithRequestBuilder(projectId: Int, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[ProjectColumn]> {
        var path = "/projects/{project_id}/columns"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[ProjectColumn]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter state
     */
    public enum State_projectsListForOrg: String, CaseIterable {
        case _open = "open"
        case closed = "closed"
        case all = "all"
    }

    /**
     List organization projects
     
     - parameter org: (path)  
     - parameter state: (query) Indicates the state of the projects to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to ._open)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func projectsListForOrg(org: String, state: State_projectsListForOrg? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Project]?,_ error: Error?) -> Void)) {
        projectsListForOrgWithRequestBuilder(org: org, state: state, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List organization projects
     - GET /orgs/{org}/projects
     - Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/projects/#list-organization-projects
}
     - parameter org: (path)  
     - parameter state: (query) Indicates the state of the projects to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to ._open)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[Project]> 
     */
    open class func projectsListForOrgWithRequestBuilder(org: String, state: State_projectsListForOrg? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[Project]> {
        var path = "/orgs/{org}/projects"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "state": state?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Project]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter state
     */
    public enum State_projectsListForRepo: String, CaseIterable {
        case _open = "open"
        case closed = "closed"
        case all = "all"
    }

    /**
     List repository projects
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter state: (query) Indicates the state of the projects to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to ._open)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func projectsListForRepo(owner: String, repo: String, state: State_projectsListForRepo? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Project]?,_ error: Error?) -> Void)) {
        projectsListForRepoWithRequestBuilder(owner: owner, repo: repo, state: state, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List repository projects
     - GET /repos/{owner}/{repo}/projects
     - Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/projects/#list-repository-projects
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter state: (query) Indicates the state of the projects to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to ._open)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[Project]> 
     */
    open class func projectsListForRepoWithRequestBuilder(owner: String, repo: String, state: State_projectsListForRepo? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[Project]> {
        var path = "/repos/{owner}/{repo}/projects"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "state": state?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Project]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter state
     */
    public enum State_projectsListForUser: String, CaseIterable {
        case _open = "open"
        case closed = "closed"
        case all = "all"
    }

    /**
     List user projects
     
     - parameter username: (path)  
     - parameter state: (query) Indicates the state of the projects to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to ._open)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func projectsListForUser(username: String, state: State_projectsListForUser? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Project]?,_ error: Error?) -> Void)) {
        projectsListForUserWithRequestBuilder(username: username, state: state, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List user projects
     - GET /users/{username}/projects
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/projects/#list-user-projects
}
     - parameter username: (path)  
     - parameter state: (query) Indicates the state of the projects to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to ._open)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[Project]> 
     */
    open class func projectsListForUserWithRequestBuilder(username: String, state: State_projectsListForUser? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[Project]> {
        var path = "/users/{username}/projects"
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "state": state?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Project]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Move a project card
     
     - parameter cardId: (path) card_id parameter 
     - parameter inlineObject65: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func projectsMoveCard(cardId: Int, inlineObject65: InlineObject65? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        projectsMoveCardWithRequestBuilder(cardId: cardId, inlineObject65: inlineObject65).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove user as a collaborator
     - DELETE /projects/{project_id}/collaborators/{username}
     - Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/projects#remove-project-collaborator
}
     - parameter projectId: (path)  
     - parameter username: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func projectsRemoveCollaboratorWithRequestBuilder(projectId: Int, username: String) -> RequestBuilder<Void> {
        var path = "/projects/{project_id}/collaborators/{username}"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update a project
     
     - parameter projectId: (path)  
     - parameter inlineObject68: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func projectsUpdate(projectId: Int, inlineObject68: InlineObject68? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Project?,_ error: Error?) -> Void)) {
        projectsUpdateWithRequestBuilder(projectId: projectId, inlineObject68: inlineObject68).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a project
     - PATCH /projects/{project_id}
     - Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/projects/#update-a-project
}
     - parameter projectId: (path)  
     - parameter inlineObject68: (body)  (optional)
     - returns: RequestBuilder<Project> 
     */
    open class func projectsUpdateWithRequestBuilder(projectId: Int, inlineObject68: InlineObject68? = nil) -> RequestBuilder<Project> {
        var path = "/projects/{project_id}"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject68)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Project>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update an existing project card
     
     - parameter cardId: (path) card_id parameter 
     - parameter inlineObject64: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func projectsUpdateCard(cardId: Int, inlineObject64: InlineObject64? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: ProjectCard?,_ error: Error?) -> Void)) {
        projectsUpdateCardWithRequestBuilder(cardId: cardId, inlineObject64: inlineObject64).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update an existing project card
     - PATCH /projects/columns/cards/{card_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/projects#update-a-project-card
}
     - parameter cardId: (path) card_id parameter 
     - parameter inlineObject64: (body)  (optional)
     - returns: RequestBuilder<ProjectCard> 
     */
    open class func projectsUpdateCardWithRequestBuilder(cardId: Int, inlineObject64: InlineObject64? = nil) -> RequestBuilder<ProjectCard> {
        var path = "/projects/columns/cards/{card_id}"
        let cardIdPreEscape = "\(APIHelper.mapValueToPathItem(cardId))"
        let cardIdPostEscape = cardIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{card_id}", with: cardIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject64)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ProjectCard>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update an existing project column
     
     - parameter columnId: (path) column_id parameter 
     - parameter inlineObject66: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func projectsUpdateColumn(columnId: Int, inlineObject66: InlineObject66? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: ProjectColumn?,_ error: Error?) -> Void)) {
        projectsUpdateColumnWithRequestBuilder(columnId: columnId, inlineObject66: inlineObject66).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update an existing project column
     - PATCH /projects/columns/{column_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/projects#update-a-project-column
}
     - parameter columnId: (path) column_id parameter 
     - parameter inlineObject66: (body)  (optional)
     - returns: RequestBuilder<ProjectColumn> 
     */
    open class func projectsUpdateColumnWithRequestBuilder(columnId: Int, inlineObject66: InlineObject66? = nil) -> RequestBuilder<ProjectColumn> {
        var path = "/projects/columns/{column_id}"
        let columnIdPreEscape = "\(APIHelper.mapValueToPathItem(columnId))"
        let columnIdPostEscape = columnIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{column_id}", with: columnIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject66)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ProjectColumn>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
