//
// ReactionsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class ReactionsAPI {
    /**
     Create reaction for a commit comment
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - parameter inlineObject96: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reactionsCreateForCommitComment(owner: String, repo: String, commentId: Int, inlineObject96: InlineObject96? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Reaction?,_ error: Error?) -> Void)) {
        reactionsCreateForCommitCommentWithRequestBuilder(owner: owner, repo: repo, commentId: commentId, inlineObject96: inlineObject96).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create reaction for a commit comment
     - POST /repos/{owner}/{repo}/comments/{comment_id}/reactions
     - Create a reaction to a [commit comment](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#comments). A response with a `Status: 200 OK` means that you already added the reaction type to this commit comment.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/reactions/#create-reaction-for-a-commit-comment
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - parameter inlineObject96: (body)  (optional)
     - returns: RequestBuilder<Reaction> 
     */
    open class func reactionsCreateForCommitCommentWithRequestBuilder(owner: String, repo: String, commentId: Int, inlineObject96: InlineObject96? = nil) -> RequestBuilder<Reaction> {
        var path = "/repos/{owner}/{repo}/comments/{comment_id}/reactions"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(APIHelper.mapValueToPathItem(commentId))"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_id}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject96)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Reaction>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create reaction for an issue
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter inlineObject124: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reactionsCreateForIssue(owner: String, repo: String, issueNumber: Int, inlineObject124: InlineObject124? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Reaction?,_ error: Error?) -> Void)) {
        reactionsCreateForIssueWithRequestBuilder(owner: owner, repo: repo, issueNumber: issueNumber, inlineObject124: inlineObject124).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create reaction for an issue
     - POST /repos/{owner}/{repo}/issues/{issue_number}/reactions
     - Create a reaction to an [issue](https://docs.github.com/enterprise-server@3.0/rest/reference/issues/). A response with a `Status: 200 OK` means that you already added the reaction type to this issue.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/reactions/#create-reaction-for-an-issue
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter inlineObject124: (body)  (optional)
     - returns: RequestBuilder<Reaction> 
     */
    open class func reactionsCreateForIssueWithRequestBuilder(owner: String, repo: String, issueNumber: Int, inlineObject124: InlineObject124? = nil) -> RequestBuilder<Reaction> {
        var path = "/repos/{owner}/{repo}/issues/{issue_number}/reactions"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let issueNumberPreEscape = "\(APIHelper.mapValueToPathItem(issueNumber))"
        let issueNumberPostEscape = issueNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{issue_number}", with: issueNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject124)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Reaction>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create reaction for an issue comment
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - parameter inlineObject116: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reactionsCreateForIssueComment(owner: String, repo: String, commentId: Int, inlineObject116: InlineObject116? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Reaction?,_ error: Error?) -> Void)) {
        reactionsCreateForIssueCommentWithRequestBuilder(owner: owner, repo: repo, commentId: commentId, inlineObject116: inlineObject116).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create reaction for an issue comment
     - POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions
     - Create a reaction to an [issue comment](https://docs.github.com/enterprise-server@3.0/rest/reference/issues#comments). A response with a `Status: 200 OK` means that you already added the reaction type to this issue comment.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/reactions/#create-reaction-for-an-issue-comment
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - parameter inlineObject116: (body)  (optional)
     - returns: RequestBuilder<Reaction> 
     */
    open class func reactionsCreateForIssueCommentWithRequestBuilder(owner: String, repo: String, commentId: Int, inlineObject116: InlineObject116? = nil) -> RequestBuilder<Reaction> {
        var path = "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(APIHelper.mapValueToPathItem(commentId))"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_id}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject116)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Reaction>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create reaction for a pull request review comment
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - parameter inlineObject138: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reactionsCreateForPullRequestReviewComment(owner: String, repo: String, commentId: Int, inlineObject138: InlineObject138? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Reaction?,_ error: Error?) -> Void)) {
        reactionsCreateForPullRequestReviewCommentWithRequestBuilder(owner: owner, repo: repo, commentId: commentId, inlineObject138: inlineObject138).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create reaction for a pull request review comment
     - POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions
     - Create a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#comments). A response with a `Status: 200 OK` means that you already added the reaction type to this pull request review comment.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/reactions/#create-reaction-for-a-pull-request-review-comment
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - parameter inlineObject138: (body)  (optional)
     - returns: RequestBuilder<Reaction> 
     */
    open class func reactionsCreateForPullRequestReviewCommentWithRequestBuilder(owner: String, repo: String, commentId: Int, inlineObject138: InlineObject138? = nil) -> RequestBuilder<Reaction> {
        var path = "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(APIHelper.mapValueToPathItem(commentId))"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_id}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject138)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Reaction>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create reaction for a team discussion comment
     
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter discussionNumber: (path)  
     - parameter commentNumber: (path)  
     - parameter inlineObject59: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reactionsCreateForTeamDiscussionCommentInOrg(org: String, teamSlug: String, discussionNumber: Int, commentNumber: Int, inlineObject59: InlineObject59? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Reaction?,_ error: Error?) -> Void)) {
        reactionsCreateForTeamDiscussionCommentInOrgWithRequestBuilder(org: org, teamSlug: teamSlug, discussionNumber: discussionNumber, commentNumber: commentNumber, inlineObject59: inlineObject59).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create reaction for a team discussion comment
     - POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions
     - Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion comment.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/reactions/#create-reaction-for-a-team-discussion-comment
}
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter discussionNumber: (path)  
     - parameter commentNumber: (path)  
     - parameter inlineObject59: (body)  (optional)
     - returns: RequestBuilder<Reaction> 
     */
    open class func reactionsCreateForTeamDiscussionCommentInOrgWithRequestBuilder(org: String, teamSlug: String, discussionNumber: Int, commentNumber: Int, inlineObject59: InlineObject59? = nil) -> RequestBuilder<Reaction> {
        var path = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let teamSlugPreEscape = "\(APIHelper.mapValueToPathItem(teamSlug))"
        let teamSlugPostEscape = teamSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_slug}", with: teamSlugPostEscape, options: .literal, range: nil)
        let discussionNumberPreEscape = "\(APIHelper.mapValueToPathItem(discussionNumber))"
        let discussionNumberPostEscape = discussionNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{discussion_number}", with: discussionNumberPostEscape, options: .literal, range: nil)
        let commentNumberPreEscape = "\(APIHelper.mapValueToPathItem(commentNumber))"
        let commentNumberPostEscape = commentNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_number}", with: commentNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject59)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Reaction>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create reaction for a team discussion comment (Legacy)
     
     - parameter teamId: (path)  
     - parameter discussionNumber: (path)  
     - parameter commentNumber: (path)  
     - parameter inlineObject169: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func reactionsCreateForTeamDiscussionCommentLegacy(teamId: Int, discussionNumber: Int, commentNumber: Int, inlineObject169: InlineObject169? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Reaction?,_ error: Error?) -> Void)) {
        reactionsCreateForTeamDiscussionCommentLegacyWithRequestBuilder(teamId: teamId, discussionNumber: discussionNumber, commentNumber: commentNumber, inlineObject169: inlineObject169).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create reaction for a team discussion comment (Legacy)
     - POST /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions
     - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new \"[Create reaction for a team discussion comment](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)\" endpoint.  Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion comment.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/reactions/#create-reaction-for-a-team-discussion-comment-legacy
}
     - parameter teamId: (path)  
     - parameter discussionNumber: (path)  
     - parameter commentNumber: (path)  
     - parameter inlineObject169: (body)  (optional)
     - returns: RequestBuilder<Reaction> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func reactionsCreateForTeamDiscussionCommentLegacyWithRequestBuilder(teamId: Int, discussionNumber: Int, commentNumber: Int, inlineObject169: InlineObject169? = nil) -> RequestBuilder<Reaction> {
        var path = "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let discussionNumberPreEscape = "\(APIHelper.mapValueToPathItem(discussionNumber))"
        let discussionNumberPostEscape = discussionNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{discussion_number}", with: discussionNumberPostEscape, options: .literal, range: nil)
        let commentNumberPreEscape = "\(APIHelper.mapValueToPathItem(commentNumber))"
        let commentNumberPostEscape = commentNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_number}", with: commentNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject169)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Reaction>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create reaction for a team discussion
     
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter discussionNumber: (path)  
     - parameter inlineObject60: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reactionsCreateForTeamDiscussionInOrg(org: String, teamSlug: String, discussionNumber: Int, inlineObject60: InlineObject60? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Reaction?,_ error: Error?) -> Void)) {
        reactionsCreateForTeamDiscussionInOrgWithRequestBuilder(org: org, teamSlug: teamSlug, discussionNumber: discussionNumber, inlineObject60: inlineObject60).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create reaction for a team discussion
     - POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions
     - Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/reactions/#create-reaction-for-a-team-discussion
}
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter discussionNumber: (path)  
     - parameter inlineObject60: (body)  (optional)
     - returns: RequestBuilder<Reaction> 
     */
    open class func reactionsCreateForTeamDiscussionInOrgWithRequestBuilder(org: String, teamSlug: String, discussionNumber: Int, inlineObject60: InlineObject60? = nil) -> RequestBuilder<Reaction> {
        var path = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let teamSlugPreEscape = "\(APIHelper.mapValueToPathItem(teamSlug))"
        let teamSlugPostEscape = teamSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_slug}", with: teamSlugPostEscape, options: .literal, range: nil)
        let discussionNumberPreEscape = "\(APIHelper.mapValueToPathItem(discussionNumber))"
        let discussionNumberPostEscape = discussionNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{discussion_number}", with: discussionNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject60)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Reaction>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create reaction for a team discussion (Legacy)
     
     - parameter teamId: (path)  
     - parameter discussionNumber: (path)  
     - parameter inlineObject170: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func reactionsCreateForTeamDiscussionLegacy(teamId: Int, discussionNumber: Int, inlineObject170: InlineObject170? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Reaction?,_ error: Error?) -> Void)) {
        reactionsCreateForTeamDiscussionLegacyWithRequestBuilder(teamId: teamId, discussionNumber: discussionNumber, inlineObject170: inlineObject170).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create reaction for a team discussion (Legacy)
     - POST /teams/{team_id}/discussions/{discussion_number}/reactions
     - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.  Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/reactions/#create-reaction-for-a-team-discussion-legacy
}
     - parameter teamId: (path)  
     - parameter discussionNumber: (path)  
     - parameter inlineObject170: (body)  (optional)
     - returns: RequestBuilder<Reaction> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func reactionsCreateForTeamDiscussionLegacyWithRequestBuilder(teamId: Int, discussionNumber: Int, inlineObject170: InlineObject170? = nil) -> RequestBuilder<Reaction> {
        var path = "/teams/{team_id}/discussions/{discussion_number}/reactions"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let discussionNumberPreEscape = "\(APIHelper.mapValueToPathItem(discussionNumber))"
        let discussionNumberPostEscape = discussionNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{discussion_number}", with: discussionNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject170)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Reaction>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a commit comment reaction
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - parameter reactionId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reactionsDeleteForCommitComment(owner: String, repo: String, commentId: Int, reactionId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reactionsDeleteForCommitCommentWithRequestBuilder(owner: owner, repo: repo, commentId: commentId, reactionId: reactionId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a commit comment reaction
     - DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}
     - **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.  Delete a reaction to a [commit comment](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#comments).
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/reactions/#delete-a-commit-comment-reaction
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - parameter reactionId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func reactionsDeleteForCommitCommentWithRequestBuilder(owner: String, repo: String, commentId: Int, reactionId: Int) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(APIHelper.mapValueToPathItem(commentId))"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_id}", with: commentIdPostEscape, options: .literal, range: nil)
        let reactionIdPreEscape = "\(APIHelper.mapValueToPathItem(reactionId))"
        let reactionIdPostEscape = reactionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{reaction_id}", with: reactionIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete an issue reaction
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter reactionId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reactionsDeleteForIssue(owner: String, repo: String, issueNumber: Int, reactionId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reactionsDeleteForIssueWithRequestBuilder(owner: owner, repo: repo, issueNumber: issueNumber, reactionId: reactionId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete an issue reaction
     - DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}
     - **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.  Delete a reaction to an [issue](https://docs.github.com/enterprise-server@3.0/rest/reference/issues/).
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/reactions/#delete-an-issue-reaction
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter reactionId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func reactionsDeleteForIssueWithRequestBuilder(owner: String, repo: String, issueNumber: Int, reactionId: Int) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let issueNumberPreEscape = "\(APIHelper.mapValueToPathItem(issueNumber))"
        let issueNumberPostEscape = issueNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{issue_number}", with: issueNumberPostEscape, options: .literal, range: nil)
        let reactionIdPreEscape = "\(APIHelper.mapValueToPathItem(reactionId))"
        let reactionIdPostEscape = reactionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{reaction_id}", with: reactionIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete an issue comment reaction
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - parameter reactionId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reactionsDeleteForIssueComment(owner: String, repo: String, commentId: Int, reactionId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reactionsDeleteForIssueCommentWithRequestBuilder(owner: owner, repo: repo, commentId: commentId, reactionId: reactionId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete an issue comment reaction
     - DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}
     - **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.  Delete a reaction to an [issue comment](https://docs.github.com/enterprise-server@3.0/rest/reference/issues#comments).
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/reactions/#delete-an-issue-comment-reaction
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - parameter reactionId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func reactionsDeleteForIssueCommentWithRequestBuilder(owner: String, repo: String, commentId: Int, reactionId: Int) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(APIHelper.mapValueToPathItem(commentId))"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_id}", with: commentIdPostEscape, options: .literal, range: nil)
        let reactionIdPreEscape = "\(APIHelper.mapValueToPathItem(reactionId))"
        let reactionIdPostEscape = reactionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{reaction_id}", with: reactionIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a pull request comment reaction
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - parameter reactionId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reactionsDeleteForPullRequestComment(owner: String, repo: String, commentId: Int, reactionId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reactionsDeleteForPullRequestCommentWithRequestBuilder(owner: owner, repo: repo, commentId: commentId, reactionId: reactionId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a pull request comment reaction
     - DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}
     - **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`  Delete a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#review-comments).
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/reactions/#delete-a-pull-request-comment-reaction
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - parameter reactionId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func reactionsDeleteForPullRequestCommentWithRequestBuilder(owner: String, repo: String, commentId: Int, reactionId: Int) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(APIHelper.mapValueToPathItem(commentId))"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_id}", with: commentIdPostEscape, options: .literal, range: nil)
        let reactionIdPreEscape = "\(APIHelper.mapValueToPathItem(reactionId))"
        let reactionIdPostEscape = reactionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{reaction_id}", with: reactionIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete team discussion reaction
     
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter discussionNumber: (path)  
     - parameter reactionId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reactionsDeleteForTeamDiscussion(org: String, teamSlug: String, discussionNumber: Int, reactionId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reactionsDeleteForTeamDiscussionWithRequestBuilder(org: org, teamSlug: teamSlug, discussionNumber: discussionNumber, reactionId: reactionId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete team discussion reaction
     - DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}
     - **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.  Delete a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/reactions/#delete-team-discussion-reaction
}
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter discussionNumber: (path)  
     - parameter reactionId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func reactionsDeleteForTeamDiscussionWithRequestBuilder(org: String, teamSlug: String, discussionNumber: Int, reactionId: Int) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let teamSlugPreEscape = "\(APIHelper.mapValueToPathItem(teamSlug))"
        let teamSlugPostEscape = teamSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_slug}", with: teamSlugPostEscape, options: .literal, range: nil)
        let discussionNumberPreEscape = "\(APIHelper.mapValueToPathItem(discussionNumber))"
        let discussionNumberPostEscape = discussionNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{discussion_number}", with: discussionNumberPostEscape, options: .literal, range: nil)
        let reactionIdPreEscape = "\(APIHelper.mapValueToPathItem(reactionId))"
        let reactionIdPostEscape = reactionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{reaction_id}", with: reactionIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete team discussion comment reaction
     
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter discussionNumber: (path)  
     - parameter commentNumber: (path)  
     - parameter reactionId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reactionsDeleteForTeamDiscussionComment(org: String, teamSlug: String, discussionNumber: Int, commentNumber: Int, reactionId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reactionsDeleteForTeamDiscussionCommentWithRequestBuilder(org: org, teamSlug: teamSlug, discussionNumber: discussionNumber, commentNumber: commentNumber, reactionId: reactionId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete team discussion comment reaction
     - DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}
     - **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.  Delete a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/reactions/#delete-team-discussion-comment-reaction
}
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter discussionNumber: (path)  
     - parameter commentNumber: (path)  
     - parameter reactionId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func reactionsDeleteForTeamDiscussionCommentWithRequestBuilder(org: String, teamSlug: String, discussionNumber: Int, commentNumber: Int, reactionId: Int) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let teamSlugPreEscape = "\(APIHelper.mapValueToPathItem(teamSlug))"
        let teamSlugPostEscape = teamSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_slug}", with: teamSlugPostEscape, options: .literal, range: nil)
        let discussionNumberPreEscape = "\(APIHelper.mapValueToPathItem(discussionNumber))"
        let discussionNumberPostEscape = discussionNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{discussion_number}", with: discussionNumberPostEscape, options: .literal, range: nil)
        let commentNumberPreEscape = "\(APIHelper.mapValueToPathItem(commentNumber))"
        let commentNumberPostEscape = commentNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_number}", with: commentNumberPostEscape, options: .literal, range: nil)
        let reactionIdPreEscape = "\(APIHelper.mapValueToPathItem(reactionId))"
        let reactionIdPostEscape = reactionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{reaction_id}", with: reactionIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a reaction (Legacy)
     
     - parameter reactionId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func reactionsDeleteLegacy(reactionId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reactionsDeleteLegacyWithRequestBuilder(reactionId: reactionId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a reaction (Legacy)
     - DELETE /reactions/{reaction_id}
     - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Reactions API. We recommend migrating your existing code to use the new delete reactions endpoints. For more information, see this [blog post](https://developer.github.com/changes/2020-02-26-new-delete-reactions-endpoints/).  OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussions) or [team discussion comment](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussion-comments).
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/reactions/#delete-a-reaction-legacy
}
     - parameter reactionId: (path)  
     - returns: RequestBuilder<Void> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func reactionsDeleteLegacyWithRequestBuilder(reactionId: Int) -> RequestBuilder<Void> {
        var path = "/reactions/{reaction_id}"
        let reactionIdPreEscape = "\(APIHelper.mapValueToPathItem(reactionId))"
        let reactionIdPostEscape = reactionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{reaction_id}", with: reactionIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter content
     */
    public enum Content_reactionsListForCommitComment: String, CaseIterable {
        case plusOne = "+1"
        case minusOne = "-1"
        case laugh = "laugh"
        case confused = "confused"
        case heart = "heart"
        case hooray = "hooray"
        case rocket = "rocket"
        case eyes = "eyes"
    }

    /**
     List reactions for a commit comment
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - parameter content: (query) Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reactionsListForCommitComment(owner: String, repo: String, commentId: Int, content: Content_reactionsListForCommitComment? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Reaction]?,_ error: Error?) -> Void)) {
        reactionsListForCommitCommentWithRequestBuilder(owner: owner, repo: repo, commentId: commentId, content: content, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List reactions for a commit comment
     - GET /repos/{owner}/{repo}/comments/{comment_id}/reactions
     - List the reactions to a [commit comment](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#comments).
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/reactions/#list-reactions-for-a-commit-comment
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - parameter content: (query) Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[Reaction]> 
     */
    open class func reactionsListForCommitCommentWithRequestBuilder(owner: String, repo: String, commentId: Int, content: Content_reactionsListForCommitComment? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[Reaction]> {
        var path = "/repos/{owner}/{repo}/comments/{comment_id}/reactions"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(APIHelper.mapValueToPathItem(commentId))"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_id}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "content": content?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Reaction]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter content
     */
    public enum Content_reactionsListForIssue: String, CaseIterable {
        case plusOne = "+1"
        case minusOne = "-1"
        case laugh = "laugh"
        case confused = "confused"
        case heart = "heart"
        case hooray = "hooray"
        case rocket = "rocket"
        case eyes = "eyes"
    }

    /**
     List reactions for an issue
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter content: (query) Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reactionsListForIssue(owner: String, repo: String, issueNumber: Int, content: Content_reactionsListForIssue? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Reaction]?,_ error: Error?) -> Void)) {
        reactionsListForIssueWithRequestBuilder(owner: owner, repo: repo, issueNumber: issueNumber, content: content, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List reactions for an issue
     - GET /repos/{owner}/{repo}/issues/{issue_number}/reactions
     - List the reactions to an [issue](https://docs.github.com/enterprise-server@3.0/rest/reference/issues).
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/reactions/#list-reactions-for-an-issue
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter content: (query) Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[Reaction]> 
     */
    open class func reactionsListForIssueWithRequestBuilder(owner: String, repo: String, issueNumber: Int, content: Content_reactionsListForIssue? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[Reaction]> {
        var path = "/repos/{owner}/{repo}/issues/{issue_number}/reactions"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let issueNumberPreEscape = "\(APIHelper.mapValueToPathItem(issueNumber))"
        let issueNumberPostEscape = issueNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{issue_number}", with: issueNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "content": content?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Reaction]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter content
     */
    public enum Content_reactionsListForIssueComment: String, CaseIterable {
        case plusOne = "+1"
        case minusOne = "-1"
        case laugh = "laugh"
        case confused = "confused"
        case heart = "heart"
        case hooray = "hooray"
        case rocket = "rocket"
        case eyes = "eyes"
    }

    /**
     List reactions for an issue comment
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - parameter content: (query) Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reactionsListForIssueComment(owner: String, repo: String, commentId: Int, content: Content_reactionsListForIssueComment? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Reaction]?,_ error: Error?) -> Void)) {
        reactionsListForIssueCommentWithRequestBuilder(owner: owner, repo: repo, commentId: commentId, content: content, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List reactions for an issue comment
     - GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions
     - List the reactions to an [issue comment](https://docs.github.com/enterprise-server@3.0/rest/reference/issues#comments).
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/reactions/#list-reactions-for-an-issue-comment
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - parameter content: (query) Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[Reaction]> 
     */
    open class func reactionsListForIssueCommentWithRequestBuilder(owner: String, repo: String, commentId: Int, content: Content_reactionsListForIssueComment? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[Reaction]> {
        var path = "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(APIHelper.mapValueToPathItem(commentId))"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_id}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "content": content?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Reaction]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter content
     */
    public enum Content_reactionsListForPullRequestReviewComment: String, CaseIterable {
        case plusOne = "+1"
        case minusOne = "-1"
        case laugh = "laugh"
        case confused = "confused"
        case heart = "heart"
        case hooray = "hooray"
        case rocket = "rocket"
        case eyes = "eyes"
    }

    /**
     List reactions for a pull request review comment
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - parameter content: (query) Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reactionsListForPullRequestReviewComment(owner: String, repo: String, commentId: Int, content: Content_reactionsListForPullRequestReviewComment? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Reaction]?,_ error: Error?) -> Void)) {
        reactionsListForPullRequestReviewCommentWithRequestBuilder(owner: owner, repo: repo, commentId: commentId, content: content, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List reactions for a pull request review comment
     - GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions
     - List the reactions to a [pull request review comment](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#review-comments).
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/reactions/#list-reactions-for-a-pull-request-review-comment
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - parameter content: (query) Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[Reaction]> 
     */
    open class func reactionsListForPullRequestReviewCommentWithRequestBuilder(owner: String, repo: String, commentId: Int, content: Content_reactionsListForPullRequestReviewComment? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[Reaction]> {
        var path = "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(APIHelper.mapValueToPathItem(commentId))"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_id}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "content": content?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Reaction]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter content
     */
    public enum Content_reactionsListForTeamDiscussionCommentInOrg: String, CaseIterable {
        case plusOne = "+1"
        case minusOne = "-1"
        case laugh = "laugh"
        case confused = "confused"
        case heart = "heart"
        case hooray = "hooray"
        case rocket = "rocket"
        case eyes = "eyes"
    }

    /**
     List reactions for a team discussion comment
     
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter discussionNumber: (path)  
     - parameter commentNumber: (path)  
     - parameter content: (query) Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reactionsListForTeamDiscussionCommentInOrg(org: String, teamSlug: String, discussionNumber: Int, commentNumber: Int, content: Content_reactionsListForTeamDiscussionCommentInOrg? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Reaction]?,_ error: Error?) -> Void)) {
        reactionsListForTeamDiscussionCommentInOrgWithRequestBuilder(org: org, teamSlug: teamSlug, discussionNumber: discussionNumber, commentNumber: commentNumber, content: content, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List reactions for a team discussion comment
     - GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions
     - List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/reactions/#list-reactions-for-a-team-discussion-comment
}
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter discussionNumber: (path)  
     - parameter commentNumber: (path)  
     - parameter content: (query) Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[Reaction]> 
     */
    open class func reactionsListForTeamDiscussionCommentInOrgWithRequestBuilder(org: String, teamSlug: String, discussionNumber: Int, commentNumber: Int, content: Content_reactionsListForTeamDiscussionCommentInOrg? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[Reaction]> {
        var path = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let teamSlugPreEscape = "\(APIHelper.mapValueToPathItem(teamSlug))"
        let teamSlugPostEscape = teamSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_slug}", with: teamSlugPostEscape, options: .literal, range: nil)
        let discussionNumberPreEscape = "\(APIHelper.mapValueToPathItem(discussionNumber))"
        let discussionNumberPostEscape = discussionNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{discussion_number}", with: discussionNumberPostEscape, options: .literal, range: nil)
        let commentNumberPreEscape = "\(APIHelper.mapValueToPathItem(commentNumber))"
        let commentNumberPostEscape = commentNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_number}", with: commentNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "content": content?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Reaction]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter content
     */
    public enum Content_reactionsListForTeamDiscussionCommentLegacy: String, CaseIterable {
        case plusOne = "+1"
        case minusOne = "-1"
        case laugh = "laugh"
        case confused = "confused"
        case heart = "heart"
        case hooray = "hooray"
        case rocket = "rocket"
        case eyes = "eyes"
    }

    /**
     List reactions for a team discussion comment (Legacy)
     
     - parameter teamId: (path)  
     - parameter discussionNumber: (path)  
     - parameter commentNumber: (path)  
     - parameter content: (query) Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func reactionsListForTeamDiscussionCommentLegacy(teamId: Int, discussionNumber: Int, commentNumber: Int, content: Content_reactionsListForTeamDiscussionCommentLegacy? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Reaction]?,_ error: Error?) -> Void)) {
        reactionsListForTeamDiscussionCommentLegacyWithRequestBuilder(teamId: teamId, discussionNumber: discussionNumber, commentNumber: commentNumber, content: content, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List reactions for a team discussion comment (Legacy)
     - GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions
     - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.  List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/reactions/#list-reactions-for-a-team-discussion-comment-legacy
}
     - parameter teamId: (path)  
     - parameter discussionNumber: (path)  
     - parameter commentNumber: (path)  
     - parameter content: (query) Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[Reaction]> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func reactionsListForTeamDiscussionCommentLegacyWithRequestBuilder(teamId: Int, discussionNumber: Int, commentNumber: Int, content: Content_reactionsListForTeamDiscussionCommentLegacy? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[Reaction]> {
        var path = "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let discussionNumberPreEscape = "\(APIHelper.mapValueToPathItem(discussionNumber))"
        let discussionNumberPostEscape = discussionNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{discussion_number}", with: discussionNumberPostEscape, options: .literal, range: nil)
        let commentNumberPreEscape = "\(APIHelper.mapValueToPathItem(commentNumber))"
        let commentNumberPostEscape = commentNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_number}", with: commentNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "content": content?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Reaction]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter content
     */
    public enum Content_reactionsListForTeamDiscussionInOrg: String, CaseIterable {
        case plusOne = "+1"
        case minusOne = "-1"
        case laugh = "laugh"
        case confused = "confused"
        case heart = "heart"
        case hooray = "hooray"
        case rocket = "rocket"
        case eyes = "eyes"
    }

    /**
     List reactions for a team discussion
     
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter discussionNumber: (path)  
     - parameter content: (query) Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reactionsListForTeamDiscussionInOrg(org: String, teamSlug: String, discussionNumber: Int, content: Content_reactionsListForTeamDiscussionInOrg? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Reaction]?,_ error: Error?) -> Void)) {
        reactionsListForTeamDiscussionInOrgWithRequestBuilder(org: org, teamSlug: teamSlug, discussionNumber: discussionNumber, content: content, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List reactions for a team discussion
     - GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions
     - List the reactions to a [team discussion](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/reactions/#list-reactions-for-a-team-discussion
}
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter discussionNumber: (path)  
     - parameter content: (query) Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[Reaction]> 
     */
    open class func reactionsListForTeamDiscussionInOrgWithRequestBuilder(org: String, teamSlug: String, discussionNumber: Int, content: Content_reactionsListForTeamDiscussionInOrg? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[Reaction]> {
        var path = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let teamSlugPreEscape = "\(APIHelper.mapValueToPathItem(teamSlug))"
        let teamSlugPostEscape = teamSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_slug}", with: teamSlugPostEscape, options: .literal, range: nil)
        let discussionNumberPreEscape = "\(APIHelper.mapValueToPathItem(discussionNumber))"
        let discussionNumberPostEscape = discussionNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{discussion_number}", with: discussionNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "content": content?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Reaction]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter content
     */
    public enum Content_reactionsListForTeamDiscussionLegacy: String, CaseIterable {
        case plusOne = "+1"
        case minusOne = "-1"
        case laugh = "laugh"
        case confused = "confused"
        case heart = "heart"
        case hooray = "hooray"
        case rocket = "rocket"
        case eyes = "eyes"
    }

    /**
     List reactions for a team discussion (Legacy)
     
     - parameter teamId: (path)  
     - parameter discussionNumber: (path)  
     - parameter content: (query) Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func reactionsListForTeamDiscussionLegacy(teamId: Int, discussionNumber: Int, content: Content_reactionsListForTeamDiscussionLegacy? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Reaction]?,_ error: Error?) -> Void)) {
        reactionsListForTeamDiscussionLegacyWithRequestBuilder(teamId: teamId, discussionNumber: discussionNumber, content: content, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List reactions for a team discussion (Legacy)
     - GET /teams/{team_id}/discussions/{discussion_number}/reactions
     - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.  List the reactions to a [team discussion](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/reactions/#list-reactions-for-a-team-discussion-legacy
}
     - parameter teamId: (path)  
     - parameter discussionNumber: (path)  
     - parameter content: (query) Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[Reaction]> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func reactionsListForTeamDiscussionLegacyWithRequestBuilder(teamId: Int, discussionNumber: Int, content: Content_reactionsListForTeamDiscussionLegacy? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[Reaction]> {
        var path = "/teams/{team_id}/discussions/{discussion_number}/reactions"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let discussionNumberPreEscape = "\(APIHelper.mapValueToPathItem(discussionNumber))"
        let discussionNumberPostEscape = discussionNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{discussion_number}", with: discussionNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "content": content?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Reaction]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
