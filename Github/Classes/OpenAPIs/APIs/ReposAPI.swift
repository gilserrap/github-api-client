//
// ReposAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class ReposAPI {
    /**
     Accept a repository invitation
     
     - parameter invitationId: (path) invitation_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposAcceptInvitation(invitationId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposAcceptInvitationWithRequestBuilder(invitationId: invitationId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Accept a repository invitation
     - PATCH /user/repository_invitations/{invitation_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#accept-a-repository-invitation
}
     - parameter invitationId: (path) invitation_id parameter 
     - returns: RequestBuilder<Void> 
     */
    open class func reposAcceptInvitationWithRequestBuilder(invitationId: Int) -> RequestBuilder<Void> {
        var path = "/user/repository_invitations/{invitation_id}"
        let invitationIdPreEscape = "\(APIHelper.mapValueToPathItem(invitationId))"
        let invitationIdPostEscape = invitationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{invitation_id}", with: invitationIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Add app access restrictions
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter inlineObject82: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposAddAppAccessRestrictions(owner: String, repo: String, branch: String, inlineObject82: InlineObject82? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Integration]?,_ error: Error?) -> Void)) {
        reposAddAppAccessRestrictionsWithRequestBuilder(owner: owner, repo: repo, branch: branch, inlineObject82: inlineObject82).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add app access restrictions
     - POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Grants the specified apps push access for this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.  | Type    | Description                                                                                                                                                | | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#add-app-access-restrictions
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter inlineObject82: (body)  (optional)
     - returns: RequestBuilder<[Integration]> 
     */
    open class func reposAddAppAccessRestrictionsWithRequestBuilder(owner: String, repo: String, branch: String, inlineObject82: InlineObject82? = nil) -> RequestBuilder<[Integration]> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject82)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Integration]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Add a repository collaborator
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter username: (path)  
     - parameter inlineObject94: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposAddCollaborator(owner: String, repo: String, username: String, inlineObject94: InlineObject94? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: RepositoryInvitation?,_ error: Error?) -> Void)) {
        reposAddCollaboratorWithRequestBuilder(owner: owner, repo: repo, username: username, inlineObject94: inlineObject94).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add a repository collaborator
     - PUT /repos/{owner}/{repo}/collaborators/{username}
     - This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.  For more information the permission levels, see \"[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\".  Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs).\"  The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#invitations).  **Rate limits**  To prevent abuse, you are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#add-a-repository-collaborator
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter username: (path)  
     - parameter inlineObject94: (body)  (optional)
     - returns: RequestBuilder<RepositoryInvitation> 
     */
    open class func reposAddCollaboratorWithRequestBuilder(owner: String, repo: String, username: String, inlineObject94: InlineObject94? = nil) -> RequestBuilder<RepositoryInvitation> {
        var path = "/repos/{owner}/{repo}/collaborators/{username}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject94)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RepositoryInvitation>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Add status check contexts
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter inlineObject79: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposAddStatusCheckContexts(owner: String, repo: String, branch: String, inlineObject79: InlineObject79? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        reposAddStatusCheckContextsWithRequestBuilder(owner: owner, repo: repo, branch: branch, inlineObject79: inlineObject79).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add status check contexts
     - POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#add-status-check-contexts
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter inlineObject79: (body)  (optional)
     - returns: RequestBuilder<[String]> 
     */
    open class func reposAddStatusCheckContextsWithRequestBuilder(owner: String, repo: String, branch: String, inlineObject79: InlineObject79? = nil) -> RequestBuilder<[String]> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject79)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Add team access restrictions
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter inlineObject85: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposAddTeamAccessRestrictions(owner: String, repo: String, branch: String, inlineObject85: InlineObject85? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Team]?,_ error: Error?) -> Void)) {
        reposAddTeamAccessRestrictionsWithRequestBuilder(owner: owner, repo: repo, branch: branch, inlineObject85: inlineObject85).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add team access restrictions
     - POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Grants the specified teams push access for this branch. You can also give push access to child teams.  | Type    | Description                                                                                                                                | | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ | | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#add-team-access-restrictions
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter inlineObject85: (body)  (optional)
     - returns: RequestBuilder<[Team]> 
     */
    open class func reposAddTeamAccessRestrictionsWithRequestBuilder(owner: String, repo: String, branch: String, inlineObject85: InlineObject85? = nil) -> RequestBuilder<[Team]> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject85)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Team]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Add user access restrictions
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter inlineObject88: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposAddUserAccessRestrictions(owner: String, repo: String, branch: String, inlineObject88: InlineObject88? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [SimpleUser]?,_ error: Error?) -> Void)) {
        reposAddUserAccessRestrictionsWithRequestBuilder(owner: owner, repo: repo, branch: branch, inlineObject88: inlineObject88).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add user access restrictions
     - POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Grants the specified people push access for this branch.  | Type    | Description                                                                                                                   | | ------- | ----------------------------------------------------------------------------------------------------------------------------- | | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#add-user-access-restrictions
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter inlineObject88: (body)  (optional)
     - returns: RequestBuilder<[SimpleUser]> 
     */
    open class func reposAddUserAccessRestrictionsWithRequestBuilder(owner: String, repo: String, branch: String, inlineObject88: InlineObject88? = nil) -> RequestBuilder<[SimpleUser]> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject88)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[SimpleUser]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Check if a user is a repository collaborator
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter username: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposCheckCollaborator(owner: String, repo: String, username: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposCheckCollaboratorWithRequestBuilder(owner: owner, repo: repo, username: username).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Check if a user is a repository collaborator
     - GET /repos/{owner}/{repo}/collaborators/{username}
     - For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.  Team members will include the members of child teams.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#check-if-a-user-is-a-repository-collaborator
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter username: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func reposCheckCollaboratorWithRequestBuilder(owner: String, repo: String, username: String) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/collaborators/{username}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Compare two commits
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter base: (path)  
     - parameter head: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposCompareCommits(owner: String, repo: String, base: String, head: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: CommitComparison?,_ error: Error?) -> Void)) {
        reposCompareCommitsWithRequestBuilder(owner: owner, repo: repo, base: base, head: head).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Compare two commits
     - GET /repos/{owner}/{repo}/compare/{base}...{head}
     - Both `:base` and `:head` must be branch names in `:repo`. To compare branches across other repositories in the same network as `:repo`, use the format `<USERNAME>:branch`.  The response from the API is equivalent to running the `git log base..head` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.  The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.  **Working with large comparisons**  The response will include a comparison of up to 250 commits. If you are working with a larger commit range, you can use the [List commits](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-commits) to enumerate all commits in the range.  For comparisons with extremely large diffs, you may receive an error response indicating that the diff took too long to generate. You can typically resolve this error by using a smaller commit range.  **Signature verification object**  The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:  | Name | Type | Description | | ---- | ---- | ----------- | | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. | | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. | | `signature` | `string` | The signature that was extracted from the commit. | | `payload` | `string` | The value that was signed. |  These are the possible values for `reason` in the `verification` object:  | Value | Description | | ----- | ----------- | | `expired_key` | The key that made the signature is expired. | | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. | | `gpgverify_error` | There was an error communicating with the signature verification service. | | `gpgverify_unavailable` | The signature verification service is currently unavailable. | | `unsigned` | The object does not include a signature. | | `unknown_signature_type` | A non-PGP signature was found in the commit. | | `no_user` | No user was associated with the `committer` email address in the commit. | | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. | | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. | | `unknown_key` | The key that made the signature has not been registered with any user's account. | | `malformed_signature` | There was an error parsing the signature. | | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | `valid` | None of the above errors applied, so the signature is considered to be verified. |
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#compare-two-commits
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter base: (path)  
     - parameter head: (path)  
     - returns: RequestBuilder<CommitComparison> 
     */
    open class func reposCompareCommitsWithRequestBuilder(owner: String, repo: String, base: String, head: String) -> RequestBuilder<CommitComparison> {
        var path = "/repos/{owner}/{repo}/compare/{base}...{head}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let basePreEscape = "\(APIHelper.mapValueToPathItem(base))"
        let basePostEscape = basePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{base}", with: basePostEscape, options: .literal, range: nil)
        let headPreEscape = "\(APIHelper.mapValueToPathItem(head))"
        let headPostEscape = headPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{head}", with: headPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CommitComparison>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a commit comment
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commitSha: (path) commit_sha parameter 
     - parameter inlineObject97: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposCreateCommitComment(owner: String, repo: String, commitSha: String, inlineObject97: InlineObject97? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: CommitComment?,_ error: Error?) -> Void)) {
        reposCreateCommitCommentWithRequestBuilder(owner: owner, repo: repo, commitSha: commitSha, inlineObject97: inlineObject97).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a commit comment
     - POST /repos/{owner}/{repo}/commits/{commit_sha}/comments
     - Create a comment for a commit using its `:commit_sha`.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.
     - responseHeaders: [Location(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#create-a-commit-comment
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commitSha: (path) commit_sha parameter 
     - parameter inlineObject97: (body)  (optional)
     - returns: RequestBuilder<CommitComment> 
     */
    open class func reposCreateCommitCommentWithRequestBuilder(owner: String, repo: String, commitSha: String, inlineObject97: InlineObject97? = nil) -> RequestBuilder<CommitComment> {
        var path = "/repos/{owner}/{repo}/commits/{commit_sha}/comments"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let commitShaPreEscape = "\(APIHelper.mapValueToPathItem(commitSha))"
        let commitShaPostEscape = commitShaPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{commit_sha}", with: commitShaPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject97)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CommitComment>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create commit signature protection
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposCreateCommitSignatureProtection(owner: String, repo: String, branch: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: ProtectedBranchAdminEnforced?,_ error: Error?) -> Void)) {
        reposCreateCommitSignatureProtectionWithRequestBuilder(owner: owner, repo: repo, branch: branch).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create commit signature protection
     - POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#create-commit-signature-protection
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - returns: RequestBuilder<ProtectedBranchAdminEnforced> 
     */
    open class func reposCreateCommitSignatureProtectionWithRequestBuilder(owner: String, repo: String, branch: String) -> RequestBuilder<ProtectedBranchAdminEnforced> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ProtectedBranchAdminEnforced>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a commit status
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter sha: (path)  
     - parameter inlineObject153: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposCreateCommitStatus(owner: String, repo: String, sha: String, inlineObject153: InlineObject153? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Status?,_ error: Error?) -> Void)) {
        reposCreateCommitStatusWithRequestBuilder(owner: owner, repo: repo, sha: sha, inlineObject153: inlineObject153).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a commit status
     - POST /repos/{owner}/{repo}/statuses/{sha}
     - Users with push access in a repository can create commit statuses for a given SHA.  Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
     - responseHeaders: [Location(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#create-a-commit-status
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter sha: (path)  
     - parameter inlineObject153: (body)  (optional)
     - returns: RequestBuilder<Status> 
     */
    open class func reposCreateCommitStatusWithRequestBuilder(owner: String, repo: String, sha: String, inlineObject153: InlineObject153? = nil) -> RequestBuilder<Status> {
        var path = "/repos/{owner}/{repo}/statuses/{sha}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let shaPreEscape = "\(APIHelper.mapValueToPathItem(sha))"
        let shaPostEscape = shaPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sha}", with: shaPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject153)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Status>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a deploy key
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject125: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposCreateDeployKey(owner: String, repo: String, inlineObject125: InlineObject125? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: DeployKey?,_ error: Error?) -> Void)) {
        reposCreateDeployKeyWithRequestBuilder(owner: owner, repo: repo, inlineObject125: inlineObject125).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a deploy key
     - POST /repos/{owner}/{repo}/keys
     - You can create a read-only deploy key.
     - responseHeaders: [Location(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#create-a-deploy-key
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject125: (body)  (optional)
     - returns: RequestBuilder<DeployKey> 
     */
    open class func reposCreateDeployKeyWithRequestBuilder(owner: String, repo: String, inlineObject125: InlineObject125? = nil) -> RequestBuilder<DeployKey> {
        var path = "/repos/{owner}/{repo}/keys"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject125)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DeployKey>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a deployment
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject100: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposCreateDeployment(owner: String, repo: String, inlineObject100: InlineObject100? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Deployment?,_ error: Error?) -> Void)) {
        reposCreateDeploymentWithRequestBuilder(owner: owner, repo: repo, inlineObject100: inlineObject100).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a deployment
     - POST /repos/{owner}/{repo}/deployments
     - Deployments offer a few configurable parameters with certain defaults.  The `ref` parameter can be any named branch, tag, or SHA. At GitHub Enterprise Server we often deploy branches and verify them before we merge a pull request.  The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter makes it easier to track which environments have requested deployments. The default environment is `production`.  The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds, the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will return a failure response.  By default, [commit statuses](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#statuses) for every submitted context must be in a `success` state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do not require any contexts or create any commit statuses, the deployment will always succeed.  The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text field that will be passed on when a deployment event is dispatched.  The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an application with debugging enabled.  Users with `repo` or `repo_deployment` scopes can create a deployment for a given ref.  #### Merged branch response You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating a deployment. This auto-merge happens when: *   Auto-merge option is enabled in the repository *   Topic branch does not include the latest changes on the base branch, which is `master` in the response example *   There are no merge conflicts  If there are no new commits in the base branch, a new request to create a deployment should give a successful response.  #### Merge conflict response This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.  #### Failed commit status checks This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success` status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#create-a-deployment
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject100: (body)  (optional)
     - returns: RequestBuilder<Deployment> 
     */
    open class func reposCreateDeploymentWithRequestBuilder(owner: String, repo: String, inlineObject100: InlineObject100? = nil) -> RequestBuilder<Deployment> {
        var path = "/repos/{owner}/{repo}/deployments"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject100)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Deployment>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a deployment status
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter deploymentId: (path) deployment_id parameter 
     - parameter inlineObject101: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposCreateDeploymentStatus(owner: String, repo: String, deploymentId: Int, inlineObject101: InlineObject101? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: DeploymentStatus?,_ error: Error?) -> Void)) {
        reposCreateDeploymentStatusWithRequestBuilder(owner: owner, repo: repo, deploymentId: deploymentId, inlineObject101: inlineObject101).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a deployment status
     - POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses
     - Users with `push` access can create deployment statuses for a given deployment.  GitHub Apps require `read & write` access to \"Deployments\" and `read-only` access to \"Repo contents\" (for private repos). OAuth Apps require the `repo_deployment` scope.
     - responseHeaders: [Location(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#create-a-deployment-status
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter deploymentId: (path) deployment_id parameter 
     - parameter inlineObject101: (body)  (optional)
     - returns: RequestBuilder<DeploymentStatus> 
     */
    open class func reposCreateDeploymentStatusWithRequestBuilder(owner: String, repo: String, deploymentId: Int, inlineObject101: InlineObject101? = nil) -> RequestBuilder<DeploymentStatus> {
        var path = "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let deploymentIdPreEscape = "\(APIHelper.mapValueToPathItem(deploymentId))"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deployment_id}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject101)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DeploymentStatus>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a repository dispatch event
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject102: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposCreateDispatchEvent(owner: String, repo: String, inlineObject102: InlineObject102? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposCreateDispatchEventWithRequestBuilder(owner: owner, repo: repo, inlineObject102: inlineObject102).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a repository dispatch event
     - POST /repos/{owner}/{repo}/dispatches
     - You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub Enterprise Server to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see \"[RepositoryDispatchEvent](https://docs.github.com/enterprise-server@3.0/webhooks/event-payloads/#repository_dispatch).\"  The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.  This endpoint requires write access to the repository by providing either:    - Personal access tokens with `repo` scope. For more information, see \"[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)\" in the GitHub Help documentation.   - GitHub Apps with both `metadata:read` and `contents:read&write` permissions.  This input example shows how you can use the `client_payload` as a test to debug your workflow.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/repos/#create-a-repository-dispatch-event
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject102: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func reposCreateDispatchEventWithRequestBuilder(owner: String, repo: String, inlineObject102: InlineObject102? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/dispatches"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject102)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a repository for the authenticated user
     
     - parameter inlineObject179: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposCreateForAuthenticatedUser(inlineObject179: InlineObject179? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Repository?,_ error: Error?) -> Void)) {
        reposCreateForAuthenticatedUserWithRequestBuilder(inlineObject179: inlineObject179).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a repository for the authenticated user
     - POST /user/repos
     - Creates a new repository for the authenticated user.  **OAuth scope requirements**  When using [OAuth](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:  *   `public_repo` scope or `repo` scope to create a public repository *   `repo` scope to create a private repository
     - responseHeaders: [Location(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/repos/#create-a-repository-for-the-authenticated-user
}
     - parameter inlineObject179: (body)  (optional)
     - returns: RequestBuilder<Repository> 
     */
    open class func reposCreateForAuthenticatedUserWithRequestBuilder(inlineObject179: InlineObject179? = nil) -> RequestBuilder<Repository> {
        let path = "/user/repos"
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject179)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Repository>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a fork
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject103: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposCreateFork(owner: String, repo: String, inlineObject103: InlineObject103? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Repository?,_ error: Error?) -> Void)) {
        reposCreateForkWithRequestBuilder(owner: owner, repo: repo, inlineObject103: inlineObject103).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a fork
     - POST /repos/{owner}/{repo}/forks
     - Create a fork for the authenticated user.  **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Enterprise Server Support](https://support.github.com/contact) or [GitHub Enterprise Server Premium Support](https://premium.githubsupport.com).
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#create-a-fork
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject103: (body)  (optional)
     - returns: RequestBuilder<Repository> 
     */
    open class func reposCreateForkWithRequestBuilder(owner: String, repo: String, inlineObject103: InlineObject103? = nil) -> RequestBuilder<Repository> {
        var path = "/repos/{owner}/{repo}/forks"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject103)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Repository>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create an organization repository
     
     - parameter org: (path)  
     - parameter inlineObject52: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposCreateInOrg(org: String, inlineObject52: InlineObject52? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Repository?,_ error: Error?) -> Void)) {
        reposCreateInOrgWithRequestBuilder(org: org, inlineObject52: inlineObject52).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create an organization repository
     - POST /orgs/{org}/repos
     - Creates a new repository in the specified organization. The authenticated user must be a member of the organization.  **OAuth scope requirements**  When using [OAuth](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:  *   `public_repo` scope or `repo` scope to create a public repository *   `repo` scope to create a private repository
     - responseHeaders: [Location(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/repos/#create-an-organization-repository
}
     - parameter org: (path)  
     - parameter inlineObject52: (body)  (optional)
     - returns: RequestBuilder<Repository> 
     */
    open class func reposCreateInOrgWithRequestBuilder(org: String, inlineObject52: InlineObject52? = nil) -> RequestBuilder<Repository> {
        var path = "/orgs/{org}/repos"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject52)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Repository>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create or update file contents
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter path: (path) path+ parameter 
     - parameter inlineObject98: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposCreateOrUpdateFileContents(owner: String, repo: String, path: String, inlineObject98: InlineObject98? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: FileCommit?,_ error: Error?) -> Void)) {
        reposCreateOrUpdateFileContentsWithRequestBuilder(owner: owner, repo: repo, path: path, inlineObject98: inlineObject98).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create or update file contents
     - PUT /repos/{owner}/{repo}/contents/{path}
     - Creates a new file or replaces an existing file in a repository.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#create-or-update-file-contents
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter path: (path) path+ parameter 
     - parameter inlineObject98: (body)  (optional)
     - returns: RequestBuilder<FileCommit> 
     */
    open class func reposCreateOrUpdateFileContentsWithRequestBuilder(owner: String, repo: String, path: String, inlineObject98: InlineObject98? = nil) -> RequestBuilder<FileCommit> {
        var path = "/repos/{owner}/{repo}/contents/{path}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
        let pathPostEscape = pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{path}", with: pathPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject98)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FileCommit>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a GitHub Enterprise Server Pages site
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject133: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposCreatePagesSite(owner: String, repo: String, inlineObject133: InlineObject133? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Page?,_ error: Error?) -> Void)) {
        reposCreatePagesSiteWithRequestBuilder(owner: owner, repo: repo, inlineObject133: inlineObject133).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a GitHub Enterprise Server Pages site
     - POST /repos/{owner}/{repo}/pages
     - Configures a GitHub Enterprise Server Pages site. For more information, see \"[About GitHub Pages](/github/working-with-github-pages/about-github-pages).\"
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#create-a-github-pages-site
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject133: (body)  (optional)
     - returns: RequestBuilder<Page> 
     */
    open class func reposCreatePagesSiteWithRequestBuilder(owner: String, repo: String, inlineObject133: InlineObject133? = nil) -> RequestBuilder<Page> {
        var path = "/repos/{owner}/{repo}/pages"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject133)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Page>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a release
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject150: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposCreateRelease(owner: String, repo: String, inlineObject150: InlineObject150? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Release?,_ error: Error?) -> Void)) {
        reposCreateReleaseWithRequestBuilder(owner: owner, repo: repo, inlineObject150: inlineObject150).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a release
     - POST /repos/{owner}/{repo}/releases
     - Users with push access to the repository can create a release.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.
     - responseHeaders: [Location(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#create-a-release
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject150: (body)  (optional)
     - returns: RequestBuilder<Release> 
     */
    open class func reposCreateReleaseWithRequestBuilder(owner: String, repo: String, inlineObject150: InlineObject150? = nil) -> RequestBuilder<Release> {
        var path = "/repos/{owner}/{repo}/releases"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject150)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Release>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a repository using a template
     
     - parameter templateOwner: (path)  
     - parameter templateRepo: (path)  
     - parameter inlineObject157: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposCreateUsingTemplate(templateOwner: String, templateRepo: String, inlineObject157: InlineObject157? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Repository?,_ error: Error?) -> Void)) {
        reposCreateUsingTemplateWithRequestBuilder(templateOwner: templateOwner, templateRepo: templateRepo, inlineObject157: inlineObject157).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a repository using a template
     - POST /repos/{template_owner}/{template_repo}/generate
     - Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. The authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.  **OAuth scope requirements**  When using [OAuth](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:  *   `public_repo` scope or `repo` scope to create a public repository *   `repo` scope to create a private repository
     - responseHeaders: [Location(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/repos/#create-a-repository-using-a-template
}
     - parameter templateOwner: (path)  
     - parameter templateRepo: (path)  
     - parameter inlineObject157: (body)  (optional)
     - returns: RequestBuilder<Repository> 
     */
    open class func reposCreateUsingTemplateWithRequestBuilder(templateOwner: String, templateRepo: String, inlineObject157: InlineObject157? = nil) -> RequestBuilder<Repository> {
        var path = "/repos/{template_owner}/{template_repo}/generate"
        let templateOwnerPreEscape = "\(APIHelper.mapValueToPathItem(templateOwner))"
        let templateOwnerPostEscape = templateOwnerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{template_owner}", with: templateOwnerPostEscape, options: .literal, range: nil)
        let templateRepoPreEscape = "\(APIHelper.mapValueToPathItem(templateRepo))"
        let templateRepoPostEscape = templateRepoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{template_repo}", with: templateRepoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject157)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Repository>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a repository webhook
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject110: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposCreateWebhook(owner: String, repo: String, inlineObject110: InlineObject110? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Hook?,_ error: Error?) -> Void)) {
        reposCreateWebhookWithRequestBuilder(owner: owner, repo: repo, inlineObject110: inlineObject110).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a repository webhook
     - POST /repos/{owner}/{repo}/hooks
     - Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can share the same `config` as long as those webhooks do not have any `events` that overlap.
     - responseHeaders: [Location(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#create-a-repository-webhook
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject110: (body)  (optional)
     - returns: RequestBuilder<Hook> 
     */
    open class func reposCreateWebhookWithRequestBuilder(owner: String, repo: String, inlineObject110: InlineObject110? = nil) -> RequestBuilder<Hook> {
        var path = "/repos/{owner}/{repo}/hooks"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject110)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Hook>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Decline a repository invitation
     
     - parameter invitationId: (path) invitation_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposDeclineInvitation(invitationId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposDeclineInvitationWithRequestBuilder(invitationId: invitationId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Decline a repository invitation
     - DELETE /user/repository_invitations/{invitation_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#decline-a-repository-invitation
}
     - parameter invitationId: (path) invitation_id parameter 
     - returns: RequestBuilder<Void> 
     */
    open class func reposDeclineInvitationWithRequestBuilder(invitationId: Int) -> RequestBuilder<Void> {
        var path = "/user/repository_invitations/{invitation_id}"
        let invitationIdPreEscape = "\(APIHelper.mapValueToPathItem(invitationId))"
        let invitationIdPostEscape = invitationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{invitation_id}", with: invitationIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a repository
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposDelete(owner: String, repo: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposDeleteWithRequestBuilder(owner: owner, repo: repo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a repository
     - DELETE /repos/{owner}/{repo}
     - Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.  If an organization owner has configured the organization to prevent members from deleting organization-owned repositories, you will get a `403 Forbidden` response.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/repos/#delete-a-repository
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func reposDeleteWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete access restrictions
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposDeleteAccessRestrictions(owner: String, repo: String, branch: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposDeleteAccessRestrictionsWithRequestBuilder(owner: owner, repo: repo, branch: branch).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete access restrictions
     - DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Disables the ability to restrict who can push to this branch.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#delete-access-restrictions
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - returns: RequestBuilder<Void> 
     */
    open class func reposDeleteAccessRestrictionsWithRequestBuilder(owner: String, repo: String, branch: String) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete admin branch protection
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposDeleteAdminBranchProtection(owner: String, repo: String, branch: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposDeleteAdminBranchProtectionWithRequestBuilder(owner: owner, repo: repo, branch: branch).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete admin branch protection
     - DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#delete-admin-branch-protection
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - returns: RequestBuilder<Void> 
     */
    open class func reposDeleteAdminBranchProtectionWithRequestBuilder(owner: String, repo: String, branch: String) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete branch protection
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposDeleteBranchProtection(owner: String, repo: String, branch: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposDeleteBranchProtectionWithRequestBuilder(owner: owner, repo: repo, branch: branch).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete branch protection
     - DELETE /repos/{owner}/{repo}/branches/{branch}/protection
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#delete-branch-protection
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - returns: RequestBuilder<Void> 
     */
    open class func reposDeleteBranchProtectionWithRequestBuilder(owner: String, repo: String, branch: String) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a commit comment
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposDeleteCommitComment(owner: String, repo: String, commentId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposDeleteCommitCommentWithRequestBuilder(owner: owner, repo: repo, commentId: commentId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a commit comment
     - DELETE /repos/{owner}/{repo}/comments/{comment_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#delete-a-commit-comment
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - returns: RequestBuilder<Void> 
     */
    open class func reposDeleteCommitCommentWithRequestBuilder(owner: String, repo: String, commentId: Int) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/comments/{comment_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(APIHelper.mapValueToPathItem(commentId))"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_id}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete commit signature protection
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposDeleteCommitSignatureProtection(owner: String, repo: String, branch: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposDeleteCommitSignatureProtectionWithRequestBuilder(owner: owner, repo: repo, branch: branch).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete commit signature protection
     - DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#delete-commit-signature-protection
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - returns: RequestBuilder<Void> 
     */
    open class func reposDeleteCommitSignatureProtectionWithRequestBuilder(owner: String, repo: String, branch: String) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a deploy key
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter keyId: (path) key_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposDeleteDeployKey(owner: String, repo: String, keyId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposDeleteDeployKeyWithRequestBuilder(owner: owner, repo: repo, keyId: keyId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a deploy key
     - DELETE /repos/{owner}/{repo}/keys/{key_id}
     - Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#delete-a-deploy-key
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter keyId: (path) key_id parameter 
     - returns: RequestBuilder<Void> 
     */
    open class func reposDeleteDeployKeyWithRequestBuilder(owner: String, repo: String, keyId: Int) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/keys/{key_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let keyIdPreEscape = "\(APIHelper.mapValueToPathItem(keyId))"
        let keyIdPostEscape = keyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{key_id}", with: keyIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a deployment
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter deploymentId: (path) deployment_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposDeleteDeployment(owner: String, repo: String, deploymentId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposDeleteDeploymentWithRequestBuilder(owner: owner, repo: repo, deploymentId: deploymentId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a deployment
     - DELETE /repos/{owner}/{repo}/deployments/{deployment_id}
     - To ensure there can always be an active deployment, you can only delete an _inactive_ deployment. Anyone with `repo` or `repo_deployment` scopes can delete an inactive deployment.  To set a deployment as inactive, you must:  *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment. *   Mark the active deployment as inactive by adding any non-successful deployment status.  For more information, see \"[Create a deployment](https://docs.github.com/enterprise-server@3.0/rest/reference/repos/#create-a-deployment)\" and \"[Create a deployment status](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#create-a-deployment-status).\"
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#delete-a-deployment
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter deploymentId: (path) deployment_id parameter 
     - returns: RequestBuilder<Void> 
     */
    open class func reposDeleteDeploymentWithRequestBuilder(owner: String, repo: String, deploymentId: Int) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/deployments/{deployment_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let deploymentIdPreEscape = "\(APIHelper.mapValueToPathItem(deploymentId))"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deployment_id}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a file
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter path: (path) path+ parameter 
     - parameter inlineObject99: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposDeleteFile(owner: String, repo: String, path: String, inlineObject99: InlineObject99? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: FileCommit?,_ error: Error?) -> Void)) {
        reposDeleteFileWithRequestBuilder(owner: owner, repo: repo, path: path, inlineObject99: inlineObject99).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a file
     - DELETE /repos/{owner}/{repo}/contents/{path}
     - Deletes a file in a repository.  You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.  The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.  You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#delete-a-file
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter path: (path) path+ parameter 
     - parameter inlineObject99: (body)  (optional)
     - returns: RequestBuilder<FileCommit> 
     */
    open class func reposDeleteFileWithRequestBuilder(owner: String, repo: String, path: String, inlineObject99: InlineObject99? = nil) -> RequestBuilder<FileCommit> {
        var path = "/repos/{owner}/{repo}/contents/{path}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
        let pathPostEscape = pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{path}", with: pathPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject99)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FileCommit>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a repository invitation
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter invitationId: (path) invitation_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposDeleteInvitation(owner: String, repo: String, invitationId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposDeleteInvitationWithRequestBuilder(owner: owner, repo: repo, invitationId: invitationId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a repository invitation
     - DELETE /repos/{owner}/{repo}/invitations/{invitation_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#delete-a-repository-invitation
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter invitationId: (path) invitation_id parameter 
     - returns: RequestBuilder<Void> 
     */
    open class func reposDeleteInvitationWithRequestBuilder(owner: String, repo: String, invitationId: Int) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/invitations/{invitation_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let invitationIdPreEscape = "\(APIHelper.mapValueToPathItem(invitationId))"
        let invitationIdPostEscape = invitationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{invitation_id}", with: invitationIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a GitHub Enterprise Server Pages site
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposDeletePagesSite(owner: String, repo: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposDeletePagesSiteWithRequestBuilder(owner: owner, repo: repo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a GitHub Enterprise Server Pages site
     - DELETE /repos/{owner}/{repo}/pages
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#delete-a-github-pages-site
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func reposDeletePagesSiteWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/pages"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete pull request review protection
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposDeletePullRequestReviewProtection(owner: String, repo: String, branch: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposDeletePullRequestReviewProtectionWithRequestBuilder(owner: owner, repo: repo, branch: branch).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete pull request review protection
     - DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#delete-pull-request-review-protection
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - returns: RequestBuilder<Void> 
     */
    open class func reposDeletePullRequestReviewProtectionWithRequestBuilder(owner: String, repo: String, branch: String) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a release
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter releaseId: (path) release_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposDeleteRelease(owner: String, repo: String, releaseId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposDeleteReleaseWithRequestBuilder(owner: owner, repo: repo, releaseId: releaseId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a release
     - DELETE /repos/{owner}/{repo}/releases/{release_id}
     - Users with push access to the repository can delete a release.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#delete-a-release
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter releaseId: (path) release_id parameter 
     - returns: RequestBuilder<Void> 
     */
    open class func reposDeleteReleaseWithRequestBuilder(owner: String, repo: String, releaseId: Int) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/releases/{release_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let releaseIdPreEscape = "\(APIHelper.mapValueToPathItem(releaseId))"
        let releaseIdPostEscape = releaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{release_id}", with: releaseIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a release asset
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter assetId: (path) asset_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposDeleteReleaseAsset(owner: String, repo: String, assetId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposDeleteReleaseAssetWithRequestBuilder(owner: owner, repo: repo, assetId: assetId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a release asset
     - DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#delete-a-release-asset
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter assetId: (path) asset_id parameter 
     - returns: RequestBuilder<Void> 
     */
    open class func reposDeleteReleaseAssetWithRequestBuilder(owner: String, repo: String, assetId: Int) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/releases/assets/{asset_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let assetIdPreEscape = "\(APIHelper.mapValueToPathItem(assetId))"
        let assetIdPostEscape = assetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{asset_id}", with: assetIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a repository webhook
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter hookId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposDeleteWebhook(owner: String, repo: String, hookId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposDeleteWebhookWithRequestBuilder(owner: owner, repo: repo, hookId: hookId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a repository webhook
     - DELETE /repos/{owner}/{repo}/hooks/{hook_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#delete-a-repository-webhook
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter hookId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func reposDeleteWebhookWithRequestBuilder(owner: String, repo: String, hookId: Int) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/hooks/{hook_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let hookIdPreEscape = "\(APIHelper.mapValueToPathItem(hookId))"
        let hookIdPostEscape = hookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{hook_id}", with: hookIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Disable vulnerability alerts
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposDisableVulnerabilityAlerts(owner: String, repo: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposDisableVulnerabilityAlertsWithRequestBuilder(owner: owner, repo: repo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Disable vulnerability alerts
     - DELETE /repos/{owner}/{repo}/vulnerability-alerts
     - Disables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see \"[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)\".
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/repos/#disable-vulnerability-alerts
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func reposDisableVulnerabilityAlertsWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/vulnerability-alerts"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Download a repository archive (tar)
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter ref: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposDownloadTarballArchive(owner: String, repo: String, ref: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposDownloadTarballArchiveWithRequestBuilder(owner: owner, repo: repo, ref: ref).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Download a repository archive (tar)
     - GET /repos/{owner}/{repo}/tarball/{ref}
     - Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use the `Location` header to make a second `GET` request. **Note**: For private repositories, these links are temporary and expire after five minutes.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#download-a-repository-archive
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter ref: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func reposDownloadTarballArchiveWithRequestBuilder(owner: String, repo: String, ref: String) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/tarball/{ref}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let refPreEscape = "\(APIHelper.mapValueToPathItem(ref))"
        let refPostEscape = refPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ref}", with: refPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Download a repository archive (zip)
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter ref: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposDownloadZipballArchive(owner: String, repo: String, ref: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposDownloadZipballArchiveWithRequestBuilder(owner: owner, repo: repo, ref: ref).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Download a repository archive (zip)
     - GET /repos/{owner}/{repo}/zipball/{ref}
     - Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use the `Location` header to make a second `GET` request. **Note**: For private repositories, these links are temporary and expire after five minutes.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#download-a-repository-archive
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter ref: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func reposDownloadZipballArchiveWithRequestBuilder(owner: String, repo: String, ref: String) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/zipball/{ref}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let refPreEscape = "\(APIHelper.mapValueToPathItem(ref))"
        let refPostEscape = refPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ref}", with: refPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Enable vulnerability alerts
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposEnableVulnerabilityAlerts(owner: String, repo: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposEnableVulnerabilityAlertsWithRequestBuilder(owner: owner, repo: repo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Enable vulnerability alerts
     - PUT /repos/{owner}/{repo}/vulnerability-alerts
     - Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see \"[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)\".
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/repos/#enable-vulnerability-alerts
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func reposEnableVulnerabilityAlertsWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/vulnerability-alerts"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a repository
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGet(owner: String, repo: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: FullRepository?,_ error: Error?) -> Void)) {
        reposGetWithRequestBuilder(owner: owner, repo: repo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a repository
     - GET /repos/{owner}/{repo}
     - When you pass the `scarlet-witch-preview` media type, requests to get a repository will also return the repository's code of conduct if it can be detected from the repository's code of conduct file.  The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/repos/#get-a-repository
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - returns: RequestBuilder<FullRepository> 
     */
    open class func reposGetWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<FullRepository> {
        var path = "/repos/{owner}/{repo}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FullRepository>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get access restrictions
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetAccessRestrictions(owner: String, repo: String, branch: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: BranchRestrictionPolicy?,_ error: Error?) -> Void)) {
        reposGetAccessRestrictionsWithRequestBuilder(owner: owner, repo: repo, branch: branch).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get access restrictions
     - GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists who has access to this protected branch.  **Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-access-restrictions
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - returns: RequestBuilder<BranchRestrictionPolicy> 
     */
    open class func reposGetAccessRestrictionsWithRequestBuilder(owner: String, repo: String, branch: String) -> RequestBuilder<BranchRestrictionPolicy> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BranchRestrictionPolicy>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get admin branch protection
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetAdminBranchProtection(owner: String, repo: String, branch: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: ProtectedBranchAdminEnforced?,_ error: Error?) -> Void)) {
        reposGetAdminBranchProtectionWithRequestBuilder(owner: owner, repo: repo, branch: branch).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get admin branch protection
     - GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-admin-branch-protection
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - returns: RequestBuilder<ProtectedBranchAdminEnforced> 
     */
    open class func reposGetAdminBranchProtectionWithRequestBuilder(owner: String, repo: String, branch: String) -> RequestBuilder<ProtectedBranchAdminEnforced> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ProtectedBranchAdminEnforced>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all status check contexts
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetAllStatusCheckContexts(owner: String, repo: String, branch: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        reposGetAllStatusCheckContextsWithRequestBuilder(owner: owner, repo: repo, branch: branch).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all status check contexts
     - GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-all-status-check-contexts
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - returns: RequestBuilder<[String]> 
     */
    open class func reposGetAllStatusCheckContextsWithRequestBuilder(owner: String, repo: String, branch: String) -> RequestBuilder<[String]> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all repository topics
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetAllTopics(owner: String, repo: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Topic?,_ error: Error?) -> Void)) {
        reposGetAllTopicsWithRequestBuilder(owner: owner, repo: repo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all repository topics
     - GET /repos/{owner}/{repo}/topics
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/repos/#get-all-repository-topics
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - returns: RequestBuilder<Topic> 
     */
    open class func reposGetAllTopicsWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<Topic> {
        var path = "/repos/{owner}/{repo}/topics"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Topic>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get apps with access to the protected branch
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetAppsWithAccessToProtectedBranch(owner: String, repo: String, branch: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Integration]?,_ error: Error?) -> Void)) {
        reposGetAppsWithAccessToProtectedBranchWithRequestBuilder(owner: owner, repo: repo, branch: branch).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get apps with access to the protected branch
     - GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-apps-with-access-to-the-protected-branch
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - returns: RequestBuilder<[Integration]> 
     */
    open class func reposGetAppsWithAccessToProtectedBranchWithRequestBuilder(owner: String, repo: String, branch: String) -> RequestBuilder<[Integration]> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Integration]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a branch
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetBranch(owner: String, repo: String, branch: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: BranchWithProtection?,_ error: Error?) -> Void)) {
        reposGetBranchWithRequestBuilder(owner: owner, repo: repo, branch: branch).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a branch
     - GET /repos/{owner}/{repo}/branches/{branch}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-a-branch
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - returns: RequestBuilder<BranchWithProtection> 
     */
    open class func reposGetBranchWithRequestBuilder(owner: String, repo: String, branch: String) -> RequestBuilder<BranchWithProtection> {
        var path = "/repos/{owner}/{repo}/branches/{branch}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BranchWithProtection>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get branch protection
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetBranchProtection(owner: String, repo: String, branch: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: BranchProtection?,_ error: Error?) -> Void)) {
        reposGetBranchProtectionWithRequestBuilder(owner: owner, repo: repo, branch: branch).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get branch protection
     - GET /repos/{owner}/{repo}/branches/{branch}/protection
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-branch-protection
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - returns: RequestBuilder<BranchProtection> 
     */
    open class func reposGetBranchProtectionWithRequestBuilder(owner: String, repo: String, branch: String) -> RequestBuilder<BranchProtection> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BranchProtection>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get repository permissions for a user
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter username: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetCollaboratorPermissionLevel(owner: String, repo: String, username: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: RepositoryCollaboratorPermission?,_ error: Error?) -> Void)) {
        reposGetCollaboratorPermissionLevelWithRequestBuilder(owner: owner, repo: repo, username: username).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get repository permissions for a user
     - GET /repos/{owner}/{repo}/collaborators/{username}/permission
     - Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-repository-permissions-for-a-user
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter username: (path)  
     - returns: RequestBuilder<RepositoryCollaboratorPermission> 
     */
    open class func reposGetCollaboratorPermissionLevelWithRequestBuilder(owner: String, repo: String, username: String) -> RequestBuilder<RepositoryCollaboratorPermission> {
        var path = "/repos/{owner}/{repo}/collaborators/{username}/permission"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RepositoryCollaboratorPermission>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the combined status for a specific reference
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter ref: (path) ref+ parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetCombinedStatusForRef(owner: String, repo: String, ref: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: CombinedCommitStatus?,_ error: Error?) -> Void)) {
        reposGetCombinedStatusForRefWithRequestBuilder(owner: owner, repo: repo, ref: ref).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the combined status for a specific reference
     - GET /repos/{owner}/{repo}/commits/{ref}/status
     - Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.  The most recent status for each context is returned, up to 100. This field [paginates](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#pagination) if there are over 100 contexts.  Additionally, a combined `state` is returned. The `state` is one of:  *   **failure** if any of the contexts report as `error` or `failure` *   **pending** if there are no statuses or a context is `pending` *   **success** if the latest status for all contexts is `success`
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-the-combined-status-for-a-specific-reference
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter ref: (path) ref+ parameter 
     - returns: RequestBuilder<CombinedCommitStatus> 
     */
    open class func reposGetCombinedStatusForRefWithRequestBuilder(owner: String, repo: String, ref: String) -> RequestBuilder<CombinedCommitStatus> {
        var path = "/repos/{owner}/{repo}/commits/{ref}/status"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let refPreEscape = "\(APIHelper.mapValueToPathItem(ref))"
        let refPostEscape = refPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ref}", with: refPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CombinedCommitStatus>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a commit
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter ref: (path) ref+ parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetCommit(owner: String, repo: String, ref: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Commit?,_ error: Error?) -> Void)) {
        reposGetCommitWithRequestBuilder(owner: owner, repo: repo, ref: ref).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a commit
     - GET /repos/{owner}/{repo}/commits/{ref}
     - Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.  **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.  You can pass the appropriate [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.  To return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.  **Signature verification object**  The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:  | Name | Type | Description | | ---- | ---- | ----------- | | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. | | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. | | `signature` | `string` | The signature that was extracted from the commit. | | `payload` | `string` | The value that was signed. |  These are the possible values for `reason` in the `verification` object:  | Value | Description | | ----- | ----------- | | `expired_key` | The key that made the signature is expired. | | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. | | `gpgverify_error` | There was an error communicating with the signature verification service. | | `gpgverify_unavailable` | The signature verification service is currently unavailable. | | `unsigned` | The object does not include a signature. | | `unknown_signature_type` | A non-PGP signature was found in the commit. | | `no_user` | No user was associated with the `committer` email address in the commit. | | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. | | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. | | `unknown_key` | The key that made the signature has not been registered with any user's account. | | `malformed_signature` | There was an error parsing the signature. | | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | `valid` | None of the above errors applied, so the signature is considered to be verified. |
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-a-commit
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter ref: (path) ref+ parameter 
     - returns: RequestBuilder<Commit> 
     */
    open class func reposGetCommitWithRequestBuilder(owner: String, repo: String, ref: String) -> RequestBuilder<Commit> {
        var path = "/repos/{owner}/{repo}/commits/{ref}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let refPreEscape = "\(APIHelper.mapValueToPathItem(ref))"
        let refPostEscape = refPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ref}", with: refPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Commit>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the last year of commit activity
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetCommitActivityStats(owner: String, repo: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [CommitActivity]?,_ error: Error?) -> Void)) {
        reposGetCommitActivityStatsWithRequestBuilder(owner: owner, repo: repo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the last year of commit activity
     - GET /repos/{owner}/{repo}/stats/commit_activity
     - Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-the-last-year-of-commit-activity
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - returns: RequestBuilder<[CommitActivity]> 
     */
    open class func reposGetCommitActivityStatsWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<[CommitActivity]> {
        var path = "/repos/{owner}/{repo}/stats/commit_activity"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[CommitActivity]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a commit comment
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetCommitComment(owner: String, repo: String, commentId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: CommitComment?,_ error: Error?) -> Void)) {
        reposGetCommitCommentWithRequestBuilder(owner: owner, repo: repo, commentId: commentId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a commit comment
     - GET /repos/{owner}/{repo}/comments/{comment_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-a-commit-comment
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - returns: RequestBuilder<CommitComment> 
     */
    open class func reposGetCommitCommentWithRequestBuilder(owner: String, repo: String, commentId: Int) -> RequestBuilder<CommitComment> {
        var path = "/repos/{owner}/{repo}/comments/{comment_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(APIHelper.mapValueToPathItem(commentId))"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_id}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CommitComment>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get commit signature protection
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetCommitSignatureProtection(owner: String, repo: String, branch: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: ProtectedBranchAdminEnforced?,_ error: Error?) -> Void)) {
        reposGetCommitSignatureProtectionWithRequestBuilder(owner: owner, repo: repo, branch: branch).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get commit signature protection
     - GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://help.github.com/articles/signing-commits-with-gpg) in GitHub Help.  **Note**: You must enable branch protection to require signed commits.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-commit-signature-protection
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - returns: RequestBuilder<ProtectedBranchAdminEnforced> 
     */
    open class func reposGetCommitSignatureProtectionWithRequestBuilder(owner: String, repo: String, branch: String) -> RequestBuilder<ProtectedBranchAdminEnforced> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ProtectedBranchAdminEnforced>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get repository content
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter path: (path) path+ parameter 
     - parameter ref: (query) The name of the commit/branch/tag. Default: the repository’s default branch (usually &#x60;master&#x60;) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetContent(owner: String, repo: String, path: String, ref: String? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: ContentTree?,_ error: Error?) -> Void)) {
        reposGetContentWithRequestBuilder(owner: owner, repo: repo, path: path, ref: ref).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get repository content
     - GET /repos/{owner}/{repo}/contents/{path}
     - Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit `:path`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories.   Files and symlinks support [a custom media type](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML (when supported). All content types support [a custom media type](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent object format.  **Note**: *   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/enterprise-server@3.0/rest/reference/git#trees). *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees API](https://docs.github.com/enterprise-server@3.0/rest/reference/git#get-a-tree). *   This API supports files up to 1 megabyte in size.  #### If the content is a directory The response will be an array of objects, one object for each item in the directory. When listing the contents of a directory, submodules have their \"type\" specified as \"file\". Logically, the value _should_ be \"submodule\". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW). In the next major version of the API, the type will be returned as \"submodule\".  #### If the content is a symlink  If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object  describing the symlink itself.  #### If the content is a submodule The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out the submodule at that specific commit.  If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links[\"git\"]`) and the github.com URLs (`html_url` and `_links[\"html\"]`) will have null values.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-repository-content
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter path: (path) path+ parameter 
     - parameter ref: (query) The name of the commit/branch/tag. Default: the repository’s default branch (usually &#x60;master&#x60;) (optional)
     - returns: RequestBuilder<ContentTree> 
     */
    open class func reposGetContentWithRequestBuilder(owner: String, repo: String, path: String, ref: String? = nil) -> RequestBuilder<ContentTree> {
        var path = "/repos/{owner}/{repo}/contents/{path}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
        let pathPostEscape = pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{path}", with: pathPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "ref": ref?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ContentTree>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all contributor commit activity
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetContributorsStats(owner: String, repo: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [ContributorActivity]?,_ error: Error?) -> Void)) {
        reposGetContributorsStatsWithRequestBuilder(owner: owner, repo: repo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all contributor commit activity
     - GET /repos/{owner}/{repo}/stats/contributors
     -  Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:  *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time). *   `a` - Number of additions *   `d` - Number of deletions *   `c` - Number of commits
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-all-contributor-commit-activity
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - returns: RequestBuilder<[ContributorActivity]> 
     */
    open class func reposGetContributorsStatsWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<[ContributorActivity]> {
        var path = "/repos/{owner}/{repo}/stats/contributors"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ContributorActivity]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a deploy key
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter keyId: (path) key_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetDeployKey(owner: String, repo: String, keyId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: DeployKey?,_ error: Error?) -> Void)) {
        reposGetDeployKeyWithRequestBuilder(owner: owner, repo: repo, keyId: keyId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a deploy key
     - GET /repos/{owner}/{repo}/keys/{key_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-a-deploy-key
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter keyId: (path) key_id parameter 
     - returns: RequestBuilder<DeployKey> 
     */
    open class func reposGetDeployKeyWithRequestBuilder(owner: String, repo: String, keyId: Int) -> RequestBuilder<DeployKey> {
        var path = "/repos/{owner}/{repo}/keys/{key_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let keyIdPreEscape = "\(APIHelper.mapValueToPathItem(keyId))"
        let keyIdPostEscape = keyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{key_id}", with: keyIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DeployKey>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a deployment
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter deploymentId: (path) deployment_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetDeployment(owner: String, repo: String, deploymentId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Deployment?,_ error: Error?) -> Void)) {
        reposGetDeploymentWithRequestBuilder(owner: owner, repo: repo, deploymentId: deploymentId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a deployment
     - GET /repos/{owner}/{repo}/deployments/{deployment_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-a-deployment
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter deploymentId: (path) deployment_id parameter 
     - returns: RequestBuilder<Deployment> 
     */
    open class func reposGetDeploymentWithRequestBuilder(owner: String, repo: String, deploymentId: Int) -> RequestBuilder<Deployment> {
        var path = "/repos/{owner}/{repo}/deployments/{deployment_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let deploymentIdPreEscape = "\(APIHelper.mapValueToPathItem(deploymentId))"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deployment_id}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Deployment>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a deployment status
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter deploymentId: (path) deployment_id parameter 
     - parameter statusId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetDeploymentStatus(owner: String, repo: String, deploymentId: Int, statusId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: DeploymentStatus?,_ error: Error?) -> Void)) {
        reposGetDeploymentStatusWithRequestBuilder(owner: owner, repo: repo, deploymentId: deploymentId, statusId: statusId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a deployment status
     - GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}
     - Users with pull access can view a deployment status for a deployment:
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-a-deployment-status
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter deploymentId: (path) deployment_id parameter 
     - parameter statusId: (path)  
     - returns: RequestBuilder<DeploymentStatus> 
     */
    open class func reposGetDeploymentStatusWithRequestBuilder(owner: String, repo: String, deploymentId: Int, statusId: Int) -> RequestBuilder<DeploymentStatus> {
        var path = "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let deploymentIdPreEscape = "\(APIHelper.mapValueToPathItem(deploymentId))"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deployment_id}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let statusIdPreEscape = "\(APIHelper.mapValueToPathItem(statusId))"
        let statusIdPostEscape = statusIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{status_id}", with: statusIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DeploymentStatus>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get latest Pages build
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetLatestPagesBuild(owner: String, repo: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: PageBuild?,_ error: Error?) -> Void)) {
        reposGetLatestPagesBuildWithRequestBuilder(owner: owner, repo: repo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get latest Pages build
     - GET /repos/{owner}/{repo}/pages/builds/latest
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-latest-pages-build
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - returns: RequestBuilder<PageBuild> 
     */
    open class func reposGetLatestPagesBuildWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<PageBuild> {
        var path = "/repos/{owner}/{repo}/pages/builds/latest"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PageBuild>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the latest release
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetLatestRelease(owner: String, repo: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Release?,_ error: Error?) -> Void)) {
        reposGetLatestReleaseWithRequestBuilder(owner: owner, repo: repo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the latest release
     - GET /repos/{owner}/{repo}/releases/latest
     - View the latest published full release for the repository.  The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-the-latest-release
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - returns: RequestBuilder<Release> 
     */
    open class func reposGetLatestReleaseWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<Release> {
        var path = "/repos/{owner}/{repo}/releases/latest"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Release>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a GitHub Enterprise Server Pages site
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetPages(owner: String, repo: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Page?,_ error: Error?) -> Void)) {
        reposGetPagesWithRequestBuilder(owner: owner, repo: repo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a GitHub Enterprise Server Pages site
     - GET /repos/{owner}/{repo}/pages
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-a-github-pages-site
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - returns: RequestBuilder<Page> 
     */
    open class func reposGetPagesWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<Page> {
        var path = "/repos/{owner}/{repo}/pages"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Page>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get GitHub Enterprise Server Pages build
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter buildId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetPagesBuild(owner: String, repo: String, buildId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: PageBuild?,_ error: Error?) -> Void)) {
        reposGetPagesBuildWithRequestBuilder(owner: owner, repo: repo, buildId: buildId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get GitHub Enterprise Server Pages build
     - GET /repos/{owner}/{repo}/pages/builds/{build_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-github-pages-build
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter buildId: (path)  
     - returns: RequestBuilder<PageBuild> 
     */
    open class func reposGetPagesBuildWithRequestBuilder(owner: String, repo: String, buildId: Int) -> RequestBuilder<PageBuild> {
        var path = "/repos/{owner}/{repo}/pages/builds/{build_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let buildIdPreEscape = "\(APIHelper.mapValueToPathItem(buildId))"
        let buildIdPostEscape = buildIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{build_id}", with: buildIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PageBuild>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the weekly commit count
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetParticipationStats(owner: String, repo: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: ParticipationStats?,_ error: Error?) -> Void)) {
        reposGetParticipationStatsWithRequestBuilder(owner: owner, repo: repo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the weekly commit count
     - GET /repos/{owner}/{repo}/stats/participation
     - Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.  The array order is oldest week (index 0) to most recent week.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-the-weekly-commit-count
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - returns: RequestBuilder<ParticipationStats> 
     */
    open class func reposGetParticipationStatsWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<ParticipationStats> {
        var path = "/repos/{owner}/{repo}/stats/participation"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ParticipationStats>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get pull request review protection
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetPullRequestReviewProtection(owner: String, repo: String, branch: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: ProtectedBranchPullRequestReview?,_ error: Error?) -> Void)) {
        reposGetPullRequestReviewProtectionWithRequestBuilder(owner: owner, repo: repo, branch: branch).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get pull request review protection
     - GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-pull-request-review-protection
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - returns: RequestBuilder<ProtectedBranchPullRequestReview> 
     */
    open class func reposGetPullRequestReviewProtectionWithRequestBuilder(owner: String, repo: String, branch: String) -> RequestBuilder<ProtectedBranchPullRequestReview> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ProtectedBranchPullRequestReview>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a repository README
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter ref: (query) The name of the commit/branch/tag. Default: the repository’s default branch (usually &#x60;master&#x60;) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetReadme(owner: String, repo: String, ref: String? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: ContentFile?,_ error: Error?) -> Void)) {
        reposGetReadmeWithRequestBuilder(owner: owner, repo: repo, ref: ref).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a repository README
     - GET /repos/{owner}/{repo}/readme
     - Gets the preferred README for a repository.  READMEs support [custom media types](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-a-repository-readme
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter ref: (query) The name of the commit/branch/tag. Default: the repository’s default branch (usually &#x60;master&#x60;) (optional)
     - returns: RequestBuilder<ContentFile> 
     */
    open class func reposGetReadmeWithRequestBuilder(owner: String, repo: String, ref: String? = nil) -> RequestBuilder<ContentFile> {
        var path = "/repos/{owner}/{repo}/readme"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "ref": ref?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ContentFile>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a release
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter releaseId: (path) release_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetRelease(owner: String, repo: String, releaseId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Release?,_ error: Error?) -> Void)) {
        reposGetReleaseWithRequestBuilder(owner: owner, repo: repo, releaseId: releaseId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a release
     - GET /repos/{owner}/{repo}/releases/{release_id}
     - **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#hypermedia).
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-a-release
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter releaseId: (path) release_id parameter 
     - returns: RequestBuilder<Release> 
     */
    open class func reposGetReleaseWithRequestBuilder(owner: String, repo: String, releaseId: Int) -> RequestBuilder<Release> {
        var path = "/repos/{owner}/{repo}/releases/{release_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let releaseIdPreEscape = "\(APIHelper.mapValueToPathItem(releaseId))"
        let releaseIdPostEscape = releaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{release_id}", with: releaseIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Release>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a release asset
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter assetId: (path) asset_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetReleaseAsset(owner: String, repo: String, assetId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: ReleaseAsset?,_ error: Error?) -> Void)) {
        reposGetReleaseAssetWithRequestBuilder(owner: owner, repo: repo, assetId: assetId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a release asset
     - GET /repos/{owner}/{repo}/releases/assets/{asset_id}
     - To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-a-release-asset
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter assetId: (path) asset_id parameter 
     - returns: RequestBuilder<ReleaseAsset> 
     */
    open class func reposGetReleaseAssetWithRequestBuilder(owner: String, repo: String, assetId: Int) -> RequestBuilder<ReleaseAsset> {
        var path = "/repos/{owner}/{repo}/releases/assets/{asset_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let assetIdPreEscape = "\(APIHelper.mapValueToPathItem(assetId))"
        let assetIdPostEscape = assetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{asset_id}", with: assetIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ReleaseAsset>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a release by tag name
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter tag: (path) tag+ parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetReleaseByTag(owner: String, repo: String, tag: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Release?,_ error: Error?) -> Void)) {
        reposGetReleaseByTagWithRequestBuilder(owner: owner, repo: repo, tag: tag).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a release by tag name
     - GET /repos/{owner}/{repo}/releases/tags/{tag}
     - Get a published release with the specified tag.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-a-release-by-tag-name
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter tag: (path) tag+ parameter 
     - returns: RequestBuilder<Release> 
     */
    open class func reposGetReleaseByTagWithRequestBuilder(owner: String, repo: String, tag: String) -> RequestBuilder<Release> {
        var path = "/repos/{owner}/{repo}/releases/tags/{tag}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let tagPreEscape = "\(APIHelper.mapValueToPathItem(tag))"
        let tagPostEscape = tagPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tag}", with: tagPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Release>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get status checks protection
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetStatusChecksProtection(owner: String, repo: String, branch: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: StatusCheckPolicy?,_ error: Error?) -> Void)) {
        reposGetStatusChecksProtectionWithRequestBuilder(owner: owner, repo: repo, branch: branch).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get status checks protection
     - GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-status-checks-protection
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - returns: RequestBuilder<StatusCheckPolicy> 
     */
    open class func reposGetStatusChecksProtectionWithRequestBuilder(owner: String, repo: String, branch: String) -> RequestBuilder<StatusCheckPolicy> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<StatusCheckPolicy>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get teams with access to the protected branch
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetTeamsWithAccessToProtectedBranch(owner: String, repo: String, branch: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Team]?,_ error: Error?) -> Void)) {
        reposGetTeamsWithAccessToProtectedBranchWithRequestBuilder(owner: owner, repo: repo, branch: branch).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get teams with access to the protected branch
     - GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists the teams who have push access to this branch. The list includes child teams.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-teams-with-access-to-the-protected-branch
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - returns: RequestBuilder<[Team]> 
     */
    open class func reposGetTeamsWithAccessToProtectedBranchWithRequestBuilder(owner: String, repo: String, branch: String) -> RequestBuilder<[Team]> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Team]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get users with access to the protected branch
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetUsersWithAccessToProtectedBranch(owner: String, repo: String, branch: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [SimpleUser]?,_ error: Error?) -> Void)) {
        reposGetUsersWithAccessToProtectedBranchWithRequestBuilder(owner: owner, repo: repo, branch: branch).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get users with access to the protected branch
     - GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists the people who have push access to this branch.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-users-with-access-to-the-protected-branch
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - returns: RequestBuilder<[SimpleUser]> 
     */
    open class func reposGetUsersWithAccessToProtectedBranchWithRequestBuilder(owner: String, repo: String, branch: String) -> RequestBuilder<[SimpleUser]> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[SimpleUser]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a repository webhook
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter hookId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetWebhook(owner: String, repo: String, hookId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Hook?,_ error: Error?) -> Void)) {
        reposGetWebhookWithRequestBuilder(owner: owner, repo: repo, hookId: hookId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a repository webhook
     - GET /repos/{owner}/{repo}/hooks/{hook_id}
     - Returns a webhook configured in a repository. To get only the webhook `config` properties, see \"[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository).\"
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-a-repository-webhook
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter hookId: (path)  
     - returns: RequestBuilder<Hook> 
     */
    open class func reposGetWebhookWithRequestBuilder(owner: String, repo: String, hookId: Int) -> RequestBuilder<Hook> {
        var path = "/repos/{owner}/{repo}/hooks/{hook_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let hookIdPreEscape = "\(APIHelper.mapValueToPathItem(hookId))"
        let hookIdPostEscape = hookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{hook_id}", with: hookIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Hook>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a webhook configuration for a repository
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter hookId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposGetWebhookConfigForRepo(owner: String, repo: String, hookId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: WebhookConfig?,_ error: Error?) -> Void)) {
        reposGetWebhookConfigForRepoWithRequestBuilder(owner: owner, repo: repo, hookId: hookId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a webhook configuration for a repository
     - GET /repos/{owner}/{repo}/hooks/{hook_id}/config
     - Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use \"[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook).\"  Access tokens must have the `read:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:read` permission.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/repos#get-a-webhook-configuration-for-a-repository
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter hookId: (path)  
     - returns: RequestBuilder<WebhookConfig> 
     */
    open class func reposGetWebhookConfigForRepoWithRequestBuilder(owner: String, repo: String, hookId: Int) -> RequestBuilder<WebhookConfig> {
        var path = "/repos/{owner}/{repo}/hooks/{hook_id}/config"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let hookIdPreEscape = "\(APIHelper.mapValueToPathItem(hookId))"
        let hookIdPostEscape = hookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{hook_id}", with: hookIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WebhookConfig>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List branches
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter protected: (query) Setting to &#x60;true&#x60; returns only protected branches. When set to &#x60;false&#x60;, only unprotected branches are returned. Omitting this parameter returns all branches. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposListBranches(owner: String, repo: String, protected: Bool? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [ShortBranch]?,_ error: Error?) -> Void)) {
        reposListBranchesWithRequestBuilder(owner: owner, repo: repo, protected: protected, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List branches
     - GET /repos/{owner}/{repo}/branches
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-branches
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter protected: (query) Setting to &#x60;true&#x60; returns only protected branches. When set to &#x60;false&#x60;, only unprotected branches are returned. Omitting this parameter returns all branches. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[ShortBranch]> 
     */
    open class func reposListBranchesWithRequestBuilder(owner: String, repo: String, protected: Bool? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[ShortBranch]> {
        var path = "/repos/{owner}/{repo}/branches"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "protected": protected?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[ShortBranch]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List branches for HEAD commit
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commitSha: (path) commit_sha parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposListBranchesForHeadCommit(owner: String, repo: String, commitSha: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [BranchShort]?,_ error: Error?) -> Void)) {
        reposListBranchesForHeadCommitWithRequestBuilder(owner: owner, repo: repo, commitSha: commitSha).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List branches for HEAD commit
     - GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-branches-for-head-commit
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commitSha: (path) commit_sha parameter 
     - returns: RequestBuilder<[BranchShort]> 
     */
    open class func reposListBranchesForHeadCommitWithRequestBuilder(owner: String, repo: String, commitSha: String) -> RequestBuilder<[BranchShort]> {
        var path = "/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let commitShaPreEscape = "\(APIHelper.mapValueToPathItem(commitSha))"
        let commitShaPostEscape = commitShaPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{commit_sha}", with: commitShaPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[BranchShort]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter affiliation
     */
    public enum Affiliation_reposListCollaborators: String, CaseIterable {
        case outside = "outside"
        case direct = "direct"
        case all = "all"
    }

    /**
     List repository collaborators
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter affiliation: (query) Filter collaborators returned by their affiliation. Can be one of:   \\* &#x60;outside&#x60;: All outside collaborators of an organization-owned repository.   \\* &#x60;direct&#x60;: All collaborators with permissions to an organization-owned repository, regardless of organization membership status.   \\* &#x60;all&#x60;: All collaborators the authenticated user can see. (optional, default to .all)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposListCollaborators(owner: String, repo: String, affiliation: Affiliation_reposListCollaborators? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Collaborator]?,_ error: Error?) -> Void)) {
        reposListCollaboratorsWithRequestBuilder(owner: owner, repo: repo, affiliation: affiliation, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List repository collaborators
     - GET /repos/{owner}/{repo}/collaborators
     - For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.  Team members will include the members of child teams.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-repository-collaborators
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter affiliation: (query) Filter collaborators returned by their affiliation. Can be one of:   \\* &#x60;outside&#x60;: All outside collaborators of an organization-owned repository.   \\* &#x60;direct&#x60;: All collaborators with permissions to an organization-owned repository, regardless of organization membership status.   \\* &#x60;all&#x60;: All collaborators the authenticated user can see. (optional, default to .all)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[Collaborator]> 
     */
    open class func reposListCollaboratorsWithRequestBuilder(owner: String, repo: String, affiliation: Affiliation_reposListCollaborators? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[Collaborator]> {
        var path = "/repos/{owner}/{repo}/collaborators"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "affiliation": affiliation?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Collaborator]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List commit comments
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commitSha: (path) commit_sha parameter 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposListCommentsForCommit(owner: String, repo: String, commitSha: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [CommitComment]?,_ error: Error?) -> Void)) {
        reposListCommentsForCommitWithRequestBuilder(owner: owner, repo: repo, commitSha: commitSha, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List commit comments
     - GET /repos/{owner}/{repo}/commits/{commit_sha}/comments
     - Use the `:commit_sha` to specify the commit that will have its comments listed.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-commit-comments
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commitSha: (path) commit_sha parameter 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[CommitComment]> 
     */
    open class func reposListCommentsForCommitWithRequestBuilder(owner: String, repo: String, commitSha: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[CommitComment]> {
        var path = "/repos/{owner}/{repo}/commits/{commit_sha}/comments"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let commitShaPreEscape = "\(APIHelper.mapValueToPathItem(commitSha))"
        let commitShaPostEscape = commitShaPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{commit_sha}", with: commitShaPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[CommitComment]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List commit comments for a repository
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposListCommitCommentsForRepo(owner: String, repo: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [CommitComment]?,_ error: Error?) -> Void)) {
        reposListCommitCommentsForRepoWithRequestBuilder(owner: owner, repo: repo, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List commit comments for a repository
     - GET /repos/{owner}/{repo}/comments
     - Commit Comments use [these custom media types](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/).  Comments are ordered by ascending ID.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-commit-comments-for-a-repository
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[CommitComment]> 
     */
    open class func reposListCommitCommentsForRepoWithRequestBuilder(owner: String, repo: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[CommitComment]> {
        var path = "/repos/{owner}/{repo}/comments"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[CommitComment]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List commit statuses for a reference
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter ref: (path) ref+ parameter 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposListCommitStatusesForRef(owner: String, repo: String, ref: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Status]?,_ error: Error?) -> Void)) {
        reposListCommitStatusesForRefWithRequestBuilder(owner: owner, repo: repo, ref: ref, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List commit statuses for a reference
     - GET /repos/{owner}/{repo}/commits/{ref}/statuses
     - Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.  This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-commit-statuses-for-a-reference
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter ref: (path) ref+ parameter 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[Status]> 
     */
    open class func reposListCommitStatusesForRefWithRequestBuilder(owner: String, repo: String, ref: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[Status]> {
        var path = "/repos/{owner}/{repo}/commits/{ref}/statuses"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let refPreEscape = "\(APIHelper.mapValueToPathItem(ref))"
        let refPostEscape = refPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ref}", with: refPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Status]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List commits
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter sha: (query) SHA or branch to start listing commits from. Default: the repository’s default branch (usually &#x60;master&#x60;). (optional)
     - parameter path: (query) Only commits containing this file path will be returned. (optional)
     - parameter author: (query) GitHub login or email address by which to filter by commit author. (optional)
     - parameter since: (query) Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     - parameter until: (query) Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposListCommits(owner: String, repo: String, sha: String? = nil, path: String? = nil, author: String? = nil, since: String? = nil, until: String? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Commit]?,_ error: Error?) -> Void)) {
        reposListCommitsWithRequestBuilder(owner: owner, repo: repo, sha: sha, path: path, author: author, since: since, until: until, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List commits
     - GET /repos/{owner}/{repo}/commits
     - **Signature verification object**  The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:  | Name | Type | Description | | ---- | ---- | ----------- | | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. | | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. | | `signature` | `string` | The signature that was extracted from the commit. | | `payload` | `string` | The value that was signed. |  These are the possible values for `reason` in the `verification` object:  | Value | Description | | ----- | ----------- | | `expired_key` | The key that made the signature is expired. | | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. | | `gpgverify_error` | There was an error communicating with the signature verification service. | | `gpgverify_unavailable` | The signature verification service is currently unavailable. | | `unsigned` | The object does not include a signature. | | `unknown_signature_type` | A non-PGP signature was found in the commit. | | `no_user` | No user was associated with the `committer` email address in the commit. | | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. | | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. | | `unknown_key` | The key that made the signature has not been registered with any user's account. | | `malformed_signature` | There was an error parsing the signature. | | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | `valid` | None of the above errors applied, so the signature is considered to be verified. |
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-commits
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter sha: (query) SHA or branch to start listing commits from. Default: the repository’s default branch (usually &#x60;master&#x60;). (optional)
     - parameter path: (query) Only commits containing this file path will be returned. (optional)
     - parameter author: (query) GitHub login or email address by which to filter by commit author. (optional)
     - parameter since: (query) Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     - parameter until: (query) Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[Commit]> 
     */
    open class func reposListCommitsWithRequestBuilder(owner: String, repo: String, sha: String? = nil, path: String? = nil, author: String? = nil, since: String? = nil, until: String? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[Commit]> {
        var path = "/repos/{owner}/{repo}/commits"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "sha": sha?.encodeToJSON(), 
            "path": path?.encodeToJSON(), 
            "author": author?.encodeToJSON(), 
            "since": since?.encodeToJSON(), 
            "until": until?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Commit]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List repository contributors
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter anon: (query) Set to &#x60;1&#x60; or &#x60;true&#x60; to include anonymous contributors in results. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposListContributors(owner: String, repo: String, anon: String? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Contributor]?,_ error: Error?) -> Void)) {
        reposListContributorsWithRequestBuilder(owner: owner, repo: repo, anon: anon, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List repository contributors
     - GET /repos/{owner}/{repo}/contributors
     - Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.  GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/repos/#list-repository-contributors
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter anon: (query) Set to &#x60;1&#x60; or &#x60;true&#x60; to include anonymous contributors in results. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[Contributor]> 
     */
    open class func reposListContributorsWithRequestBuilder(owner: String, repo: String, anon: String? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[Contributor]> {
        var path = "/repos/{owner}/{repo}/contributors"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "anon": anon?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Contributor]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List deploy keys
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposListDeployKeys(owner: String, repo: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [DeployKey]?,_ error: Error?) -> Void)) {
        reposListDeployKeysWithRequestBuilder(owner: owner, repo: repo, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List deploy keys
     - GET /repos/{owner}/{repo}/keys
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-deploy-keys
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[DeployKey]> 
     */
    open class func reposListDeployKeysWithRequestBuilder(owner: String, repo: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[DeployKey]> {
        var path = "/repos/{owner}/{repo}/keys"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[DeployKey]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List deployment statuses
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter deploymentId: (path) deployment_id parameter 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposListDeploymentStatuses(owner: String, repo: String, deploymentId: Int, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [DeploymentStatus]?,_ error: Error?) -> Void)) {
        reposListDeploymentStatusesWithRequestBuilder(owner: owner, repo: repo, deploymentId: deploymentId, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List deployment statuses
     - GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses
     - Users with pull access can view deployment statuses for a deployment:
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-deployment-statuses
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter deploymentId: (path) deployment_id parameter 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[DeploymentStatus]> 
     */
    open class func reposListDeploymentStatusesWithRequestBuilder(owner: String, repo: String, deploymentId: Int, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[DeploymentStatus]> {
        var path = "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let deploymentIdPreEscape = "\(APIHelper.mapValueToPathItem(deploymentId))"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deployment_id}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[DeploymentStatus]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List deployments
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter sha: (query) The SHA recorded at creation time. (optional, default to "none")
     - parameter ref: (query) The name of the ref. This can be a branch, tag, or SHA. (optional, default to "none")
     - parameter task: (query) The name of the task for the deployment (e.g., &#x60;deploy&#x60; or &#x60;deploy:migrations&#x60;). (optional, default to "none")
     - parameter environment: (query) The name of the environment that was deployed to (e.g., &#x60;staging&#x60; or &#x60;production&#x60;). (optional, default to "none")
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposListDeployments(owner: String, repo: String, sha: String? = nil, ref: String? = nil, task: String? = nil, environment: String? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Deployment]?,_ error: Error?) -> Void)) {
        reposListDeploymentsWithRequestBuilder(owner: owner, repo: repo, sha: sha, ref: ref, task: task, environment: environment, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List deployments
     - GET /repos/{owner}/{repo}/deployments
     - Simple filtering of deployments is available via query parameters:
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-deployments
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter sha: (query) The SHA recorded at creation time. (optional, default to "none")
     - parameter ref: (query) The name of the ref. This can be a branch, tag, or SHA. (optional, default to "none")
     - parameter task: (query) The name of the task for the deployment (e.g., &#x60;deploy&#x60; or &#x60;deploy:migrations&#x60;). (optional, default to "none")
     - parameter environment: (query) The name of the environment that was deployed to (e.g., &#x60;staging&#x60; or &#x60;production&#x60;). (optional, default to "none")
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[Deployment]> 
     */
    open class func reposListDeploymentsWithRequestBuilder(owner: String, repo: String, sha: String? = nil, ref: String? = nil, task: String? = nil, environment: String? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[Deployment]> {
        var path = "/repos/{owner}/{repo}/deployments"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "sha": sha?.encodeToJSON(), 
            "ref": ref?.encodeToJSON(), 
            "task": task?.encodeToJSON(), 
            "environment": environment?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Deployment]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter visibility
     */
    public enum Visibility_reposListForAuthenticatedUser: String, CaseIterable {
        case all = "all"
        case _public = "public"
        case _private = "private"
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_reposListForAuthenticatedUser: String, CaseIterable {
        case all = "all"
        case owner = "owner"
        case _public = "public"
        case _private = "private"
        case member = "member"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_reposListForAuthenticatedUser: String, CaseIterable {
        case created = "created"
        case updated = "updated"
        case pushed = "pushed"
        case fullName = "full_name"
    }

    /**
     * enum for parameter direction
     */
    public enum Direction_reposListForAuthenticatedUser: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     List repositories for the authenticated user
     
     - parameter visibility: (query) Can be one of &#x60;all&#x60;, &#x60;public&#x60;, or &#x60;private&#x60;. (optional, default to .all)
     - parameter affiliation: (query) Comma-separated list of values. Can include:   \\* &#x60;owner&#x60;: Repositories that are owned by the authenticated user.   \\* &#x60;collaborator&#x60;: Repositories that the user has been added to as a collaborator.   \\* &#x60;organization_member&#x60;: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on. (optional, default to "owner,collaborator,organization_member")
     - parameter type: (query) Can be one of &#x60;all&#x60;, &#x60;owner&#x60;, &#x60;public&#x60;, &#x60;private&#x60;, &#x60;member&#x60;. Default: &#x60;all&#x60;      Will cause a &#x60;422&#x60; error if used in the same request as **visibility** or **affiliation**. Will cause a &#x60;422&#x60; error if used in the same request as **visibility** or **affiliation**. (optional, default to .all)
     - parameter sort: (query) Can be one of &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;pushed&#x60;, &#x60;full_name&#x60;. (optional, default to .fullName)
     - parameter direction: (query) Can be one of &#x60;asc&#x60; or &#x60;desc&#x60;. Default: &#x60;asc&#x60; when using &#x60;full_name&#x60;, otherwise &#x60;desc&#x60; (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter since: (query) Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     - parameter before: (query) Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposListForAuthenticatedUser(visibility: Visibility_reposListForAuthenticatedUser? = nil, affiliation: String? = nil, type: ModelType_reposListForAuthenticatedUser? = nil, sort: Sort_reposListForAuthenticatedUser? = nil, direction: Direction_reposListForAuthenticatedUser? = nil, perPage: Int? = nil, page: Int? = nil, since: String? = nil, before: String? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Repository]?,_ error: Error?) -> Void)) {
        reposListForAuthenticatedUserWithRequestBuilder(visibility: visibility, affiliation: affiliation, type: type, sort: sort, direction: direction, perPage: perPage, page: page, since: since, before: before).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List repositories for the authenticated user
     - GET /user/repos
     - Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.  The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/repos/#list-repositories-for-the-authenticated-user
}
     - parameter visibility: (query) Can be one of &#x60;all&#x60;, &#x60;public&#x60;, or &#x60;private&#x60;. (optional, default to .all)
     - parameter affiliation: (query) Comma-separated list of values. Can include:   \\* &#x60;owner&#x60;: Repositories that are owned by the authenticated user.   \\* &#x60;collaborator&#x60;: Repositories that the user has been added to as a collaborator.   \\* &#x60;organization_member&#x60;: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on. (optional, default to "owner,collaborator,organization_member")
     - parameter type: (query) Can be one of &#x60;all&#x60;, &#x60;owner&#x60;, &#x60;public&#x60;, &#x60;private&#x60;, &#x60;member&#x60;. Default: &#x60;all&#x60;      Will cause a &#x60;422&#x60; error if used in the same request as **visibility** or **affiliation**. Will cause a &#x60;422&#x60; error if used in the same request as **visibility** or **affiliation**. (optional, default to .all)
     - parameter sort: (query) Can be one of &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;pushed&#x60;, &#x60;full_name&#x60;. (optional, default to .fullName)
     - parameter direction: (query) Can be one of &#x60;asc&#x60; or &#x60;desc&#x60;. Default: &#x60;asc&#x60; when using &#x60;full_name&#x60;, otherwise &#x60;desc&#x60; (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter since: (query) Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     - parameter before: (query) Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     - returns: RequestBuilder<[Repository]> 
     */
    open class func reposListForAuthenticatedUserWithRequestBuilder(visibility: Visibility_reposListForAuthenticatedUser? = nil, affiliation: String? = nil, type: ModelType_reposListForAuthenticatedUser? = nil, sort: Sort_reposListForAuthenticatedUser? = nil, direction: Direction_reposListForAuthenticatedUser? = nil, perPage: Int? = nil, page: Int? = nil, since: String? = nil, before: String? = nil) -> RequestBuilder<[Repository]> {
        let path = "/user/repos"
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "visibility": visibility?.encodeToJSON(), 
            "affiliation": affiliation?.encodeToJSON(), 
            "type": type?.encodeToJSON(), 
            "sort": sort?.encodeToJSON(), 
            "direction": direction?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "since": since?.encodeToJSON(), 
            "before": before?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Repository]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_reposListForOrg: String, CaseIterable {
        case all = "all"
        case _public = "public"
        case _private = "private"
        case forks = "forks"
        case sources = "sources"
        case member = "member"
        case _internal = "internal"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_reposListForOrg: String, CaseIterable {
        case created = "created"
        case updated = "updated"
        case pushed = "pushed"
        case fullName = "full_name"
    }

    /**
     * enum for parameter direction
     */
    public enum Direction_reposListForOrg: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     List organization repositories
     
     - parameter org: (path)  
     - parameter type: (query) Specifies the types of repositories you want returned. Can be one of &#x60;all&#x60;, &#x60;public&#x60;, &#x60;private&#x60;, &#x60;forks&#x60;, &#x60;sources&#x60;, &#x60;member&#x60;, &#x60;internal&#x60;. Default: &#x60;all&#x60;. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, &#x60;type&#x60; can also be &#x60;internal&#x60;. (optional)
     - parameter sort: (query) Can be one of &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;pushed&#x60;, &#x60;full_name&#x60;. (optional, default to .created)
     - parameter direction: (query) Can be one of &#x60;asc&#x60; or &#x60;desc&#x60;. Default: when using &#x60;full_name&#x60;: &#x60;asc&#x60;, otherwise &#x60;desc&#x60; (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposListForOrg(org: String, type: ModelType_reposListForOrg? = nil, sort: Sort_reposListForOrg? = nil, direction: Direction_reposListForOrg? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [MinimalRepository]?,_ error: Error?) -> Void)) {
        reposListForOrgWithRequestBuilder(org: org, type: type, sort: sort, direction: direction, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List organization repositories
     - GET /orgs/{org}/repos
     - Lists repositories for the specified organization.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/repos/#list-organization-repositories
}
     - parameter org: (path)  
     - parameter type: (query) Specifies the types of repositories you want returned. Can be one of &#x60;all&#x60;, &#x60;public&#x60;, &#x60;private&#x60;, &#x60;forks&#x60;, &#x60;sources&#x60;, &#x60;member&#x60;, &#x60;internal&#x60;. Default: &#x60;all&#x60;. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, &#x60;type&#x60; can also be &#x60;internal&#x60;. (optional)
     - parameter sort: (query) Can be one of &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;pushed&#x60;, &#x60;full_name&#x60;. (optional, default to .created)
     - parameter direction: (query) Can be one of &#x60;asc&#x60; or &#x60;desc&#x60;. Default: when using &#x60;full_name&#x60;: &#x60;asc&#x60;, otherwise &#x60;desc&#x60; (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[MinimalRepository]> 
     */
    open class func reposListForOrgWithRequestBuilder(org: String, type: ModelType_reposListForOrg? = nil, sort: Sort_reposListForOrg? = nil, direction: Direction_reposListForOrg? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[MinimalRepository]> {
        var path = "/orgs/{org}/repos"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type?.encodeToJSON(), 
            "sort": sort?.encodeToJSON(), 
            "direction": direction?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[MinimalRepository]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_reposListForUser: String, CaseIterable {
        case all = "all"
        case owner = "owner"
        case member = "member"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_reposListForUser: String, CaseIterable {
        case created = "created"
        case updated = "updated"
        case pushed = "pushed"
        case fullName = "full_name"
    }

    /**
     * enum for parameter direction
     */
    public enum Direction_reposListForUser: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     List repositories for a user
     
     - parameter username: (path)  
     - parameter type: (query) Can be one of &#x60;all&#x60;, &#x60;owner&#x60;, &#x60;member&#x60;. (optional, default to .owner)
     - parameter sort: (query) Can be one of &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;pushed&#x60;, &#x60;full_name&#x60;. (optional, default to .fullName)
     - parameter direction: (query) Can be one of &#x60;asc&#x60; or &#x60;desc&#x60;. Default: &#x60;asc&#x60; when using &#x60;full_name&#x60;, otherwise &#x60;desc&#x60; (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposListForUser(username: String, type: ModelType_reposListForUser? = nil, sort: Sort_reposListForUser? = nil, direction: Direction_reposListForUser? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [MinimalRepository]?,_ error: Error?) -> Void)) {
        reposListForUserWithRequestBuilder(username: username, type: type, sort: sort, direction: direction, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List repositories for a user
     - GET /users/{username}/repos
     - Lists public repositories for the specified user.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/repos/#list-repositories-for-a-user
}
     - parameter username: (path)  
     - parameter type: (query) Can be one of &#x60;all&#x60;, &#x60;owner&#x60;, &#x60;member&#x60;. (optional, default to .owner)
     - parameter sort: (query) Can be one of &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;pushed&#x60;, &#x60;full_name&#x60;. (optional, default to .fullName)
     - parameter direction: (query) Can be one of &#x60;asc&#x60; or &#x60;desc&#x60;. Default: &#x60;asc&#x60; when using &#x60;full_name&#x60;, otherwise &#x60;desc&#x60; (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[MinimalRepository]> 
     */
    open class func reposListForUserWithRequestBuilder(username: String, type: ModelType_reposListForUser? = nil, sort: Sort_reposListForUser? = nil, direction: Direction_reposListForUser? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[MinimalRepository]> {
        var path = "/users/{username}/repos"
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type?.encodeToJSON(), 
            "sort": sort?.encodeToJSON(), 
            "direction": direction?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[MinimalRepository]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_reposListForks: String, CaseIterable {
        case newest = "newest"
        case oldest = "oldest"
        case stargazers = "stargazers"
    }

    /**
     List forks
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter sort: (query) The sort order. Can be either &#x60;newest&#x60;, &#x60;oldest&#x60;, or &#x60;stargazers&#x60;. (optional, default to .newest)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposListForks(owner: String, repo: String, sort: Sort_reposListForks? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [MinimalRepository]?,_ error: Error?) -> Void)) {
        reposListForksWithRequestBuilder(owner: owner, repo: repo, sort: sort, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List forks
     - GET /repos/{owner}/{repo}/forks
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-forks
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter sort: (query) The sort order. Can be either &#x60;newest&#x60;, &#x60;oldest&#x60;, or &#x60;stargazers&#x60;. (optional, default to .newest)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[MinimalRepository]> 
     */
    open class func reposListForksWithRequestBuilder(owner: String, repo: String, sort: Sort_reposListForks? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[MinimalRepository]> {
        var path = "/repos/{owner}/{repo}/forks"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "sort": sort?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[MinimalRepository]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List repository invitations
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposListInvitations(owner: String, repo: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [RepositoryInvitation]?,_ error: Error?) -> Void)) {
        reposListInvitationsWithRequestBuilder(owner: owner, repo: repo, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List repository invitations
     - GET /repos/{owner}/{repo}/invitations
     - When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-repository-invitations
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[RepositoryInvitation]> 
     */
    open class func reposListInvitationsWithRequestBuilder(owner: String, repo: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[RepositoryInvitation]> {
        var path = "/repos/{owner}/{repo}/invitations"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[RepositoryInvitation]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List repository invitations for the authenticated user
     
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposListInvitationsForAuthenticatedUser(perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [RepositoryInvitation]?,_ error: Error?) -> Void)) {
        reposListInvitationsForAuthenticatedUserWithRequestBuilder(perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List repository invitations for the authenticated user
     - GET /user/repository_invitations
     - When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-repository-invitations-for-the-authenticated-user
}
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[RepositoryInvitation]> 
     */
    open class func reposListInvitationsForAuthenticatedUserWithRequestBuilder(perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[RepositoryInvitation]> {
        let path = "/user/repository_invitations"
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[RepositoryInvitation]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List repository languages
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposListLanguages(owner: String, repo: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [String:Int]?,_ error: Error?) -> Void)) {
        reposListLanguagesWithRequestBuilder(owner: owner, repo: repo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List repository languages
     - GET /repos/{owner}/{repo}/languages
     - Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/repos/#list-repository-languages
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - returns: RequestBuilder<[String:Int]> 
     */
    open class func reposListLanguagesWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<[String:Int]> {
        var path = "/repos/{owner}/{repo}/languages"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String:Int]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List GitHub Enterprise Server Pages builds
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposListPagesBuilds(owner: String, repo: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [PageBuild]?,_ error: Error?) -> Void)) {
        reposListPagesBuildsWithRequestBuilder(owner: owner, repo: repo, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List GitHub Enterprise Server Pages builds
     - GET /repos/{owner}/{repo}/pages/builds
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-github-pages-builds
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[PageBuild]> 
     */
    open class func reposListPagesBuildsWithRequestBuilder(owner: String, repo: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[PageBuild]> {
        var path = "/repos/{owner}/{repo}/pages/builds"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[PageBuild]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter visibility
     */
    public enum Visibility_reposListPublic: String, CaseIterable {
        case all = "all"
        case _public = "public"
    }

    /**
     List public repositories
     
     - parameter since: (query) A repository ID. Only return repositories with an ID greater than this ID. (optional)
     - parameter visibility: (query) Specifies the types of repositories to return. Can be one of &#x60;all&#x60; or &#x60;public&#x60;. Default: &#x60;public&#x60;. (optional, default to ._public)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposListPublic(since: Int? = nil, visibility: Visibility_reposListPublic? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [MinimalRepository]?,_ error: Error?) -> Void)) {
        reposListPublicWithRequestBuilder(since: since, visibility: visibility).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List public repositories
     - GET /repositories
     - Lists all public repositories in the order that they were created.  Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/repos/#list-public-repositories
}
     - parameter since: (query) A repository ID. Only return repositories with an ID greater than this ID. (optional)
     - parameter visibility: (query) Specifies the types of repositories to return. Can be one of &#x60;all&#x60; or &#x60;public&#x60;. Default: &#x60;public&#x60;. (optional, default to ._public)
     - returns: RequestBuilder<[MinimalRepository]> 
     */
    open class func reposListPublicWithRequestBuilder(since: Int? = nil, visibility: Visibility_reposListPublic? = nil) -> RequestBuilder<[MinimalRepository]> {
        let path = "/repositories"
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "since": since?.encodeToJSON(), 
            "visibility": visibility?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[MinimalRepository]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List pull requests associated with a commit
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commitSha: (path) commit_sha parameter 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposListPullRequestsAssociatedWithCommit(owner: String, repo: String, commitSha: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [PullRequestSimple]?,_ error: Error?) -> Void)) {
        reposListPullRequestsAssociatedWithCommitWithRequestBuilder(owner: owner, repo: repo, commitSha: commitSha, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List pull requests associated with a commit
     - GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls
     - Lists all pull requests containing the provided commit SHA, which can be from any point in the commit history. The results will include open and closed pull requests. Additional preview headers may be required to see certain details for associated pull requests, such as whether a pull request is in a draft state. For more information about previews that might affect this endpoint, see the [List pull requests](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-pull-requests) endpoint.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-pull-requests-associated-with-a-commit
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commitSha: (path) commit_sha parameter 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[PullRequestSimple]> 
     */
    open class func reposListPullRequestsAssociatedWithCommitWithRequestBuilder(owner: String, repo: String, commitSha: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[PullRequestSimple]> {
        var path = "/repos/{owner}/{repo}/commits/{commit_sha}/pulls"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let commitShaPreEscape = "\(APIHelper.mapValueToPathItem(commitSha))"
        let commitShaPostEscape = commitShaPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{commit_sha}", with: commitShaPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[PullRequestSimple]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List release assets
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter releaseId: (path) release_id parameter 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposListReleaseAssets(owner: String, repo: String, releaseId: Int, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [ReleaseAsset]?,_ error: Error?) -> Void)) {
        reposListReleaseAssetsWithRequestBuilder(owner: owner, repo: repo, releaseId: releaseId, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List release assets
     - GET /repos/{owner}/{repo}/releases/{release_id}/assets
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-release-assets
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter releaseId: (path) release_id parameter 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[ReleaseAsset]> 
     */
    open class func reposListReleaseAssetsWithRequestBuilder(owner: String, repo: String, releaseId: Int, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[ReleaseAsset]> {
        var path = "/repos/{owner}/{repo}/releases/{release_id}/assets"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let releaseIdPreEscape = "\(APIHelper.mapValueToPathItem(releaseId))"
        let releaseIdPostEscape = releaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{release_id}", with: releaseIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[ReleaseAsset]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List releases
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposListReleases(owner: String, repo: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Release]?,_ error: Error?) -> Void)) {
        reposListReleasesWithRequestBuilder(owner: owner, repo: repo, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List releases
     - GET /repos/{owner}/{repo}/releases
     - This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-repository-tags).  Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-releases
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[Release]> 
     */
    open class func reposListReleasesWithRequestBuilder(owner: String, repo: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[Release]> {
        var path = "/repos/{owner}/{repo}/releases"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Release]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List repository tags
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposListTags(owner: String, repo: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Tag]?,_ error: Error?) -> Void)) {
        reposListTagsWithRequestBuilder(owner: owner, repo: repo, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List repository tags
     - GET /repos/{owner}/{repo}/tags
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/repos/#list-repository-tags
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[Tag]> 
     */
    open class func reposListTagsWithRequestBuilder(owner: String, repo: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[Tag]> {
        var path = "/repos/{owner}/{repo}/tags"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Tag]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List repository teams
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposListTeams(owner: String, repo: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Team]?,_ error: Error?) -> Void)) {
        reposListTeamsWithRequestBuilder(owner: owner, repo: repo, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List repository teams
     - GET /repos/{owner}/{repo}/teams
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/repos/#list-repository-teams
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[Team]> 
     */
    open class func reposListTeamsWithRequestBuilder(owner: String, repo: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[Team]> {
        var path = "/repos/{owner}/{repo}/teams"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Team]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List repository webhooks
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposListWebhooks(owner: String, repo: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Hook]?,_ error: Error?) -> Void)) {
        reposListWebhooksWithRequestBuilder(owner: owner, repo: repo, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List repository webhooks
     - GET /repos/{owner}/{repo}/hooks
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-repository-webhooks
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[Hook]> 
     */
    open class func reposListWebhooksWithRequestBuilder(owner: String, repo: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[Hook]> {
        var path = "/repos/{owner}/{repo}/hooks"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Hook]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Merge a branch
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject128: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposMerge(owner: String, repo: String, inlineObject128: InlineObject128? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Commit?,_ error: Error?) -> Void)) {
        reposMergeWithRequestBuilder(owner: owner, repo: repo, inlineObject128: inlineObject128).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Merge a branch
     - POST /repos/{owner}/{repo}/merges
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#merge-a-branch
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject128: (body)  (optional)
     - returns: RequestBuilder<Commit> 
     */
    open class func reposMergeWithRequestBuilder(owner: String, repo: String, inlineObject128: InlineObject128? = nil) -> RequestBuilder<Commit> {
        var path = "/repos/{owner}/{repo}/merges"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject128)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Commit>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Ping a repository webhook
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter hookId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposPingWebhook(owner: String, repo: String, hookId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposPingWebhookWithRequestBuilder(owner: owner, repo: repo, hookId: hookId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Ping a repository webhook
     - POST /repos/{owner}/{repo}/hooks/{hook_id}/pings
     - This will trigger a [ping event](https://docs.github.com/enterprise-server@3.0/webhooks/#ping-event) to be sent to the hook.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#ping-a-repository-webhook
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter hookId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func reposPingWebhookWithRequestBuilder(owner: String, repo: String, hookId: Int) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/hooks/{hook_id}/pings"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let hookIdPreEscape = "\(APIHelper.mapValueToPathItem(hookId))"
        let hookIdPostEscape = hookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{hook_id}", with: hookIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove app access restrictions
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter inlineObject83: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposRemoveAppAccessRestrictions(owner: String, repo: String, branch: String, inlineObject83: InlineObject83? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Integration]?,_ error: Error?) -> Void)) {
        reposRemoveAppAccessRestrictionsWithRequestBuilder(owner: owner, repo: repo, branch: branch, inlineObject83: inlineObject83).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove app access restrictions
     - DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Removes the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.  | Type    | Description                                                                                                                                                | | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#remove-app-access-restrictions
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter inlineObject83: (body)  (optional)
     - returns: RequestBuilder<[Integration]> 
     */
    open class func reposRemoveAppAccessRestrictionsWithRequestBuilder(owner: String, repo: String, branch: String, inlineObject83: InlineObject83? = nil) -> RequestBuilder<[Integration]> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject83)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Integration]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Remove a repository collaborator
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter username: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposRemoveCollaborator(owner: String, repo: String, username: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposRemoveCollaboratorWithRequestBuilder(owner: owner, repo: repo, username: username).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove a repository collaborator
     - DELETE /repos/{owner}/{repo}/collaborators/{username}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#remove-a-repository-collaborator
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter username: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func reposRemoveCollaboratorWithRequestBuilder(owner: String, repo: String, username: String) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/collaborators/{username}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove status check contexts
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter inlineObject80: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposRemoveStatusCheckContexts(owner: String, repo: String, branch: String, inlineObject80: InlineObject80? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        reposRemoveStatusCheckContextsWithRequestBuilder(owner: owner, repo: repo, branch: branch, inlineObject80: inlineObject80).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove status check contexts
     - DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#remove-status-check-contexts
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter inlineObject80: (body)  (optional)
     - returns: RequestBuilder<[String]> 
     */
    open class func reposRemoveStatusCheckContextsWithRequestBuilder(owner: String, repo: String, branch: String, inlineObject80: InlineObject80? = nil) -> RequestBuilder<[String]> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject80)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Remove status check protection
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposRemoveStatusCheckProtection(owner: String, repo: String, branch: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposRemoveStatusCheckProtectionWithRequestBuilder(owner: owner, repo: repo, branch: branch).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove status check protection
     - DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#remove-status-check-protection
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - returns: RequestBuilder<Void> 
     */
    open class func reposRemoveStatusCheckProtectionWithRequestBuilder(owner: String, repo: String, branch: String) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove team access restrictions
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter inlineObject86: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposRemoveTeamAccessRestrictions(owner: String, repo: String, branch: String, inlineObject86: InlineObject86? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Team]?,_ error: Error?) -> Void)) {
        reposRemoveTeamAccessRestrictionsWithRequestBuilder(owner: owner, repo: repo, branch: branch, inlineObject86: inlineObject86).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove team access restrictions
     - DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Removes the ability of a team to push to this branch. You can also remove push access for child teams.  | Type    | Description                                                                                                                                         | | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- | | `array` | Teams that should no longer have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#remove-team-access-restrictions
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter inlineObject86: (body)  (optional)
     - returns: RequestBuilder<[Team]> 
     */
    open class func reposRemoveTeamAccessRestrictionsWithRequestBuilder(owner: String, repo: String, branch: String, inlineObject86: InlineObject86? = nil) -> RequestBuilder<[Team]> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject86)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Team]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Remove user access restrictions
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter inlineObject89: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposRemoveUserAccessRestrictions(owner: String, repo: String, branch: String, inlineObject89: InlineObject89? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [SimpleUser]?,_ error: Error?) -> Void)) {
        reposRemoveUserAccessRestrictionsWithRequestBuilder(owner: owner, repo: repo, branch: branch, inlineObject89: inlineObject89).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove user access restrictions
     - DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Removes the ability of a user to push to this branch.  | Type    | Description                                                                                                                                   | | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- | | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#remove-user-access-restrictions
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter inlineObject89: (body)  (optional)
     - returns: RequestBuilder<[SimpleUser]> 
     */
    open class func reposRemoveUserAccessRestrictionsWithRequestBuilder(owner: String, repo: String, branch: String, inlineObject89: InlineObject89? = nil) -> RequestBuilder<[SimpleUser]> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject89)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[SimpleUser]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace all repository topics
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject155: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposReplaceAllTopics(owner: String, repo: String, inlineObject155: InlineObject155? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Topic?,_ error: Error?) -> Void)) {
        reposReplaceAllTopicsWithRequestBuilder(owner: owner, repo: repo, inlineObject155: inlineObject155).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Replace all repository topics
     - PUT /repos/{owner}/{repo}/topics
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/repos/#replace-all-repository-topics
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject155: (body)  (optional)
     - returns: RequestBuilder<Topic> 
     */
    open class func reposReplaceAllTopicsWithRequestBuilder(owner: String, repo: String, inlineObject155: InlineObject155? = nil) -> RequestBuilder<Topic> {
        var path = "/repos/{owner}/{repo}/topics"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject155)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Topic>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Request a GitHub Enterprise Server Pages build
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposRequestPagesBuild(owner: String, repo: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: PageBuildStatus?,_ error: Error?) -> Void)) {
        reposRequestPagesBuildWithRequestBuilder(owner: owner, repo: repo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Request a GitHub Enterprise Server Pages build
     - POST /repos/{owner}/{repo}/pages/builds
     - You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.  Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#request-a-github-pages-build
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - returns: RequestBuilder<PageBuildStatus> 
     */
    open class func reposRequestPagesBuildWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<PageBuildStatus> {
        var path = "/repos/{owner}/{repo}/pages/builds"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PageBuildStatus>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set admin branch protection
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposSetAdminBranchProtection(owner: String, repo: String, branch: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: ProtectedBranchAdminEnforced?,_ error: Error?) -> Void)) {
        reposSetAdminBranchProtectionWithRequestBuilder(owner: owner, repo: repo, branch: branch).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set admin branch protection
     - POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#set-admin-branch-protection
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - returns: RequestBuilder<ProtectedBranchAdminEnforced> 
     */
    open class func reposSetAdminBranchProtectionWithRequestBuilder(owner: String, repo: String, branch: String) -> RequestBuilder<ProtectedBranchAdminEnforced> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ProtectedBranchAdminEnforced>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set app access restrictions
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter inlineObject81: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposSetAppAccessRestrictions(owner: String, repo: String, branch: String, inlineObject81: InlineObject81? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Integration]?,_ error: Error?) -> Void)) {
        reposSetAppAccessRestrictionsWithRequestBuilder(owner: owner, repo: repo, branch: branch, inlineObject81: inlineObject81).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set app access restrictions
     - PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.  | Type    | Description                                                                                                                                                | | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#set-app-access-restrictions
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter inlineObject81: (body)  (optional)
     - returns: RequestBuilder<[Integration]> 
     */
    open class func reposSetAppAccessRestrictionsWithRequestBuilder(owner: String, repo: String, branch: String, inlineObject81: InlineObject81? = nil) -> RequestBuilder<[Integration]> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject81)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Integration]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set status check contexts
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter inlineObject78: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposSetStatusCheckContexts(owner: String, repo: String, branch: String, inlineObject78: InlineObject78? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        reposSetStatusCheckContextsWithRequestBuilder(owner: owner, repo: repo, branch: branch, inlineObject78: inlineObject78).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set status check contexts
     - PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#set-status-check-contexts
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter inlineObject78: (body)  (optional)
     - returns: RequestBuilder<[String]> 
     */
    open class func reposSetStatusCheckContextsWithRequestBuilder(owner: String, repo: String, branch: String, inlineObject78: InlineObject78? = nil) -> RequestBuilder<[String]> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject78)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set team access restrictions
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter inlineObject84: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposSetTeamAccessRestrictions(owner: String, repo: String, branch: String, inlineObject84: InlineObject84? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Team]?,_ error: Error?) -> Void)) {
        reposSetTeamAccessRestrictionsWithRequestBuilder(owner: owner, repo: repo, branch: branch, inlineObject84: inlineObject84).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set team access restrictions
     - PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.  | Type    | Description                                                                                                                                | | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ | | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#set-team-access-restrictions
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter inlineObject84: (body)  (optional)
     - returns: RequestBuilder<[Team]> 
     */
    open class func reposSetTeamAccessRestrictionsWithRequestBuilder(owner: String, repo: String, branch: String, inlineObject84: InlineObject84? = nil) -> RequestBuilder<[Team]> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject84)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Team]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set user access restrictions
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter inlineObject87: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposSetUserAccessRestrictions(owner: String, repo: String, branch: String, inlineObject87: InlineObject87? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [SimpleUser]?,_ error: Error?) -> Void)) {
        reposSetUserAccessRestrictionsWithRequestBuilder(owner: owner, repo: repo, branch: branch, inlineObject87: inlineObject87).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set user access restrictions
     - PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.  | Type    | Description                                                                                                                   | | ------- | ----------------------------------------------------------------------------------------------------------------------------- | | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#set-user-access-restrictions
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter inlineObject87: (body)  (optional)
     - returns: RequestBuilder<[SimpleUser]> 
     */
    open class func reposSetUserAccessRestrictionsWithRequestBuilder(owner: String, repo: String, branch: String, inlineObject87: InlineObject87? = nil) -> RequestBuilder<[SimpleUser]> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject87)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[SimpleUser]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Test the push repository webhook
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter hookId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposTestPushWebhook(owner: String, repo: String, hookId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposTestPushWebhookWithRequestBuilder(owner: owner, repo: repo, hookId: hookId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Test the push repository webhook
     - POST /repos/{owner}/{repo}/hooks/{hook_id}/tests
     - This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.  **Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#test-the-push-repository-webhook
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter hookId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func reposTestPushWebhookWithRequestBuilder(owner: String, repo: String, hookId: Int) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/hooks/{hook_id}/tests"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let hookIdPreEscape = "\(APIHelper.mapValueToPathItem(hookId))"
        let hookIdPostEscape = hookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{hook_id}", with: hookIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Transfer a repository
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject156: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposTransfer(owner: String, repo: String, inlineObject156: InlineObject156? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Repository?,_ error: Error?) -> Void)) {
        reposTransferWithRequestBuilder(owner: owner, repo: repo, inlineObject156: inlineObject156).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Transfer a repository
     - POST /repos/{owner}/{repo}/transfer
     - A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://help.github.com/articles/about-repository-transfers/).
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/repos/#transfer-a-repository
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject156: (body)  (optional)
     - returns: RequestBuilder<Repository> 
     */
    open class func reposTransferWithRequestBuilder(owner: String, repo: String, inlineObject156: InlineObject156? = nil) -> RequestBuilder<Repository> {
        var path = "/repos/{owner}/{repo}/transfer"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject156)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Repository>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a repository
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject71: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposUpdate(owner: String, repo: String, inlineObject71: InlineObject71? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: FullRepository?,_ error: Error?) -> Void)) {
        reposUpdateWithRequestBuilder(owner: owner, repo: repo, inlineObject71: inlineObject71).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a repository
     - PATCH /repos/{owner}/{repo}
     - **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#replace-all-repository-topics) endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/repos/#update-a-repository
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject71: (body)  (optional)
     - returns: RequestBuilder<FullRepository> 
     */
    open class func reposUpdateWithRequestBuilder(owner: String, repo: String, inlineObject71: InlineObject71? = nil) -> RequestBuilder<FullRepository> {
        var path = "/repos/{owner}/{repo}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject71)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FullRepository>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update branch protection
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter inlineObject75: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposUpdateBranchProtection(owner: String, repo: String, branch: String, inlineObject75: InlineObject75? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: ProtectedBranch?,_ error: Error?) -> Void)) {
        reposUpdateBranchProtectionWithRequestBuilder(owner: owner, repo: repo, branch: branch, inlineObject75: inlineObject75).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update branch protection
     - PUT /repos/{owner}/{repo}/branches/{branch}/protection
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Protecting a branch requires admin or owner permissions to the repository.  **Note**: Passing new arrays of `users` and `teams` replaces their previous values.  **Note**: The list of users, apps, and teams in total is limited to 100 items.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#update-branch-protection
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter inlineObject75: (body)  (optional)
     - returns: RequestBuilder<ProtectedBranch> 
     */
    open class func reposUpdateBranchProtectionWithRequestBuilder(owner: String, repo: String, branch: String, inlineObject75: InlineObject75? = nil) -> RequestBuilder<ProtectedBranch> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject75)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ProtectedBranch>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a commit comment
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - parameter inlineObject95: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposUpdateCommitComment(owner: String, repo: String, commentId: Int, inlineObject95: InlineObject95? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: CommitComment?,_ error: Error?) -> Void)) {
        reposUpdateCommitCommentWithRequestBuilder(owner: owner, repo: repo, commentId: commentId, inlineObject95: inlineObject95).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a commit comment
     - PATCH /repos/{owner}/{repo}/comments/{comment_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#update-a-commit-comment
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - parameter inlineObject95: (body)  (optional)
     - returns: RequestBuilder<CommitComment> 
     */
    open class func reposUpdateCommitCommentWithRequestBuilder(owner: String, repo: String, commentId: Int, inlineObject95: InlineObject95? = nil) -> RequestBuilder<CommitComment> {
        var path = "/repos/{owner}/{repo}/comments/{comment_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(APIHelper.mapValueToPathItem(commentId))"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_id}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject95)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CommitComment>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update information about a GitHub Enterprise Server Pages site
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject132: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposUpdateInformationAboutPagesSite(owner: String, repo: String, inlineObject132: InlineObject132? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposUpdateInformationAboutPagesSiteWithRequestBuilder(owner: owner, repo: repo, inlineObject132: inlineObject132).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update information about a GitHub Enterprise Server Pages site
     - PUT /repos/{owner}/{repo}/pages
     - Updates information for a GitHub Enterprise Server Pages site. For more information, see \"[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#update-information-about-a-github-pages-site
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject132: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func reposUpdateInformationAboutPagesSiteWithRequestBuilder(owner: String, repo: String, inlineObject132: InlineObject132? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/pages"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject132)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a repository invitation
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter invitationId: (path) invitation_id parameter 
     - parameter inlineObject113: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposUpdateInvitation(owner: String, repo: String, invitationId: Int, inlineObject113: InlineObject113? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: RepositoryInvitation?,_ error: Error?) -> Void)) {
        reposUpdateInvitationWithRequestBuilder(owner: owner, repo: repo, invitationId: invitationId, inlineObject113: inlineObject113).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a repository invitation
     - PATCH /repos/{owner}/{repo}/invitations/{invitation_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#update-a-repository-invitation
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter invitationId: (path) invitation_id parameter 
     - parameter inlineObject113: (body)  (optional)
     - returns: RequestBuilder<RepositoryInvitation> 
     */
    open class func reposUpdateInvitationWithRequestBuilder(owner: String, repo: String, invitationId: Int, inlineObject113: InlineObject113? = nil) -> RequestBuilder<RepositoryInvitation> {
        var path = "/repos/{owner}/{repo}/invitations/{invitation_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let invitationIdPreEscape = "\(APIHelper.mapValueToPathItem(invitationId))"
        let invitationIdPostEscape = invitationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{invitation_id}", with: invitationIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject113)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RepositoryInvitation>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update pull request review protection
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter inlineObject76: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposUpdatePullRequestReviewProtection(owner: String, repo: String, branch: String, inlineObject76: InlineObject76? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: ProtectedBranchPullRequestReview?,_ error: Error?) -> Void)) {
        reposUpdatePullRequestReviewProtectionWithRequestBuilder(owner: owner, repo: repo, branch: branch, inlineObject76: inlineObject76).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update pull request review protection
     - PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.  **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#update-pull-request-review-protection
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter inlineObject76: (body)  (optional)
     - returns: RequestBuilder<ProtectedBranchPullRequestReview> 
     */
    open class func reposUpdatePullRequestReviewProtectionWithRequestBuilder(owner: String, repo: String, branch: String, inlineObject76: InlineObject76? = nil) -> RequestBuilder<ProtectedBranchPullRequestReview> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject76)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ProtectedBranchPullRequestReview>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a release
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter releaseId: (path) release_id parameter 
     - parameter inlineObject152: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposUpdateRelease(owner: String, repo: String, releaseId: Int, inlineObject152: InlineObject152? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Release?,_ error: Error?) -> Void)) {
        reposUpdateReleaseWithRequestBuilder(owner: owner, repo: repo, releaseId: releaseId, inlineObject152: inlineObject152).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a release
     - PATCH /repos/{owner}/{repo}/releases/{release_id}
     - Users with push access to the repository can edit a release.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#update-a-release
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter releaseId: (path) release_id parameter 
     - parameter inlineObject152: (body)  (optional)
     - returns: RequestBuilder<Release> 
     */
    open class func reposUpdateReleaseWithRequestBuilder(owner: String, repo: String, releaseId: Int, inlineObject152: InlineObject152? = nil) -> RequestBuilder<Release> {
        var path = "/repos/{owner}/{repo}/releases/{release_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let releaseIdPreEscape = "\(APIHelper.mapValueToPathItem(releaseId))"
        let releaseIdPostEscape = releaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{release_id}", with: releaseIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject152)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Release>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a release asset
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter assetId: (path) asset_id parameter 
     - parameter inlineObject151: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposUpdateReleaseAsset(owner: String, repo: String, assetId: Int, inlineObject151: InlineObject151? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: ReleaseAsset?,_ error: Error?) -> Void)) {
        reposUpdateReleaseAssetWithRequestBuilder(owner: owner, repo: repo, assetId: assetId, inlineObject151: inlineObject151).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a release asset
     - PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}
     - Users with push access to the repository can edit a release asset.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#update-a-release-asset
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter assetId: (path) asset_id parameter 
     - parameter inlineObject151: (body)  (optional)
     - returns: RequestBuilder<ReleaseAsset> 
     */
    open class func reposUpdateReleaseAssetWithRequestBuilder(owner: String, repo: String, assetId: Int, inlineObject151: InlineObject151? = nil) -> RequestBuilder<ReleaseAsset> {
        var path = "/repos/{owner}/{repo}/releases/assets/{asset_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let assetIdPreEscape = "\(APIHelper.mapValueToPathItem(assetId))"
        let assetIdPostEscape = assetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{asset_id}", with: assetIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject151)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ReleaseAsset>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update status check protection
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter inlineObject77: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposUpdateStatusCheckProtection(owner: String, repo: String, branch: String, inlineObject77: InlineObject77? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: StatusCheckPolicy?,_ error: Error?) -> Void)) {
        reposUpdateStatusCheckProtectionWithRequestBuilder(owner: owner, repo: repo, branch: branch, inlineObject77: inlineObject77).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update status check protection
     - PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks
     - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#update-status-check-potection
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter branch: (path) The name of the branch. 
     - parameter inlineObject77: (body)  (optional)
     - returns: RequestBuilder<StatusCheckPolicy> 
     */
    open class func reposUpdateStatusCheckProtectionWithRequestBuilder(owner: String, repo: String, branch: String, inlineObject77: InlineObject77? = nil) -> RequestBuilder<StatusCheckPolicy> {
        var path = "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(APIHelper.mapValueToPathItem(branch))"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject77)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<StatusCheckPolicy>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a repository webhook
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter hookId: (path)  
     - parameter inlineObject111: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposUpdateWebhook(owner: String, repo: String, hookId: Int, inlineObject111: InlineObject111? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Hook?,_ error: Error?) -> Void)) {
        reposUpdateWebhookWithRequestBuilder(owner: owner, repo: repo, hookId: hookId, inlineObject111: inlineObject111).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a repository webhook
     - PATCH /repos/{owner}/{repo}/hooks/{hook_id}
     - Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use \"[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository).\"
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#update-a-repository-webhook
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter hookId: (path)  
     - parameter inlineObject111: (body)  (optional)
     - returns: RequestBuilder<Hook> 
     */
    open class func reposUpdateWebhookWithRequestBuilder(owner: String, repo: String, hookId: Int, inlineObject111: InlineObject111? = nil) -> RequestBuilder<Hook> {
        var path = "/repos/{owner}/{repo}/hooks/{hook_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let hookIdPreEscape = "\(APIHelper.mapValueToPathItem(hookId))"
        let hookIdPostEscape = hookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{hook_id}", with: hookIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject111)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Hook>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a webhook configuration for a repository
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter hookId: (path)  
     - parameter inlineObject112: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposUpdateWebhookConfigForRepo(owner: String, repo: String, hookId: Int, inlineObject112: InlineObject112? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: WebhookConfig?,_ error: Error?) -> Void)) {
        reposUpdateWebhookConfigForRepoWithRequestBuilder(owner: owner, repo: repo, hookId: hookId, inlineObject112: inlineObject112).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a webhook configuration for a repository
     - PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config
     - Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use \"[Update a repository webhook](/rest/reference/orgs#update-a-repository-webhook).\"  Access tokens must have the `write:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:write` permission.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/repos#update-a-webhook-configuration-for-a-repository
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter hookId: (path)  
     - parameter inlineObject112: (body)  (optional)
     - returns: RequestBuilder<WebhookConfig> 
     */
    open class func reposUpdateWebhookConfigForRepoWithRequestBuilder(owner: String, repo: String, hookId: Int, inlineObject112: InlineObject112? = nil) -> RequestBuilder<WebhookConfig> {
        var path = "/repos/{owner}/{repo}/hooks/{hook_id}/config"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let hookIdPreEscape = "\(APIHelper.mapValueToPathItem(hookId))"
        let hookIdPostEscape = hookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{hook_id}", with: hookIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject112)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WebhookConfig>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Upload a release asset
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter releaseId: (path) release_id parameter 
     - parameter name: (query)  (optional)
     - parameter label: (query)  (optional)
     - parameter body: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposUploadReleaseAsset(owner: String, repo: String, releaseId: Int, name: String? = nil, label: String? = nil, body: String? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: ReleaseAsset?,_ error: Error?) -> Void)) {
        reposUploadReleaseAssetWithRequestBuilder(owner: owner, repo: repo, releaseId: releaseId, name: name, label: label, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Upload a release asset
     - POST /repos/{owner}/{repo}/releases/{release_id}/assets
     - This endpoint makes use of [a Hypermedia relation](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in the response of the [Create a release endpoint](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#create-a-release) to upload a release asset.  You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.  Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:   `application/zip`  GitHub Enterprise Server expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example, you'll still need to pass your authentication to be able to upload an asset.  When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.  **Notes:** *   GitHub Enterprise Server renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The \"[List assets for a release](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-assets-for-a-release)\" endpoint lists the renamed filenames. For more information and help, contact [GitHub Enterprise Server Support](https://support.github.com/contact). *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/repos#upload-a-release-asset
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter releaseId: (path) release_id parameter 
     - parameter name: (query)  (optional)
     - parameter label: (query)  (optional)
     - parameter body: (body)  (optional)
     - returns: RequestBuilder<ReleaseAsset> 
     */
    open class func reposUploadReleaseAssetWithRequestBuilder(owner: String, repo: String, releaseId: Int, name: String? = nil, label: String? = nil, body: String? = nil) -> RequestBuilder<ReleaseAsset> {
        var path = "/repos/{owner}/{repo}/releases/{release_id}/assets"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let releaseIdPreEscape = "\(APIHelper.mapValueToPathItem(releaseId))"
        let releaseIdPostEscape = releaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{release_id}", with: releaseIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name?.encodeToJSON(), 
            "label": label?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ReleaseAsset>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
