//
// IssuesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class IssuesAPI {
    /**
     Add assignees to an issue
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter inlineObject118: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesAddAssignees(owner: String, repo: String, issueNumber: Int, inlineObject118: InlineObject118? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: IssueSimple?,_ error: Error?) -> Void)) {
        issuesAddAssigneesWithRequestBuilder(owner: owner, repo: repo, issueNumber: issueNumber, inlineObject118: inlineObject118).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add assignees to an issue
     - POST /repos/{owner}/{repo}/issues/{issue_number}/assignees
     - Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/issues#add-assignees-to-an-issue
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter inlineObject118: (body)  (optional)
     - returns: RequestBuilder<IssueSimple> 
     */
    open class func issuesAddAssigneesWithRequestBuilder(owner: String, repo: String, issueNumber: Int, inlineObject118: InlineObject118? = nil) -> RequestBuilder<IssueSimple> {
        var path = "/repos/{owner}/{repo}/issues/{issue_number}/assignees"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let issueNumberPreEscape = "\(APIHelper.mapValueToPathItem(issueNumber))"
        let issueNumberPostEscape = issueNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{issue_number}", with: issueNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject118)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IssueSimple>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Add labels to an issue
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter inlineObject122: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesAddLabels(owner: String, repo: String, issueNumber: Int, inlineObject122: InlineObject122? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Label]?,_ error: Error?) -> Void)) {
        issuesAddLabelsWithRequestBuilder(owner: owner, repo: repo, issueNumber: issueNumber, inlineObject122: inlineObject122).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add labels to an issue
     - POST /repos/{owner}/{repo}/issues/{issue_number}/labels
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/issues#add-labels-to-an-issue
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter inlineObject122: (body)  (optional)
     - returns: RequestBuilder<[Label]> 
     */
    open class func issuesAddLabelsWithRequestBuilder(owner: String, repo: String, issueNumber: Int, inlineObject122: InlineObject122? = nil) -> RequestBuilder<[Label]> {
        var path = "/repos/{owner}/{repo}/issues/{issue_number}/labels"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let issueNumberPreEscape = "\(APIHelper.mapValueToPathItem(issueNumber))"
        let issueNumberPostEscape = issueNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{issue_number}", with: issueNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject122)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Label]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Check if a user can be assigned
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter assignee: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesCheckUserCanBeAssigned(owner: String, repo: String, assignee: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        issuesCheckUserCanBeAssignedWithRequestBuilder(owner: owner, repo: repo, assignee: assignee).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Check if a user can be assigned
     - GET /repos/{owner}/{repo}/assignees/{assignee}
     - Checks if a user has permission to be assigned to an issue in this repository.  If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.  Otherwise a `404` status code is returned.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/issues#check-if-a-user-can-be-assigned
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter assignee: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func issuesCheckUserCanBeAssignedWithRequestBuilder(owner: String, repo: String, assignee: String) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/assignees/{assignee}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let assigneePreEscape = "\(APIHelper.mapValueToPathItem(assignee))"
        let assigneePostEscape = assigneePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{assignee}", with: assigneePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create an issue
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject114: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesCreate(owner: String, repo: String, inlineObject114: InlineObject114? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Issue?,_ error: Error?) -> Void)) {
        issuesCreateWithRequestBuilder(owner: owner, repo: repo, inlineObject114: inlineObject114).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create an issue
     - POST /repos/{owner}/{repo}/issues
     - Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://help.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)\" for details.
     - responseHeaders: [Location(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/issues/#create-an-issue
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject114: (body)  (optional)
     - returns: RequestBuilder<Issue> 
     */
    open class func issuesCreateWithRequestBuilder(owner: String, repo: String, inlineObject114: InlineObject114? = nil) -> RequestBuilder<Issue> {
        var path = "/repos/{owner}/{repo}/issues"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject114)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Issue>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create an issue comment
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter inlineObject120: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesCreateComment(owner: String, repo: String, issueNumber: Int, inlineObject120: InlineObject120? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: IssueComment?,_ error: Error?) -> Void)) {
        issuesCreateCommentWithRequestBuilder(owner: owner, repo: repo, issueNumber: issueNumber, inlineObject120: inlineObject120).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create an issue comment
     - POST /repos/{owner}/{repo}/issues/{issue_number}/comments
     - This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)\" for details.
     - responseHeaders: [Location(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/issues#create-an-issue-comment
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter inlineObject120: (body)  (optional)
     - returns: RequestBuilder<IssueComment> 
     */
    open class func issuesCreateCommentWithRequestBuilder(owner: String, repo: String, issueNumber: Int, inlineObject120: InlineObject120? = nil) -> RequestBuilder<IssueComment> {
        var path = "/repos/{owner}/{repo}/issues/{issue_number}/comments"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let issueNumberPreEscape = "\(APIHelper.mapValueToPathItem(issueNumber))"
        let issueNumberPostEscape = issueNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{issue_number}", with: issueNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject120)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IssueComment>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a label
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject126: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesCreateLabel(owner: String, repo: String, inlineObject126: InlineObject126? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Label?,_ error: Error?) -> Void)) {
        issuesCreateLabelWithRequestBuilder(owner: owner, repo: repo, inlineObject126: inlineObject126).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a label
     - POST /repos/{owner}/{repo}/labels
     - responseHeaders: [Location(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/issues#create-a-label
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject126: (body)  (optional)
     - returns: RequestBuilder<Label> 
     */
    open class func issuesCreateLabelWithRequestBuilder(owner: String, repo: String, inlineObject126: InlineObject126? = nil) -> RequestBuilder<Label> {
        var path = "/repos/{owner}/{repo}/labels"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject126)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Label>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a milestone
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject129: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesCreateMilestone(owner: String, repo: String, inlineObject129: InlineObject129? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Milestone?,_ error: Error?) -> Void)) {
        issuesCreateMilestoneWithRequestBuilder(owner: owner, repo: repo, inlineObject129: inlineObject129).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a milestone
     - POST /repos/{owner}/{repo}/milestones
     - responseHeaders: [Location(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/issues#create-a-milestone
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject129: (body)  (optional)
     - returns: RequestBuilder<Milestone> 
     */
    open class func issuesCreateMilestoneWithRequestBuilder(owner: String, repo: String, inlineObject129: InlineObject129? = nil) -> RequestBuilder<Milestone> {
        var path = "/repos/{owner}/{repo}/milestones"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject129)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Milestone>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete an issue comment
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesDeleteComment(owner: String, repo: String, commentId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        issuesDeleteCommentWithRequestBuilder(owner: owner, repo: repo, commentId: commentId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete an issue comment
     - DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/issues#delete-an-issue-comment
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - returns: RequestBuilder<Void> 
     */
    open class func issuesDeleteCommentWithRequestBuilder(owner: String, repo: String, commentId: Int) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/issues/comments/{comment_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(APIHelper.mapValueToPathItem(commentId))"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_id}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a label
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter name: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesDeleteLabel(owner: String, repo: String, name: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        issuesDeleteLabelWithRequestBuilder(owner: owner, repo: repo, name: name).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a label
     - DELETE /repos/{owner}/{repo}/labels/{name}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/issues#delete-a-label
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter name: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func issuesDeleteLabelWithRequestBuilder(owner: String, repo: String, name: String) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/labels/{name}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a milestone
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter milestoneNumber: (path) milestone_number parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesDeleteMilestone(owner: String, repo: String, milestoneNumber: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        issuesDeleteMilestoneWithRequestBuilder(owner: owner, repo: repo, milestoneNumber: milestoneNumber).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a milestone
     - DELETE /repos/{owner}/{repo}/milestones/{milestone_number}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/issues#delete-a-milestone
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter milestoneNumber: (path) milestone_number parameter 
     - returns: RequestBuilder<Void> 
     */
    open class func issuesDeleteMilestoneWithRequestBuilder(owner: String, repo: String, milestoneNumber: Int) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/milestones/{milestone_number}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let milestoneNumberPreEscape = "\(APIHelper.mapValueToPathItem(milestoneNumber))"
        let milestoneNumberPostEscape = milestoneNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{milestone_number}", with: milestoneNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get an issue
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesGet(owner: String, repo: String, issueNumber: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Issue?,_ error: Error?) -> Void)) {
        issuesGetWithRequestBuilder(owner: owner, repo: repo, issueNumber: issueNumber).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get an issue
     - GET /repos/{owner}/{repo}/issues/{issue_number}
     - The API returns a [`301 Moved Permanently` status](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was [transferred](https://help.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe to the [`issues`](https://docs.github.com/enterprise-server@3.0/webhooks/event-payloads/#issues) webhook.  **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-pull-requests)\" endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/issues/#get-an-issue
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - returns: RequestBuilder<Issue> 
     */
    open class func issuesGetWithRequestBuilder(owner: String, repo: String, issueNumber: Int) -> RequestBuilder<Issue> {
        var path = "/repos/{owner}/{repo}/issues/{issue_number}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let issueNumberPreEscape = "\(APIHelper.mapValueToPathItem(issueNumber))"
        let issueNumberPostEscape = issueNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{issue_number}", with: issueNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Issue>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get an issue comment
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesGetComment(owner: String, repo: String, commentId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: IssueComment?,_ error: Error?) -> Void)) {
        issuesGetCommentWithRequestBuilder(owner: owner, repo: repo, commentId: commentId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get an issue comment
     - GET /repos/{owner}/{repo}/issues/comments/{comment_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/issues#get-an-issue-comment
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - returns: RequestBuilder<IssueComment> 
     */
    open class func issuesGetCommentWithRequestBuilder(owner: String, repo: String, commentId: Int) -> RequestBuilder<IssueComment> {
        var path = "/repos/{owner}/{repo}/issues/comments/{comment_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(APIHelper.mapValueToPathItem(commentId))"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_id}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IssueComment>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get an issue event
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter eventId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesGetEvent(owner: String, repo: String, eventId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: IssueEvent?,_ error: Error?) -> Void)) {
        issuesGetEventWithRequestBuilder(owner: owner, repo: repo, eventId: eventId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get an issue event
     - GET /repos/{owner}/{repo}/issues/events/{event_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/issues#get-an-issue-event
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter eventId: (path)  
     - returns: RequestBuilder<IssueEvent> 
     */
    open class func issuesGetEventWithRequestBuilder(owner: String, repo: String, eventId: Int) -> RequestBuilder<IssueEvent> {
        var path = "/repos/{owner}/{repo}/issues/events/{event_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let eventIdPreEscape = "\(APIHelper.mapValueToPathItem(eventId))"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{event_id}", with: eventIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IssueEvent>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a label
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter name: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesGetLabel(owner: String, repo: String, name: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Label?,_ error: Error?) -> Void)) {
        issuesGetLabelWithRequestBuilder(owner: owner, repo: repo, name: name).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a label
     - GET /repos/{owner}/{repo}/labels/{name}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/issues#get-a-label
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter name: (path)  
     - returns: RequestBuilder<Label> 
     */
    open class func issuesGetLabelWithRequestBuilder(owner: String, repo: String, name: String) -> RequestBuilder<Label> {
        var path = "/repos/{owner}/{repo}/labels/{name}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Label>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a milestone
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter milestoneNumber: (path) milestone_number parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesGetMilestone(owner: String, repo: String, milestoneNumber: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Milestone?,_ error: Error?) -> Void)) {
        issuesGetMilestoneWithRequestBuilder(owner: owner, repo: repo, milestoneNumber: milestoneNumber).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a milestone
     - GET /repos/{owner}/{repo}/milestones/{milestone_number}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/issues#get-a-milestone
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter milestoneNumber: (path) milestone_number parameter 
     - returns: RequestBuilder<Milestone> 
     */
    open class func issuesGetMilestoneWithRequestBuilder(owner: String, repo: String, milestoneNumber: Int) -> RequestBuilder<Milestone> {
        var path = "/repos/{owner}/{repo}/milestones/{milestone_number}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let milestoneNumberPreEscape = "\(APIHelper.mapValueToPathItem(milestoneNumber))"
        let milestoneNumberPostEscape = milestoneNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{milestone_number}", with: milestoneNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Milestone>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter filter
     */
    public enum Filter_issuesList: String, CaseIterable {
        case assigned = "assigned"
        case created = "created"
        case mentioned = "mentioned"
        case subscribed = "subscribed"
        case all = "all"
    }

    /**
     * enum for parameter state
     */
    public enum State_issuesList: String, CaseIterable {
        case _open = "open"
        case closed = "closed"
        case all = "all"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_issuesList: String, CaseIterable {
        case created = "created"
        case updated = "updated"
        case comments = "comments"
    }

    /**
     * enum for parameter direction
     */
    public enum Direction_issuesList: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     List issues assigned to the authenticated user
     
     - parameter filter: (query) Indicates which sorts of issues to return. Can be one of:   \\* &#x60;assigned&#x60;: Issues assigned to you   \\* &#x60;created&#x60;: Issues created by you   \\* &#x60;mentioned&#x60;: Issues mentioning you   \\* &#x60;subscribed&#x60;: Issues you&#39;re subscribed to updates for   \\* &#x60;all&#x60;: All issues the authenticated user can see, regardless of participation or creation (optional, default to .assigned)
     - parameter state: (query) Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to ._open)
     - parameter labels: (query) A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60; (optional)
     - parameter sort: (query) What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;. (optional, default to .created)
     - parameter direction: (query) One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to .desc)
     - parameter since: (query) Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     - parameter collab: (query)  (optional)
     - parameter orgs: (query)  (optional)
     - parameter owned: (query)  (optional)
     - parameter pulls: (query)  (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesList(filter: Filter_issuesList? = nil, state: State_issuesList? = nil, labels: String? = nil, sort: Sort_issuesList? = nil, direction: Direction_issuesList? = nil, since: String? = nil, collab: Bool? = nil, orgs: Bool? = nil, owned: Bool? = nil, pulls: Bool? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Issue]?,_ error: Error?) -> Void)) {
        issuesListWithRequestBuilder(filter: filter, state: state, labels: labels, sort: sort, direction: direction, since: since, collab: collab, orgs: orgs, owned: owned, pulls: pulls, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List issues assigned to the authenticated user
     - GET /issues
     - List issues assigned to the authenticated user across all visible repositories including owned repositories, member repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not necessarily assigned to you.   **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-pull-requests)\" endpoint.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/issues/#list-issues-assigned-to-the-authenticated-user
}
     - parameter filter: (query) Indicates which sorts of issues to return. Can be one of:   \\* &#x60;assigned&#x60;: Issues assigned to you   \\* &#x60;created&#x60;: Issues created by you   \\* &#x60;mentioned&#x60;: Issues mentioning you   \\* &#x60;subscribed&#x60;: Issues you&#39;re subscribed to updates for   \\* &#x60;all&#x60;: All issues the authenticated user can see, regardless of participation or creation (optional, default to .assigned)
     - parameter state: (query) Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to ._open)
     - parameter labels: (query) A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60; (optional)
     - parameter sort: (query) What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;. (optional, default to .created)
     - parameter direction: (query) One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to .desc)
     - parameter since: (query) Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     - parameter collab: (query)  (optional)
     - parameter orgs: (query)  (optional)
     - parameter owned: (query)  (optional)
     - parameter pulls: (query)  (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[Issue]> 
     */
    open class func issuesListWithRequestBuilder(filter: Filter_issuesList? = nil, state: State_issuesList? = nil, labels: String? = nil, sort: Sort_issuesList? = nil, direction: Direction_issuesList? = nil, since: String? = nil, collab: Bool? = nil, orgs: Bool? = nil, owned: Bool? = nil, pulls: Bool? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[Issue]> {
        let path = "/issues"
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter": filter?.encodeToJSON(), 
            "state": state?.encodeToJSON(), 
            "labels": labels?.encodeToJSON(), 
            "sort": sort?.encodeToJSON(), 
            "direction": direction?.encodeToJSON(), 
            "since": since?.encodeToJSON(), 
            "collab": collab?.encodeToJSON(), 
            "orgs": orgs?.encodeToJSON(), 
            "owned": owned?.encodeToJSON(), 
            "pulls": pulls?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Issue]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List assignees
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesListAssignees(owner: String, repo: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [SimpleUser]?,_ error: Error?) -> Void)) {
        issuesListAssigneesWithRequestBuilder(owner: owner, repo: repo, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List assignees
     - GET /repos/{owner}/{repo}/assignees
     - Lists the [available assignees](https://help.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-assignees
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[SimpleUser]> 
     */
    open class func issuesListAssigneesWithRequestBuilder(owner: String, repo: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[SimpleUser]> {
        var path = "/repos/{owner}/{repo}/assignees"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[SimpleUser]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List issue comments
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter since: (query) Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesListComments(owner: String, repo: String, issueNumber: Int, since: String? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [IssueComment]?,_ error: Error?) -> Void)) {
        issuesListCommentsWithRequestBuilder(owner: owner, repo: repo, issueNumber: issueNumber, since: since, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List issue comments
     - GET /repos/{owner}/{repo}/issues/{issue_number}/comments
     - Issue Comments are ordered by ascending ID.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-issue-comments
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter since: (query) Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[IssueComment]> 
     */
    open class func issuesListCommentsWithRequestBuilder(owner: String, repo: String, issueNumber: Int, since: String? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[IssueComment]> {
        var path = "/repos/{owner}/{repo}/issues/{issue_number}/comments"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let issueNumberPreEscape = "\(APIHelper.mapValueToPathItem(issueNumber))"
        let issueNumberPostEscape = issueNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{issue_number}", with: issueNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "since": since?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[IssueComment]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_issuesListCommentsForRepo: String, CaseIterable {
        case created = "created"
        case updated = "updated"
    }

    /**
     * enum for parameter direction
     */
    public enum Direction_issuesListCommentsForRepo: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     List issue comments for a repository
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter sort: (query) One of &#x60;created&#x60; (when the repository was starred) or &#x60;updated&#x60; (when it was last pushed to). (optional, default to .created)
     - parameter direction: (query) Either &#x60;asc&#x60; or &#x60;desc&#x60;. Ignored without the &#x60;sort&#x60; parameter. (optional)
     - parameter since: (query) Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesListCommentsForRepo(owner: String, repo: String, sort: Sort_issuesListCommentsForRepo? = nil, direction: Direction_issuesListCommentsForRepo? = nil, since: String? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [IssueComment]?,_ error: Error?) -> Void)) {
        issuesListCommentsForRepoWithRequestBuilder(owner: owner, repo: repo, sort: sort, direction: direction, since: since, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List issue comments for a repository
     - GET /repos/{owner}/{repo}/issues/comments
     - By default, Issue Comments are ordered by ascending ID.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-issue-comments-for-a-repository
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter sort: (query) One of &#x60;created&#x60; (when the repository was starred) or &#x60;updated&#x60; (when it was last pushed to). (optional, default to .created)
     - parameter direction: (query) Either &#x60;asc&#x60; or &#x60;desc&#x60;. Ignored without the &#x60;sort&#x60; parameter. (optional)
     - parameter since: (query) Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[IssueComment]> 
     */
    open class func issuesListCommentsForRepoWithRequestBuilder(owner: String, repo: String, sort: Sort_issuesListCommentsForRepo? = nil, direction: Direction_issuesListCommentsForRepo? = nil, since: String? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[IssueComment]> {
        var path = "/repos/{owner}/{repo}/issues/comments"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "sort": sort?.encodeToJSON(), 
            "direction": direction?.encodeToJSON(), 
            "since": since?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[IssueComment]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List issue events
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesListEvents(owner: String, repo: String, issueNumber: Int, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [IssueEventForIssue]?,_ error: Error?) -> Void)) {
        issuesListEventsWithRequestBuilder(owner: owner, repo: repo, issueNumber: issueNumber, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List issue events
     - GET /repos/{owner}/{repo}/issues/{issue_number}/events
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-issue-events
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[IssueEventForIssue]> 
     */
    open class func issuesListEventsWithRequestBuilder(owner: String, repo: String, issueNumber: Int, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[IssueEventForIssue]> {
        var path = "/repos/{owner}/{repo}/issues/{issue_number}/events"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let issueNumberPreEscape = "\(APIHelper.mapValueToPathItem(issueNumber))"
        let issueNumberPostEscape = issueNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{issue_number}", with: issueNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[IssueEventForIssue]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List issue events for a repository
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesListEventsForRepo(owner: String, repo: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [IssueEvent]?,_ error: Error?) -> Void)) {
        issuesListEventsForRepoWithRequestBuilder(owner: owner, repo: repo, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List issue events for a repository
     - GET /repos/{owner}/{repo}/issues/events
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-issue-events-for-a-repository
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[IssueEvent]> 
     */
    open class func issuesListEventsForRepoWithRequestBuilder(owner: String, repo: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[IssueEvent]> {
        var path = "/repos/{owner}/{repo}/issues/events"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[IssueEvent]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List timeline events for an issue
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesListEventsForTimeline(owner: String, repo: String, issueNumber: Int, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [IssueEventForIssue]?,_ error: Error?) -> Void)) {
        issuesListEventsForTimelineWithRequestBuilder(owner: owner, repo: repo, issueNumber: issueNumber, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List timeline events for an issue
     - GET /repos/{owner}/{repo}/issues/{issue_number}/timeline
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-timeline-events-for-an-issue
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[IssueEventForIssue]> 
     */
    open class func issuesListEventsForTimelineWithRequestBuilder(owner: String, repo: String, issueNumber: Int, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[IssueEventForIssue]> {
        var path = "/repos/{owner}/{repo}/issues/{issue_number}/timeline"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let issueNumberPreEscape = "\(APIHelper.mapValueToPathItem(issueNumber))"
        let issueNumberPostEscape = issueNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{issue_number}", with: issueNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[IssueEventForIssue]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter filter
     */
    public enum Filter_issuesListForAuthenticatedUser: String, CaseIterable {
        case assigned = "assigned"
        case created = "created"
        case mentioned = "mentioned"
        case subscribed = "subscribed"
        case all = "all"
    }

    /**
     * enum for parameter state
     */
    public enum State_issuesListForAuthenticatedUser: String, CaseIterable {
        case _open = "open"
        case closed = "closed"
        case all = "all"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_issuesListForAuthenticatedUser: String, CaseIterable {
        case created = "created"
        case updated = "updated"
        case comments = "comments"
    }

    /**
     * enum for parameter direction
     */
    public enum Direction_issuesListForAuthenticatedUser: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     List user account issues assigned to the authenticated user
     
     - parameter filter: (query) Indicates which sorts of issues to return. Can be one of:   \\* &#x60;assigned&#x60;: Issues assigned to you   \\* &#x60;created&#x60;: Issues created by you   \\* &#x60;mentioned&#x60;: Issues mentioning you   \\* &#x60;subscribed&#x60;: Issues you&#39;re subscribed to updates for   \\* &#x60;all&#x60;: All issues the authenticated user can see, regardless of participation or creation (optional, default to .assigned)
     - parameter state: (query) Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to ._open)
     - parameter labels: (query) A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60; (optional)
     - parameter sort: (query) What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;. (optional, default to .created)
     - parameter direction: (query) One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to .desc)
     - parameter since: (query) Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesListForAuthenticatedUser(filter: Filter_issuesListForAuthenticatedUser? = nil, state: State_issuesListForAuthenticatedUser? = nil, labels: String? = nil, sort: Sort_issuesListForAuthenticatedUser? = nil, direction: Direction_issuesListForAuthenticatedUser? = nil, since: String? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Issue]?,_ error: Error?) -> Void)) {
        issuesListForAuthenticatedUserWithRequestBuilder(filter: filter, state: state, labels: labels, sort: sort, direction: direction, since: since, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List user account issues assigned to the authenticated user
     - GET /user/issues
     - List issues across owned and member repositories assigned to the authenticated user.  **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-pull-requests)\" endpoint.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/issues/#list-user-account-issues-assigned-to-the-authenticated-user
}
     - parameter filter: (query) Indicates which sorts of issues to return. Can be one of:   \\* &#x60;assigned&#x60;: Issues assigned to you   \\* &#x60;created&#x60;: Issues created by you   \\* &#x60;mentioned&#x60;: Issues mentioning you   \\* &#x60;subscribed&#x60;: Issues you&#39;re subscribed to updates for   \\* &#x60;all&#x60;: All issues the authenticated user can see, regardless of participation or creation (optional, default to .assigned)
     - parameter state: (query) Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to ._open)
     - parameter labels: (query) A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60; (optional)
     - parameter sort: (query) What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;. (optional, default to .created)
     - parameter direction: (query) One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to .desc)
     - parameter since: (query) Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[Issue]> 
     */
    open class func issuesListForAuthenticatedUserWithRequestBuilder(filter: Filter_issuesListForAuthenticatedUser? = nil, state: State_issuesListForAuthenticatedUser? = nil, labels: String? = nil, sort: Sort_issuesListForAuthenticatedUser? = nil, direction: Direction_issuesListForAuthenticatedUser? = nil, since: String? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[Issue]> {
        let path = "/user/issues"
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter": filter?.encodeToJSON(), 
            "state": state?.encodeToJSON(), 
            "labels": labels?.encodeToJSON(), 
            "sort": sort?.encodeToJSON(), 
            "direction": direction?.encodeToJSON(), 
            "since": since?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Issue]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter filter
     */
    public enum Filter_issuesListForOrg: String, CaseIterable {
        case assigned = "assigned"
        case created = "created"
        case mentioned = "mentioned"
        case subscribed = "subscribed"
        case all = "all"
    }

    /**
     * enum for parameter state
     */
    public enum State_issuesListForOrg: String, CaseIterable {
        case _open = "open"
        case closed = "closed"
        case all = "all"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_issuesListForOrg: String, CaseIterable {
        case created = "created"
        case updated = "updated"
        case comments = "comments"
    }

    /**
     * enum for parameter direction
     */
    public enum Direction_issuesListForOrg: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     List organization issues assigned to the authenticated user
     
     - parameter org: (path)  
     - parameter filter: (query) Indicates which sorts of issues to return. Can be one of:   \\* &#x60;assigned&#x60;: Issues assigned to you   \\* &#x60;created&#x60;: Issues created by you   \\* &#x60;mentioned&#x60;: Issues mentioning you   \\* &#x60;subscribed&#x60;: Issues you&#39;re subscribed to updates for   \\* &#x60;all&#x60;: All issues the authenticated user can see, regardless of participation or creation (optional, default to .assigned)
     - parameter state: (query) Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to ._open)
     - parameter labels: (query) A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60; (optional)
     - parameter sort: (query) What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;. (optional, default to .created)
     - parameter direction: (query) One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to .desc)
     - parameter since: (query) Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesListForOrg(org: String, filter: Filter_issuesListForOrg? = nil, state: State_issuesListForOrg? = nil, labels: String? = nil, sort: Sort_issuesListForOrg? = nil, direction: Direction_issuesListForOrg? = nil, since: String? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Issue]?,_ error: Error?) -> Void)) {
        issuesListForOrgWithRequestBuilder(org: org, filter: filter, state: state, labels: labels, sort: sort, direction: direction, since: since, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List organization issues assigned to the authenticated user
     - GET /orgs/{org}/issues
     - List issues in an organization assigned to the authenticated user.  **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-pull-requests)\" endpoint.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/issues/#list-organization-issues-assigned-to-the-authenticated-user
}
     - parameter org: (path)  
     - parameter filter: (query) Indicates which sorts of issues to return. Can be one of:   \\* &#x60;assigned&#x60;: Issues assigned to you   \\* &#x60;created&#x60;: Issues created by you   \\* &#x60;mentioned&#x60;: Issues mentioning you   \\* &#x60;subscribed&#x60;: Issues you&#39;re subscribed to updates for   \\* &#x60;all&#x60;: All issues the authenticated user can see, regardless of participation or creation (optional, default to .assigned)
     - parameter state: (query) Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to ._open)
     - parameter labels: (query) A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60; (optional)
     - parameter sort: (query) What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;. (optional, default to .created)
     - parameter direction: (query) One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to .desc)
     - parameter since: (query) Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[Issue]> 
     */
    open class func issuesListForOrgWithRequestBuilder(org: String, filter: Filter_issuesListForOrg? = nil, state: State_issuesListForOrg? = nil, labels: String? = nil, sort: Sort_issuesListForOrg? = nil, direction: Direction_issuesListForOrg? = nil, since: String? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[Issue]> {
        var path = "/orgs/{org}/issues"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter": filter?.encodeToJSON(), 
            "state": state?.encodeToJSON(), 
            "labels": labels?.encodeToJSON(), 
            "sort": sort?.encodeToJSON(), 
            "direction": direction?.encodeToJSON(), 
            "since": since?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Issue]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter state
     */
    public enum State_issuesListForRepo: String, CaseIterable {
        case _open = "open"
        case closed = "closed"
        case all = "all"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_issuesListForRepo: String, CaseIterable {
        case created = "created"
        case updated = "updated"
        case comments = "comments"
    }

    /**
     * enum for parameter direction
     */
    public enum Direction_issuesListForRepo: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     List repository issues
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter milestone: (query) If an &#x60;integer&#x60; is passed, it should refer to a milestone by its &#x60;number&#x60; field. If the string &#x60;*&#x60; is passed, issues with any milestone are accepted. If the string &#x60;none&#x60; is passed, issues without milestones are returned. (optional)
     - parameter state: (query) Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to ._open)
     - parameter assignee: (query) Can be the name of a user. Pass in &#x60;none&#x60; for issues with no assigned user, and &#x60;*&#x60; for issues assigned to any user. (optional)
     - parameter creator: (query) The user that created the issue. (optional)
     - parameter mentioned: (query) A user that&#39;s mentioned in the issue. (optional)
     - parameter labels: (query) A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60; (optional)
     - parameter sort: (query) What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;. (optional, default to .created)
     - parameter direction: (query) One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to .desc)
     - parameter since: (query) Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesListForRepo(owner: String, repo: String, milestone: String? = nil, state: State_issuesListForRepo? = nil, assignee: String? = nil, creator: String? = nil, mentioned: String? = nil, labels: String? = nil, sort: Sort_issuesListForRepo? = nil, direction: Direction_issuesListForRepo? = nil, since: String? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [IssueSimple]?,_ error: Error?) -> Void)) {
        issuesListForRepoWithRequestBuilder(owner: owner, repo: repo, milestone: milestone, state: state, assignee: assignee, creator: creator, mentioned: mentioned, labels: labels, sort: sort, direction: direction, since: since, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List repository issues
     - GET /repos/{owner}/{repo}/issues
     - List issues in a repository.  **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-pull-requests)\" endpoint.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/issues/#list-repository-issues
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter milestone: (query) If an &#x60;integer&#x60; is passed, it should refer to a milestone by its &#x60;number&#x60; field. If the string &#x60;*&#x60; is passed, issues with any milestone are accepted. If the string &#x60;none&#x60; is passed, issues without milestones are returned. (optional)
     - parameter state: (query) Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to ._open)
     - parameter assignee: (query) Can be the name of a user. Pass in &#x60;none&#x60; for issues with no assigned user, and &#x60;*&#x60; for issues assigned to any user. (optional)
     - parameter creator: (query) The user that created the issue. (optional)
     - parameter mentioned: (query) A user that&#39;s mentioned in the issue. (optional)
     - parameter labels: (query) A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60; (optional)
     - parameter sort: (query) What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;. (optional, default to .created)
     - parameter direction: (query) One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to .desc)
     - parameter since: (query) Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[IssueSimple]> 
     */
    open class func issuesListForRepoWithRequestBuilder(owner: String, repo: String, milestone: String? = nil, state: State_issuesListForRepo? = nil, assignee: String? = nil, creator: String? = nil, mentioned: String? = nil, labels: String? = nil, sort: Sort_issuesListForRepo? = nil, direction: Direction_issuesListForRepo? = nil, since: String? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[IssueSimple]> {
        var path = "/repos/{owner}/{repo}/issues"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "milestone": milestone?.encodeToJSON(), 
            "state": state?.encodeToJSON(), 
            "assignee": assignee?.encodeToJSON(), 
            "creator": creator?.encodeToJSON(), 
            "mentioned": mentioned?.encodeToJSON(), 
            "labels": labels?.encodeToJSON(), 
            "sort": sort?.encodeToJSON(), 
            "direction": direction?.encodeToJSON(), 
            "since": since?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[IssueSimple]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List labels for issues in a milestone
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter milestoneNumber: (path) milestone_number parameter 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesListLabelsForMilestone(owner: String, repo: String, milestoneNumber: Int, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Label]?,_ error: Error?) -> Void)) {
        issuesListLabelsForMilestoneWithRequestBuilder(owner: owner, repo: repo, milestoneNumber: milestoneNumber, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List labels for issues in a milestone
     - GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-labels-for-issues-in-a-milestone
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter milestoneNumber: (path) milestone_number parameter 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[Label]> 
     */
    open class func issuesListLabelsForMilestoneWithRequestBuilder(owner: String, repo: String, milestoneNumber: Int, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[Label]> {
        var path = "/repos/{owner}/{repo}/milestones/{milestone_number}/labels"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let milestoneNumberPreEscape = "\(APIHelper.mapValueToPathItem(milestoneNumber))"
        let milestoneNumberPostEscape = milestoneNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{milestone_number}", with: milestoneNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Label]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List labels for a repository
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesListLabelsForRepo(owner: String, repo: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Label]?,_ error: Error?) -> Void)) {
        issuesListLabelsForRepoWithRequestBuilder(owner: owner, repo: repo, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List labels for a repository
     - GET /repos/{owner}/{repo}/labels
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-labels-for-a-repository
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[Label]> 
     */
    open class func issuesListLabelsForRepoWithRequestBuilder(owner: String, repo: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[Label]> {
        var path = "/repos/{owner}/{repo}/labels"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Label]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List labels for an issue
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesListLabelsOnIssue(owner: String, repo: String, issueNumber: Int, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Label]?,_ error: Error?) -> Void)) {
        issuesListLabelsOnIssueWithRequestBuilder(owner: owner, repo: repo, issueNumber: issueNumber, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List labels for an issue
     - GET /repos/{owner}/{repo}/issues/{issue_number}/labels
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-labels-for-an-issue
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[Label]> 
     */
    open class func issuesListLabelsOnIssueWithRequestBuilder(owner: String, repo: String, issueNumber: Int, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[Label]> {
        var path = "/repos/{owner}/{repo}/issues/{issue_number}/labels"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let issueNumberPreEscape = "\(APIHelper.mapValueToPathItem(issueNumber))"
        let issueNumberPostEscape = issueNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{issue_number}", with: issueNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Label]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter state
     */
    public enum State_issuesListMilestones: String, CaseIterable {
        case _open = "open"
        case closed = "closed"
        case all = "all"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_issuesListMilestones: String, CaseIterable {
        case dueOn = "due_on"
        case completeness = "completeness"
    }

    /**
     * enum for parameter direction
     */
    public enum Direction_issuesListMilestones: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     List milestones
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter state: (query) The state of the milestone. Either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to ._open)
     - parameter sort: (query) What to sort results by. Either &#x60;due_on&#x60; or &#x60;completeness&#x60;. (optional, default to .dueOn)
     - parameter direction: (query) The direction of the sort. Either &#x60;asc&#x60; or &#x60;desc&#x60;. (optional, default to .asc)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesListMilestones(owner: String, repo: String, state: State_issuesListMilestones? = nil, sort: Sort_issuesListMilestones? = nil, direction: Direction_issuesListMilestones? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Milestone]?,_ error: Error?) -> Void)) {
        issuesListMilestonesWithRequestBuilder(owner: owner, repo: repo, state: state, sort: sort, direction: direction, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List milestones
     - GET /repos/{owner}/{repo}/milestones
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/issues#list-milestones
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter state: (query) The state of the milestone. Either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to ._open)
     - parameter sort: (query) What to sort results by. Either &#x60;due_on&#x60; or &#x60;completeness&#x60;. (optional, default to .dueOn)
     - parameter direction: (query) The direction of the sort. Either &#x60;asc&#x60; or &#x60;desc&#x60;. (optional, default to .asc)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[Milestone]> 
     */
    open class func issuesListMilestonesWithRequestBuilder(owner: String, repo: String, state: State_issuesListMilestones? = nil, sort: Sort_issuesListMilestones? = nil, direction: Direction_issuesListMilestones? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[Milestone]> {
        var path = "/repos/{owner}/{repo}/milestones"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "state": state?.encodeToJSON(), 
            "sort": sort?.encodeToJSON(), 
            "direction": direction?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Milestone]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Lock an issue
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter inlineObject123: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesLock(owner: String, repo: String, issueNumber: Int, inlineObject123: InlineObject123? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        issuesLockWithRequestBuilder(owner: owner, repo: repo, issueNumber: issueNumber, inlineObject123: inlineObject123).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Lock an issue
     - PUT /repos/{owner}/{repo}/issues/{issue_number}/lock
     - Users with push access can lock an issue or pull request's conversation.  Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs).\"
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/issues/#lock-an-issue
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter inlineObject123: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func issuesLockWithRequestBuilder(owner: String, repo: String, issueNumber: Int, inlineObject123: InlineObject123? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/issues/{issue_number}/lock"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let issueNumberPreEscape = "\(APIHelper.mapValueToPathItem(issueNumber))"
        let issueNumberPostEscape = issueNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{issue_number}", with: issueNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject123)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Remove all labels from an issue
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesRemoveAllLabels(owner: String, repo: String, issueNumber: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        issuesRemoveAllLabelsWithRequestBuilder(owner: owner, repo: repo, issueNumber: issueNumber).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove all labels from an issue
     - DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/issues#remove-all-labels-from-an-issue
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - returns: RequestBuilder<Void> 
     */
    open class func issuesRemoveAllLabelsWithRequestBuilder(owner: String, repo: String, issueNumber: Int) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/issues/{issue_number}/labels"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let issueNumberPreEscape = "\(APIHelper.mapValueToPathItem(issueNumber))"
        let issueNumberPostEscape = issueNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{issue_number}", with: issueNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove assignees from an issue
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter inlineObject119: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesRemoveAssignees(owner: String, repo: String, issueNumber: Int, inlineObject119: InlineObject119? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: IssueSimple?,_ error: Error?) -> Void)) {
        issuesRemoveAssigneesWithRequestBuilder(owner: owner, repo: repo, issueNumber: issueNumber, inlineObject119: inlineObject119).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove assignees from an issue
     - DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees
     - Removes one or more assignees from an issue.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/issues#remove-assignees-from-an-issue
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter inlineObject119: (body)  (optional)
     - returns: RequestBuilder<IssueSimple> 
     */
    open class func issuesRemoveAssigneesWithRequestBuilder(owner: String, repo: String, issueNumber: Int, inlineObject119: InlineObject119? = nil) -> RequestBuilder<IssueSimple> {
        var path = "/repos/{owner}/{repo}/issues/{issue_number}/assignees"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let issueNumberPreEscape = "\(APIHelper.mapValueToPathItem(issueNumber))"
        let issueNumberPostEscape = issueNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{issue_number}", with: issueNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject119)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IssueSimple>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Remove a label from an issue
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter name: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesRemoveLabel(owner: String, repo: String, issueNumber: Int, name: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Label]?,_ error: Error?) -> Void)) {
        issuesRemoveLabelWithRequestBuilder(owner: owner, repo: repo, issueNumber: issueNumber, name: name).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove a label from an issue
     - DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}
     - Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/issues#remove-a-label-from-an-issue
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter name: (path)  
     - returns: RequestBuilder<[Label]> 
     */
    open class func issuesRemoveLabelWithRequestBuilder(owner: String, repo: String, issueNumber: Int, name: String) -> RequestBuilder<[Label]> {
        var path = "/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let issueNumberPreEscape = "\(APIHelper.mapValueToPathItem(issueNumber))"
        let issueNumberPostEscape = issueNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{issue_number}", with: issueNumberPostEscape, options: .literal, range: nil)
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Label]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set labels for an issue
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter inlineObject121: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesSetLabels(owner: String, repo: String, issueNumber: Int, inlineObject121: InlineObject121? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Label]?,_ error: Error?) -> Void)) {
        issuesSetLabelsWithRequestBuilder(owner: owner, repo: repo, issueNumber: issueNumber, inlineObject121: inlineObject121).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set labels for an issue
     - PUT /repos/{owner}/{repo}/issues/{issue_number}/labels
     - Removes any previous labels and sets the new labels for an issue.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/issues#set-labels-for-an-issue
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter inlineObject121: (body)  (optional)
     - returns: RequestBuilder<[Label]> 
     */
    open class func issuesSetLabelsWithRequestBuilder(owner: String, repo: String, issueNumber: Int, inlineObject121: InlineObject121? = nil) -> RequestBuilder<[Label]> {
        var path = "/repos/{owner}/{repo}/issues/{issue_number}/labels"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let issueNumberPreEscape = "\(APIHelper.mapValueToPathItem(issueNumber))"
        let issueNumberPostEscape = issueNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{issue_number}", with: issueNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject121)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Label]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Unlock an issue
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesUnlock(owner: String, repo: String, issueNumber: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        issuesUnlockWithRequestBuilder(owner: owner, repo: repo, issueNumber: issueNumber).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Unlock an issue
     - DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock
     - Users with push access can unlock an issue's conversation.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/issues/#unlock-an-issue
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - returns: RequestBuilder<Void> 
     */
    open class func issuesUnlockWithRequestBuilder(owner: String, repo: String, issueNumber: Int) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/issues/{issue_number}/lock"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let issueNumberPreEscape = "\(APIHelper.mapValueToPathItem(issueNumber))"
        let issueNumberPostEscape = issueNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{issue_number}", with: issueNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update an issue
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter inlineObject117: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesUpdate(owner: String, repo: String, issueNumber: Int, inlineObject117: InlineObject117? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Issue?,_ error: Error?) -> Void)) {
        issuesUpdateWithRequestBuilder(owner: owner, repo: repo, issueNumber: issueNumber, inlineObject117: inlineObject117).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update an issue
     - PATCH /repos/{owner}/{repo}/issues/{issue_number}
     - Issue owners and users with push access can edit an issue.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/issues/#update-an-issue
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter issueNumber: (path) issue_number parameter 
     - parameter inlineObject117: (body)  (optional)
     - returns: RequestBuilder<Issue> 
     */
    open class func issuesUpdateWithRequestBuilder(owner: String, repo: String, issueNumber: Int, inlineObject117: InlineObject117? = nil) -> RequestBuilder<Issue> {
        var path = "/repos/{owner}/{repo}/issues/{issue_number}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let issueNumberPreEscape = "\(APIHelper.mapValueToPathItem(issueNumber))"
        let issueNumberPostEscape = issueNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{issue_number}", with: issueNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject117)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Issue>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update an issue comment
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - parameter inlineObject115: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesUpdateComment(owner: String, repo: String, commentId: Int, inlineObject115: InlineObject115? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: IssueComment?,_ error: Error?) -> Void)) {
        issuesUpdateCommentWithRequestBuilder(owner: owner, repo: repo, commentId: commentId, inlineObject115: inlineObject115).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update an issue comment
     - PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/issues#update-an-issue-comment
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - parameter inlineObject115: (body)  (optional)
     - returns: RequestBuilder<IssueComment> 
     */
    open class func issuesUpdateCommentWithRequestBuilder(owner: String, repo: String, commentId: Int, inlineObject115: InlineObject115? = nil) -> RequestBuilder<IssueComment> {
        var path = "/repos/{owner}/{repo}/issues/comments/{comment_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(APIHelper.mapValueToPathItem(commentId))"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_id}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject115)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IssueComment>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a label
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter name: (path)  
     - parameter inlineObject127: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesUpdateLabel(owner: String, repo: String, name: String, inlineObject127: InlineObject127? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Label?,_ error: Error?) -> Void)) {
        issuesUpdateLabelWithRequestBuilder(owner: owner, repo: repo, name: name, inlineObject127: inlineObject127).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a label
     - PATCH /repos/{owner}/{repo}/labels/{name}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/issues#update-a-label
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter name: (path)  
     - parameter inlineObject127: (body)  (optional)
     - returns: RequestBuilder<Label> 
     */
    open class func issuesUpdateLabelWithRequestBuilder(owner: String, repo: String, name: String, inlineObject127: InlineObject127? = nil) -> RequestBuilder<Label> {
        var path = "/repos/{owner}/{repo}/labels/{name}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject127)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Label>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a milestone
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter milestoneNumber: (path) milestone_number parameter 
     - parameter inlineObject130: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesUpdateMilestone(owner: String, repo: String, milestoneNumber: Int, inlineObject130: InlineObject130? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Milestone?,_ error: Error?) -> Void)) {
        issuesUpdateMilestoneWithRequestBuilder(owner: owner, repo: repo, milestoneNumber: milestoneNumber, inlineObject130: inlineObject130).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a milestone
     - PATCH /repos/{owner}/{repo}/milestones/{milestone_number}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/issues#update-a-milestone
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter milestoneNumber: (path) milestone_number parameter 
     - parameter inlineObject130: (body)  (optional)
     - returns: RequestBuilder<Milestone> 
     */
    open class func issuesUpdateMilestoneWithRequestBuilder(owner: String, repo: String, milestoneNumber: Int, inlineObject130: InlineObject130? = nil) -> RequestBuilder<Milestone> {
        var path = "/repos/{owner}/{repo}/milestones/{milestone_number}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let milestoneNumberPreEscape = "\(APIHelper.mapValueToPathItem(milestoneNumber))"
        let milestoneNumberPostEscape = milestoneNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{milestone_number}", with: milestoneNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject130)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Milestone>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
