//
// LicensesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class LicensesAPI {
    /**
     Get a license
     
     - parameter license: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func licensesGet(license: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: License?,_ error: Error?) -> Void)) {
        licensesGetWithRequestBuilder(license: license).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a license
     - GET /licenses/{license}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/licenses/#get-a-license
}
     - parameter license: (path)  
     - returns: RequestBuilder<License> 
     */
    open class func licensesGetWithRequestBuilder(license: String) -> RequestBuilder<License> {
        var path = "/licenses/{license}"
        let licensePreEscape = "\(APIHelper.mapValueToPathItem(license))"
        let licensePostEscape = licensePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{license}", with: licensePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<License>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all commonly used licenses
     
     - parameter featured: (query)  (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func licensesGetAllCommonlyUsed(featured: Bool? = nil, perPage: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [LicenseSimple]?,_ error: Error?) -> Void)) {
        licensesGetAllCommonlyUsedWithRequestBuilder(featured: featured, perPage: perPage).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all commonly used licenses
     - GET /licenses
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/licenses/#get-all-commonly-used-licenses
}
     - parameter featured: (query)  (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - returns: RequestBuilder<[LicenseSimple]> 
     */
    open class func licensesGetAllCommonlyUsedWithRequestBuilder(featured: Bool? = nil, perPage: Int? = nil) -> RequestBuilder<[LicenseSimple]> {
        let path = "/licenses"
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "featured": featured?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[LicenseSimple]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the license for a repository
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func licensesGetForRepo(owner: String, repo: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: LicenseContent?,_ error: Error?) -> Void)) {
        licensesGetForRepoWithRequestBuilder(owner: owner, repo: repo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the license for a repository
     - GET /repos/{owner}/{repo}/license
     - This method returns the contents of the repository's license file, if one is detected.  Similar to [Get repository content](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/licenses/#get-the-license-for-a-repository
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - returns: RequestBuilder<LicenseContent> 
     */
    open class func licensesGetForRepoWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<LicenseContent> {
        var path = "/repos/{owner}/{repo}/license"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LicenseContent>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
