//
// CodesOfConductAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class CodesOfConductAPI {
    /**
     Get all codes of conduct
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func codesOfConductGetAllCodesOfConduct(apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [CodeOfConduct]?,_ error: Error?) -> Void)) {
        codesOfConductGetAllCodesOfConductWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all codes of conduct
     - GET /codes_of_conduct
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/codes_of_conduct/#get-all-codes-of-conduct
}
     - returns: RequestBuilder<[CodeOfConduct]> 
     */
    open class func codesOfConductGetAllCodesOfConductWithRequestBuilder() -> RequestBuilder<[CodeOfConduct]> {
        let path = "/codes_of_conduct"
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[CodeOfConduct]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a code of conduct
     
     - parameter key: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func codesOfConductGetConductCode(key: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: CodeOfConduct?,_ error: Error?) -> Void)) {
        codesOfConductGetConductCodeWithRequestBuilder(key: key).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a code of conduct
     - GET /codes_of_conduct/{key}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/codes_of_conduct/#get-a-code-of-conduct
}
     - parameter key: (path)  
     - returns: RequestBuilder<CodeOfConduct> 
     */
    open class func codesOfConductGetConductCodeWithRequestBuilder(key: String) -> RequestBuilder<CodeOfConduct> {
        var path = "/codes_of_conduct/{key}"
        let keyPreEscape = "\(APIHelper.mapValueToPathItem(key))"
        let keyPostEscape = keyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{key}", with: keyPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CodeOfConduct>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the code of conduct for a repository
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func codesOfConductGetForRepo(owner: String, repo: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: CodeOfConduct?,_ error: Error?) -> Void)) {
        codesOfConductGetForRepoWithRequestBuilder(owner: owner, repo: repo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the code of conduct for a repository
     - GET /repos/{owner}/{repo}/community/code_of_conduct
     - Returns the contents of the repository's code of conduct file, if one is detected.  A code of conduct is detected if there is a file named `CODE_OF_CONDUCT` in the root directory of the repository. GitHub detects which code of conduct it is using fuzzy matching.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/codes_of_conduct/#get-the-code-of-conduct-for-a-repository
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - returns: RequestBuilder<CodeOfConduct> 
     */
    open class func codesOfConductGetForRepoWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<CodeOfConduct> {
        var path = "/repos/{owner}/{repo}/community/code_of_conduct"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CodeOfConduct>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
