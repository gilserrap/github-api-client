//
// TeamsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class TeamsAPI {
    /**
     Add team member (Legacy)
     
     - parameter teamId: (path)  
     - parameter username: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsAddMemberLegacy(teamId: Int, username: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        teamsAddMemberLegacyWithRequestBuilder(teamId: teamId, username: username).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add team member (Legacy)
     - PUT /teams/{team_id}/members/{username}
     - The \"Add team member\" endpoint (described below) is deprecated.  We recommend using the [Add or update team membership for a user](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.  **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"  Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs).\"
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/teams#add-team-member-legacy
}
     - parameter teamId: (path)  
     - parameter username: (path)  
     - returns: RequestBuilder<Void> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsAddMemberLegacyWithRequestBuilder(teamId: Int, username: String) -> RequestBuilder<Void> {
        var path = "/teams/{team_id}/members/{username}"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Add or update team membership for a user
     
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter username: (path)  
     - parameter inlineObject61: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsAddOrUpdateMembershipForUserInOrg(org: String, teamSlug: String, username: String, inlineObject61: InlineObject61? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: TeamMembership?,_ error: Error?) -> Void)) {
        teamsAddOrUpdateMembershipForUserInOrgWithRequestBuilder(org: org, teamSlug: teamSlug, username: username, inlineObject61: inlineObject61).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add or update team membership for a user
     - PUT /orgs/{org}/teams/{team_slug}/memberships/{username}
     - Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.  **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"  An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the \"pending\" state until the person accepts the invitation, at which point the membership will transition to the \"active\" state and the user will be added as a member of the team.  If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/teams#add-or-update-team-membership-for-a-user
}
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter username: (path)  
     - parameter inlineObject61: (body)  (optional)
     - returns: RequestBuilder<TeamMembership> 
     */
    open class func teamsAddOrUpdateMembershipForUserInOrgWithRequestBuilder(org: String, teamSlug: String, username: String, inlineObject61: InlineObject61? = nil) -> RequestBuilder<TeamMembership> {
        var path = "/orgs/{org}/teams/{team_slug}/memberships/{username}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let teamSlugPreEscape = "\(APIHelper.mapValueToPathItem(teamSlug))"
        let teamSlugPostEscape = teamSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_slug}", with: teamSlugPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject61)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TeamMembership>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Add or update team membership for a user (Legacy)
     
     - parameter teamId: (path)  
     - parameter username: (path)  
     - parameter inlineObject171: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsAddOrUpdateMembershipForUserLegacy(teamId: Int, username: String, inlineObject171: InlineObject171? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: TeamMembership?,_ error: Error?) -> Void)) {
        teamsAddOrUpdateMembershipForUserLegacyWithRequestBuilder(teamId: teamId, username: username, inlineObject171: inlineObject171).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add or update team membership for a user (Legacy)
     - PUT /teams/{team_id}/memberships/{username}
     - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.  **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"  If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the \"pending\" state until the user accepts the invitation, at which point the membership will transition to the \"active\" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.  If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/teams#add-or-update-team-membership-for-a-user-legacy
}
     - parameter teamId: (path)  
     - parameter username: (path)  
     - parameter inlineObject171: (body)  (optional)
     - returns: RequestBuilder<TeamMembership> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsAddOrUpdateMembershipForUserLegacyWithRequestBuilder(teamId: Int, username: String, inlineObject171: InlineObject171? = nil) -> RequestBuilder<TeamMembership> {
        var path = "/teams/{team_id}/memberships/{username}"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject171)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TeamMembership>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Add or update team project permissions
     
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter projectId: (path)  
     - parameter inlineObject62: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsAddOrUpdateProjectPermissionsInOrg(org: String, teamSlug: String, projectId: Int, inlineObject62: InlineObject62? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        teamsAddOrUpdateProjectPermissionsInOrgWithRequestBuilder(org: org, teamSlug: teamSlug, projectId: projectId, inlineObject62: inlineObject62).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add or update team project permissions
     - PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}
     - Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/teams/#add-or-update-team-project-permissions
}
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter projectId: (path)  
     - parameter inlineObject62: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func teamsAddOrUpdateProjectPermissionsInOrgWithRequestBuilder(org: String, teamSlug: String, projectId: Int, inlineObject62: InlineObject62? = nil) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/teams/{team_slug}/projects/{project_id}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let teamSlugPreEscape = "\(APIHelper.mapValueToPathItem(teamSlug))"
        let teamSlugPostEscape = teamSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_slug}", with: teamSlugPostEscape, options: .literal, range: nil)
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject62)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Add or update team project permissions (Legacy)
     
     - parameter teamId: (path)  
     - parameter projectId: (path)  
     - parameter inlineObject172: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsAddOrUpdateProjectPermissionsLegacy(teamId: Int, projectId: Int, inlineObject172: InlineObject172? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        teamsAddOrUpdateProjectPermissionsLegacyWithRequestBuilder(teamId: teamId, projectId: projectId, inlineObject172: inlineObject172).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add or update team project permissions (Legacy)
     - PUT /teams/{team_id}/projects/{project_id}
     - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#add-or-update-team-project-permissions) endpoint.  Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/teams/#add-or-update-team-project-permissions-legacy
}
     - parameter teamId: (path)  
     - parameter projectId: (path)  
     - parameter inlineObject172: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsAddOrUpdateProjectPermissionsLegacyWithRequestBuilder(teamId: Int, projectId: Int, inlineObject172: InlineObject172? = nil) -> RequestBuilder<Void> {
        var path = "/teams/{team_id}/projects/{project_id}"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject172)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Add or update team repository permissions
     
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject63: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsAddOrUpdateRepoPermissionsInOrg(org: String, teamSlug: String, owner: String, repo: String, inlineObject63: InlineObject63? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        teamsAddOrUpdateRepoPermissionsInOrgWithRequestBuilder(org: org, teamSlug: teamSlug, owner: owner, repo: repo, inlineObject63: inlineObject63).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add or update team repository permissions
     - PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
     - To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs).\"  **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.  For more information about the permission levels, see \"[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\".
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/teams/#add-or-update-team-repository-permissions
}
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject63: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func teamsAddOrUpdateRepoPermissionsInOrgWithRequestBuilder(org: String, teamSlug: String, owner: String, repo: String, inlineObject63: InlineObject63? = nil) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let teamSlugPreEscape = "\(APIHelper.mapValueToPathItem(teamSlug))"
        let teamSlugPostEscape = teamSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_slug}", with: teamSlugPostEscape, options: .literal, range: nil)
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject63)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Add or update team repository permissions (Legacy)
     
     - parameter teamId: (path)  
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject173: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsAddOrUpdateRepoPermissionsLegacy(teamId: Int, owner: String, repo: String, inlineObject173: InlineObject173? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        teamsAddOrUpdateRepoPermissionsLegacyWithRequestBuilder(teamId: teamId, owner: owner, repo: repo, inlineObject173: inlineObject173).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add or update team repository permissions (Legacy)
     - PUT /teams/{team_id}/repos/{owner}/{repo}
     - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new \"[Add or update team repository permissions](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#add-or-update-team-repository-permissions)\" endpoint.  To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.  Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs).\"
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/teams/#add-or-update-team-repository-permissions-legacy
}
     - parameter teamId: (path)  
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject173: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsAddOrUpdateRepoPermissionsLegacyWithRequestBuilder(teamId: Int, owner: String, repo: String, inlineObject173: InlineObject173? = nil) -> RequestBuilder<Void> {
        var path = "/teams/{team_id}/repos/{owner}/{repo}"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject173)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Check team permissions for a project
     
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter projectId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsCheckPermissionsForProjectInOrg(org: String, teamSlug: String, projectId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: TeamProject?,_ error: Error?) -> Void)) {
        teamsCheckPermissionsForProjectInOrgWithRequestBuilder(org: org, teamSlug: teamSlug, projectId: projectId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Check team permissions for a project
     - GET /orgs/{org}/teams/{team_slug}/projects/{project_id}
     - Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/teams/#check-team-permissions-for-a-project
}
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter projectId: (path)  
     - returns: RequestBuilder<TeamProject> 
     */
    open class func teamsCheckPermissionsForProjectInOrgWithRequestBuilder(org: String, teamSlug: String, projectId: Int) -> RequestBuilder<TeamProject> {
        var path = "/orgs/{org}/teams/{team_slug}/projects/{project_id}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let teamSlugPreEscape = "\(APIHelper.mapValueToPathItem(teamSlug))"
        let teamSlugPostEscape = teamSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_slug}", with: teamSlugPostEscape, options: .literal, range: nil)
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TeamProject>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check team permissions for a project (Legacy)
     
     - parameter teamId: (path)  
     - parameter projectId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsCheckPermissionsForProjectLegacy(teamId: Int, projectId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: TeamProject?,_ error: Error?) -> Void)) {
        teamsCheckPermissionsForProjectLegacyWithRequestBuilder(teamId: teamId, projectId: projectId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Check team permissions for a project (Legacy)
     - GET /teams/{team_id}/projects/{project_id}
     - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#check-team-permissions-for-a-project) endpoint.  Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/teams/#check-team-permissions-for-a-project-legacy
}
     - parameter teamId: (path)  
     - parameter projectId: (path)  
     - returns: RequestBuilder<TeamProject> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsCheckPermissionsForProjectLegacyWithRequestBuilder(teamId: Int, projectId: Int) -> RequestBuilder<TeamProject> {
        var path = "/teams/{team_id}/projects/{project_id}"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TeamProject>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check team permissions for a repository
     
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsCheckPermissionsForRepoInOrg(org: String, teamSlug: String, owner: String, repo: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: TeamRepository?,_ error: Error?) -> Void)) {
        teamsCheckPermissionsForRepoInOrgWithRequestBuilder(org: org, teamSlug: teamSlug, owner: owner, repo: repo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Check team permissions for a repository
     - GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
     - Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.  You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.  If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/teams/#check-team-permissions-for-a-repository
}
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter owner: (path)  
     - parameter repo: (path)  
     - returns: RequestBuilder<TeamRepository> 
     */
    open class func teamsCheckPermissionsForRepoInOrgWithRequestBuilder(org: String, teamSlug: String, owner: String, repo: String) -> RequestBuilder<TeamRepository> {
        var path = "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let teamSlugPreEscape = "\(APIHelper.mapValueToPathItem(teamSlug))"
        let teamSlugPostEscape = teamSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_slug}", with: teamSlugPostEscape, options: .literal, range: nil)
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TeamRepository>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check team permissions for a repository (Legacy)
     
     - parameter teamId: (path)  
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsCheckPermissionsForRepoLegacy(teamId: Int, owner: String, repo: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: TeamRepository?,_ error: Error?) -> Void)) {
        teamsCheckPermissionsForRepoLegacyWithRequestBuilder(teamId: teamId, owner: owner, repo: repo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Check team permissions for a repository (Legacy)
     - GET /teams/{team_id}/repos/{owner}/{repo}
     - **Note**: Repositories inherited through a parent team will also be checked.  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.  You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/) via the `Accept` header:
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/teams/#check-team-permissions-for-a-repository-legacy
}
     - parameter teamId: (path)  
     - parameter owner: (path)  
     - parameter repo: (path)  
     - returns: RequestBuilder<TeamRepository> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsCheckPermissionsForRepoLegacyWithRequestBuilder(teamId: Int, owner: String, repo: String) -> RequestBuilder<TeamRepository> {
        var path = "/teams/{team_id}/repos/{owner}/{repo}"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TeamRepository>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a team
     
     - parameter org: (path)  
     - parameter inlineObject53: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsCreate(org: String, inlineObject53: InlineObject53? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: TeamFull?,_ error: Error?) -> Void)) {
        teamsCreateWithRequestBuilder(org: org, inlineObject53: inlineObject53).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a team
     - POST /orgs/{org}/teams
     - To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see \"[Setting team creation permissions](https://help.github.com/en/articles/setting-team-creation-permissions-in-your-organization).\"  When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see \"[About teams](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)\".
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/teams/#create-a-team
}
     - parameter org: (path)  
     - parameter inlineObject53: (body)  (optional)
     - returns: RequestBuilder<TeamFull> 
     */
    open class func teamsCreateWithRequestBuilder(org: String, inlineObject53: InlineObject53? = nil) -> RequestBuilder<TeamFull> {
        var path = "/orgs/{org}/teams"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject53)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TeamFull>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a discussion comment
     
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter discussionNumber: (path)  
     - parameter inlineObject57: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsCreateDiscussionCommentInOrg(org: String, teamSlug: String, discussionNumber: Int, inlineObject57: InlineObject57? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: TeamDiscussionComment?,_ error: Error?) -> Void)) {
        teamsCreateDiscussionCommentInOrgWithRequestBuilder(org: org, teamSlug: teamSlug, discussionNumber: discussionNumber, inlineObject57: inlineObject57).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a discussion comment
     - POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments
     - Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/teams#create-a-discussion-comment
}
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter discussionNumber: (path)  
     - parameter inlineObject57: (body)  (optional)
     - returns: RequestBuilder<TeamDiscussionComment> 
     */
    open class func teamsCreateDiscussionCommentInOrgWithRequestBuilder(org: String, teamSlug: String, discussionNumber: Int, inlineObject57: InlineObject57? = nil) -> RequestBuilder<TeamDiscussionComment> {
        var path = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let teamSlugPreEscape = "\(APIHelper.mapValueToPathItem(teamSlug))"
        let teamSlugPostEscape = teamSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_slug}", with: teamSlugPostEscape, options: .literal, range: nil)
        let discussionNumberPreEscape = "\(APIHelper.mapValueToPathItem(discussionNumber))"
        let discussionNumberPostEscape = discussionNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{discussion_number}", with: discussionNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject57)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TeamDiscussionComment>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a discussion comment (Legacy)
     
     - parameter teamId: (path)  
     - parameter discussionNumber: (path)  
     - parameter inlineObject167: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsCreateDiscussionCommentLegacy(teamId: Int, discussionNumber: Int, inlineObject167: InlineObject167? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: TeamDiscussionComment?,_ error: Error?) -> Void)) {
        teamsCreateDiscussionCommentLegacyWithRequestBuilder(teamId: teamId, discussionNumber: discussionNumber, inlineObject167: inlineObject167).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a discussion comment (Legacy)
     - POST /teams/{team_id}/discussions/{discussion_number}/comments
     - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#create-a-discussion-comment) endpoint.  Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/teams#create-a-discussion-comment-legacy
}
     - parameter teamId: (path)  
     - parameter discussionNumber: (path)  
     - parameter inlineObject167: (body)  (optional)
     - returns: RequestBuilder<TeamDiscussionComment> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsCreateDiscussionCommentLegacyWithRequestBuilder(teamId: Int, discussionNumber: Int, inlineObject167: InlineObject167? = nil) -> RequestBuilder<TeamDiscussionComment> {
        var path = "/teams/{team_id}/discussions/{discussion_number}/comments"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let discussionNumberPreEscape = "\(APIHelper.mapValueToPathItem(discussionNumber))"
        let discussionNumberPostEscape = discussionNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{discussion_number}", with: discussionNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject167)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TeamDiscussionComment>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a discussion
     
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter inlineObject55: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsCreateDiscussionInOrg(org: String, teamSlug: String, inlineObject55: InlineObject55? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: TeamDiscussion?,_ error: Error?) -> Void)) {
        teamsCreateDiscussionInOrgWithRequestBuilder(org: org, teamSlug: teamSlug, inlineObject55: inlineObject55).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a discussion
     - POST /orgs/{org}/teams/{team_slug}/discussions
     - Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/teams#create-a-discussion
}
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter inlineObject55: (body)  (optional)
     - returns: RequestBuilder<TeamDiscussion> 
     */
    open class func teamsCreateDiscussionInOrgWithRequestBuilder(org: String, teamSlug: String, inlineObject55: InlineObject55? = nil) -> RequestBuilder<TeamDiscussion> {
        var path = "/orgs/{org}/teams/{team_slug}/discussions"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let teamSlugPreEscape = "\(APIHelper.mapValueToPathItem(teamSlug))"
        let teamSlugPostEscape = teamSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_slug}", with: teamSlugPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject55)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TeamDiscussion>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a discussion (Legacy)
     
     - parameter teamId: (path)  
     - parameter inlineObject165: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsCreateDiscussionLegacy(teamId: Int, inlineObject165: InlineObject165? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: TeamDiscussion?,_ error: Error?) -> Void)) {
        teamsCreateDiscussionLegacyWithRequestBuilder(teamId: teamId, inlineObject165: inlineObject165).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a discussion (Legacy)
     - POST /teams/{team_id}/discussions
     - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#create-a-discussion) endpoint.  Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/teams#create-a-discussion-legacy
}
     - parameter teamId: (path)  
     - parameter inlineObject165: (body)  (optional)
     - returns: RequestBuilder<TeamDiscussion> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsCreateDiscussionLegacyWithRequestBuilder(teamId: Int, inlineObject165: InlineObject165? = nil) -> RequestBuilder<TeamDiscussion> {
        var path = "/teams/{team_id}/discussions"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject165)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TeamDiscussion>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a discussion comment
     
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter discussionNumber: (path)  
     - parameter commentNumber: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsDeleteDiscussionCommentInOrg(org: String, teamSlug: String, discussionNumber: Int, commentNumber: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        teamsDeleteDiscussionCommentInOrgWithRequestBuilder(org: org, teamSlug: teamSlug, discussionNumber: discussionNumber, commentNumber: commentNumber).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a discussion comment
     - DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}
     - Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/teams#delete-a-discussion-comment
}
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter discussionNumber: (path)  
     - parameter commentNumber: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func teamsDeleteDiscussionCommentInOrgWithRequestBuilder(org: String, teamSlug: String, discussionNumber: Int, commentNumber: Int) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let teamSlugPreEscape = "\(APIHelper.mapValueToPathItem(teamSlug))"
        let teamSlugPostEscape = teamSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_slug}", with: teamSlugPostEscape, options: .literal, range: nil)
        let discussionNumberPreEscape = "\(APIHelper.mapValueToPathItem(discussionNumber))"
        let discussionNumberPostEscape = discussionNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{discussion_number}", with: discussionNumberPostEscape, options: .literal, range: nil)
        let commentNumberPreEscape = "\(APIHelper.mapValueToPathItem(commentNumber))"
        let commentNumberPostEscape = commentNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_number}", with: commentNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a discussion comment (Legacy)
     
     - parameter teamId: (path)  
     - parameter discussionNumber: (path)  
     - parameter commentNumber: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsDeleteDiscussionCommentLegacy(teamId: Int, discussionNumber: Int, commentNumber: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        teamsDeleteDiscussionCommentLegacyWithRequestBuilder(teamId: teamId, discussionNumber: discussionNumber, commentNumber: commentNumber).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a discussion comment (Legacy)
     - DELETE /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}
     - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#delete-a-discussion-comment) endpoint.  Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/teams#delete-a-discussion-comment-legacy
}
     - parameter teamId: (path)  
     - parameter discussionNumber: (path)  
     - parameter commentNumber: (path)  
     - returns: RequestBuilder<Void> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsDeleteDiscussionCommentLegacyWithRequestBuilder(teamId: Int, discussionNumber: Int, commentNumber: Int) -> RequestBuilder<Void> {
        var path = "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let discussionNumberPreEscape = "\(APIHelper.mapValueToPathItem(discussionNumber))"
        let discussionNumberPostEscape = discussionNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{discussion_number}", with: discussionNumberPostEscape, options: .literal, range: nil)
        let commentNumberPreEscape = "\(APIHelper.mapValueToPathItem(commentNumber))"
        let commentNumberPostEscape = commentNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_number}", with: commentNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a discussion
     
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter discussionNumber: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsDeleteDiscussionInOrg(org: String, teamSlug: String, discussionNumber: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        teamsDeleteDiscussionInOrgWithRequestBuilder(org: org, teamSlug: teamSlug, discussionNumber: discussionNumber).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a discussion
     - DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}
     - Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/teams#delete-a-discussion
}
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter discussionNumber: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func teamsDeleteDiscussionInOrgWithRequestBuilder(org: String, teamSlug: String, discussionNumber: Int) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let teamSlugPreEscape = "\(APIHelper.mapValueToPathItem(teamSlug))"
        let teamSlugPostEscape = teamSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_slug}", with: teamSlugPostEscape, options: .literal, range: nil)
        let discussionNumberPreEscape = "\(APIHelper.mapValueToPathItem(discussionNumber))"
        let discussionNumberPostEscape = discussionNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{discussion_number}", with: discussionNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a discussion (Legacy)
     
     - parameter teamId: (path)  
     - parameter discussionNumber: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsDeleteDiscussionLegacy(teamId: Int, discussionNumber: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        teamsDeleteDiscussionLegacyWithRequestBuilder(teamId: teamId, discussionNumber: discussionNumber).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a discussion (Legacy)
     - DELETE /teams/{team_id}/discussions/{discussion_number}
     - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#delete-a-discussion) endpoint.  Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/teams#delete-a-discussion-legacy
}
     - parameter teamId: (path)  
     - parameter discussionNumber: (path)  
     - returns: RequestBuilder<Void> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsDeleteDiscussionLegacyWithRequestBuilder(teamId: Int, discussionNumber: Int) -> RequestBuilder<Void> {
        var path = "/teams/{team_id}/discussions/{discussion_number}"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let discussionNumberPreEscape = "\(APIHelper.mapValueToPathItem(discussionNumber))"
        let discussionNumberPostEscape = discussionNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{discussion_number}", with: discussionNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a team
     
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsDeleteInOrg(org: String, teamSlug: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        teamsDeleteInOrgWithRequestBuilder(org: org, teamSlug: teamSlug).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a team
     - DELETE /orgs/{org}/teams/{team_slug}
     - To delete a team, the authenticated user must be an organization owner or team maintainer.  If you are an organization owner, deleting a parent team will delete all of its child teams as well.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/teams/#delete-a-team
}
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - returns: RequestBuilder<Void> 
     */
    open class func teamsDeleteInOrgWithRequestBuilder(org: String, teamSlug: String) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/teams/{team_slug}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let teamSlugPreEscape = "\(APIHelper.mapValueToPathItem(teamSlug))"
        let teamSlugPostEscape = teamSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_slug}", with: teamSlugPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a team (Legacy)
     
     - parameter teamId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsDeleteLegacy(teamId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        teamsDeleteLegacyWithRequestBuilder(teamId: teamId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a team (Legacy)
     - DELETE /teams/{team_id}
     - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#delete-a-team) endpoint.  To delete a team, the authenticated user must be an organization owner or team maintainer.  If you are an organization owner, deleting a parent team will delete all of its child teams as well.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/teams/#delete-a-team-legacy
}
     - parameter teamId: (path)  
     - returns: RequestBuilder<Void> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsDeleteLegacyWithRequestBuilder(teamId: Int) -> RequestBuilder<Void> {
        var path = "/teams/{team_id}"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a team by name
     
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsGetByName(org: String, teamSlug: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: TeamFull?,_ error: Error?) -> Void)) {
        teamsGetByNameWithRequestBuilder(org: org, teamSlug: teamSlug).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a team by name
     - GET /orgs/{org}/teams/{team_slug}
     - Gets a team using the team's `slug`. GitHub Enterprise Server generates the `slug` from the team `name`.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/teams/#get-a-team-by-name
}
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - returns: RequestBuilder<TeamFull> 
     */
    open class func teamsGetByNameWithRequestBuilder(org: String, teamSlug: String) -> RequestBuilder<TeamFull> {
        var path = "/orgs/{org}/teams/{team_slug}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let teamSlugPreEscape = "\(APIHelper.mapValueToPathItem(teamSlug))"
        let teamSlugPostEscape = teamSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_slug}", with: teamSlugPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TeamFull>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a discussion comment
     
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter discussionNumber: (path)  
     - parameter commentNumber: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsGetDiscussionCommentInOrg(org: String, teamSlug: String, discussionNumber: Int, commentNumber: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: TeamDiscussionComment?,_ error: Error?) -> Void)) {
        teamsGetDiscussionCommentInOrgWithRequestBuilder(org: org, teamSlug: teamSlug, discussionNumber: discussionNumber, commentNumber: commentNumber).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a discussion comment
     - GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}
     - Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/teams#get-a-discussion-comment
}
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter discussionNumber: (path)  
     - parameter commentNumber: (path)  
     - returns: RequestBuilder<TeamDiscussionComment> 
     */
    open class func teamsGetDiscussionCommentInOrgWithRequestBuilder(org: String, teamSlug: String, discussionNumber: Int, commentNumber: Int) -> RequestBuilder<TeamDiscussionComment> {
        var path = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let teamSlugPreEscape = "\(APIHelper.mapValueToPathItem(teamSlug))"
        let teamSlugPostEscape = teamSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_slug}", with: teamSlugPostEscape, options: .literal, range: nil)
        let discussionNumberPreEscape = "\(APIHelper.mapValueToPathItem(discussionNumber))"
        let discussionNumberPostEscape = discussionNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{discussion_number}", with: discussionNumberPostEscape, options: .literal, range: nil)
        let commentNumberPreEscape = "\(APIHelper.mapValueToPathItem(commentNumber))"
        let commentNumberPostEscape = commentNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_number}", with: commentNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TeamDiscussionComment>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a discussion comment (Legacy)
     
     - parameter teamId: (path)  
     - parameter discussionNumber: (path)  
     - parameter commentNumber: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsGetDiscussionCommentLegacy(teamId: Int, discussionNumber: Int, commentNumber: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: TeamDiscussionComment?,_ error: Error?) -> Void)) {
        teamsGetDiscussionCommentLegacyWithRequestBuilder(teamId: teamId, discussionNumber: discussionNumber, commentNumber: commentNumber).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a discussion comment (Legacy)
     - GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}
     - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#get-a-discussion-comment) endpoint.  Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/teams#get-a-discussion-comment-legacy
}
     - parameter teamId: (path)  
     - parameter discussionNumber: (path)  
     - parameter commentNumber: (path)  
     - returns: RequestBuilder<TeamDiscussionComment> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsGetDiscussionCommentLegacyWithRequestBuilder(teamId: Int, discussionNumber: Int, commentNumber: Int) -> RequestBuilder<TeamDiscussionComment> {
        var path = "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let discussionNumberPreEscape = "\(APIHelper.mapValueToPathItem(discussionNumber))"
        let discussionNumberPostEscape = discussionNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{discussion_number}", with: discussionNumberPostEscape, options: .literal, range: nil)
        let commentNumberPreEscape = "\(APIHelper.mapValueToPathItem(commentNumber))"
        let commentNumberPostEscape = commentNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_number}", with: commentNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TeamDiscussionComment>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a discussion
     
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter discussionNumber: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsGetDiscussionInOrg(org: String, teamSlug: String, discussionNumber: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: TeamDiscussion?,_ error: Error?) -> Void)) {
        teamsGetDiscussionInOrgWithRequestBuilder(org: org, teamSlug: teamSlug, discussionNumber: discussionNumber).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a discussion
     - GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}
     - Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/teams#get-a-discussion
}
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter discussionNumber: (path)  
     - returns: RequestBuilder<TeamDiscussion> 
     */
    open class func teamsGetDiscussionInOrgWithRequestBuilder(org: String, teamSlug: String, discussionNumber: Int) -> RequestBuilder<TeamDiscussion> {
        var path = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let teamSlugPreEscape = "\(APIHelper.mapValueToPathItem(teamSlug))"
        let teamSlugPostEscape = teamSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_slug}", with: teamSlugPostEscape, options: .literal, range: nil)
        let discussionNumberPreEscape = "\(APIHelper.mapValueToPathItem(discussionNumber))"
        let discussionNumberPostEscape = discussionNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{discussion_number}", with: discussionNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TeamDiscussion>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a discussion (Legacy)
     
     - parameter teamId: (path)  
     - parameter discussionNumber: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsGetDiscussionLegacy(teamId: Int, discussionNumber: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: TeamDiscussion?,_ error: Error?) -> Void)) {
        teamsGetDiscussionLegacyWithRequestBuilder(teamId: teamId, discussionNumber: discussionNumber).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a discussion (Legacy)
     - GET /teams/{team_id}/discussions/{discussion_number}
     - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#get-a-discussion) endpoint.  Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/teams#get-a-discussion-legacy
}
     - parameter teamId: (path)  
     - parameter discussionNumber: (path)  
     - returns: RequestBuilder<TeamDiscussion> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsGetDiscussionLegacyWithRequestBuilder(teamId: Int, discussionNumber: Int) -> RequestBuilder<TeamDiscussion> {
        var path = "/teams/{team_id}/discussions/{discussion_number}"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let discussionNumberPreEscape = "\(APIHelper.mapValueToPathItem(discussionNumber))"
        let discussionNumberPostEscape = discussionNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{discussion_number}", with: discussionNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TeamDiscussion>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a team (Legacy)
     
     - parameter teamId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsGetLegacy(teamId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: TeamFull?,_ error: Error?) -> Void)) {
        teamsGetLegacyWithRequestBuilder(teamId: teamId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a team (Legacy)
     - GET /teams/{team_id}
     - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#get-a-team-by-name) endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/teams/#get-a-team-legacy
}
     - parameter teamId: (path)  
     - returns: RequestBuilder<TeamFull> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsGetLegacyWithRequestBuilder(teamId: Int) -> RequestBuilder<TeamFull> {
        var path = "/teams/{team_id}"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TeamFull>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get team member (Legacy)
     
     - parameter teamId: (path)  
     - parameter username: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsGetMemberLegacy(teamId: Int, username: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        teamsGetMemberLegacyWithRequestBuilder(teamId: teamId, username: username).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get team member (Legacy)
     - GET /teams/{team_id}/members/{username}
     - The \"Get team member\" endpoint (described below) is deprecated.  We recommend using the [Get team membership for a user](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.  To list members in a team, the team must be visible to the authenticated user.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/teams#get-team-member-legacy
}
     - parameter teamId: (path)  
     - parameter username: (path)  
     - returns: RequestBuilder<Void> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsGetMemberLegacyWithRequestBuilder(teamId: Int, username: String) -> RequestBuilder<Void> {
        var path = "/teams/{team_id}/members/{username}"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get team membership for a user
     
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter username: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsGetMembershipForUserInOrg(org: String, teamSlug: String, username: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: TeamMembership?,_ error: Error?) -> Void)) {
        teamsGetMembershipForUserInOrgWithRequestBuilder(org: org, teamSlug: teamSlug, username: username).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get team membership for a user
     - GET /orgs/{org}/teams/{team_slug}/memberships/{username}
     - Team members will include the members of child teams.  To get a user's membership with a team, the team must be visible to the authenticated user.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.  **Note:** The `role` for organization owners returns as `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#create-a-team).
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/teams#get-team-membership-for-a-user
}
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter username: (path)  
     - returns: RequestBuilder<TeamMembership> 
     */
    open class func teamsGetMembershipForUserInOrgWithRequestBuilder(org: String, teamSlug: String, username: String) -> RequestBuilder<TeamMembership> {
        var path = "/orgs/{org}/teams/{team_slug}/memberships/{username}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let teamSlugPreEscape = "\(APIHelper.mapValueToPathItem(teamSlug))"
        let teamSlugPostEscape = teamSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_slug}", with: teamSlugPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TeamMembership>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get team membership for a user (Legacy)
     
     - parameter teamId: (path)  
     - parameter username: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsGetMembershipForUserLegacy(teamId: Int, username: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: TeamMembership?,_ error: Error?) -> Void)) {
        teamsGetMembershipForUserLegacyWithRequestBuilder(teamId: teamId, username: username).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get team membership for a user (Legacy)
     - GET /teams/{team_id}/memberships/{username}
     - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#get-team-membership-for-a-user) endpoint.  Team members will include the members of child teams.  To get a user's membership with a team, the team must be visible to the authenticated user.  **Note:** The `role` for organization owners returns as `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#create-a-team).
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/teams#get-team-membership-for-a-user-legacy
}
     - parameter teamId: (path)  
     - parameter username: (path)  
     - returns: RequestBuilder<TeamMembership> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsGetMembershipForUserLegacyWithRequestBuilder(teamId: Int, username: String) -> RequestBuilder<TeamMembership> {
        var path = "/teams/{team_id}/memberships/{username}"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TeamMembership>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List teams
     
     - parameter org: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsList(org: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Team]?,_ error: Error?) -> Void)) {
        teamsListWithRequestBuilder(org: org, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List teams
     - GET /orgs/{org}/teams
     - Lists all teams in an organization that are visible to the authenticated user.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/teams/#list-teams
}
     - parameter org: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[Team]> 
     */
    open class func teamsListWithRequestBuilder(org: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[Team]> {
        var path = "/orgs/{org}/teams"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Team]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List child teams
     
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsListChildInOrg(org: String, teamSlug: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Team]?,_ error: Error?) -> Void)) {
        teamsListChildInOrgWithRequestBuilder(org: org, teamSlug: teamSlug, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List child teams
     - GET /orgs/{org}/teams/{team_slug}/teams
     - Lists the child teams of the team specified by `{team_slug}`.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/teams/#list-child-teams
}
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[Team]> 
     */
    open class func teamsListChildInOrgWithRequestBuilder(org: String, teamSlug: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[Team]> {
        var path = "/orgs/{org}/teams/{team_slug}/teams"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let teamSlugPreEscape = "\(APIHelper.mapValueToPathItem(teamSlug))"
        let teamSlugPostEscape = teamSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_slug}", with: teamSlugPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Team]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List child teams (Legacy)
     
     - parameter teamId: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsListChildLegacy(teamId: Int, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Team]?,_ error: Error?) -> Void)) {
        teamsListChildLegacyWithRequestBuilder(teamId: teamId, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List child teams (Legacy)
     - GET /teams/{team_id}/teams
     - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#list-child-teams) endpoint.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/teams/#list-child-teams-legacy
}
     - parameter teamId: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[Team]> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsListChildLegacyWithRequestBuilder(teamId: Int, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[Team]> {
        var path = "/teams/{team_id}/teams"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Team]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter direction
     */
    public enum Direction_teamsListDiscussionCommentsInOrg: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     List discussion comments
     
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter discussionNumber: (path)  
     - parameter direction: (query) One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to .desc)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsListDiscussionCommentsInOrg(org: String, teamSlug: String, discussionNumber: Int, direction: Direction_teamsListDiscussionCommentsInOrg? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [TeamDiscussionComment]?,_ error: Error?) -> Void)) {
        teamsListDiscussionCommentsInOrgWithRequestBuilder(org: org, teamSlug: teamSlug, discussionNumber: discussionNumber, direction: direction, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List discussion comments
     - GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments
     - List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/teams#list-discussion-comments
}
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter discussionNumber: (path)  
     - parameter direction: (query) One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to .desc)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[TeamDiscussionComment]> 
     */
    open class func teamsListDiscussionCommentsInOrgWithRequestBuilder(org: String, teamSlug: String, discussionNumber: Int, direction: Direction_teamsListDiscussionCommentsInOrg? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[TeamDiscussionComment]> {
        var path = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let teamSlugPreEscape = "\(APIHelper.mapValueToPathItem(teamSlug))"
        let teamSlugPostEscape = teamSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_slug}", with: teamSlugPostEscape, options: .literal, range: nil)
        let discussionNumberPreEscape = "\(APIHelper.mapValueToPathItem(discussionNumber))"
        let discussionNumberPostEscape = discussionNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{discussion_number}", with: discussionNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "direction": direction?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[TeamDiscussionComment]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter direction
     */
    public enum Direction_teamsListDiscussionCommentsLegacy: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     List discussion comments (Legacy)
     
     - parameter teamId: (path)  
     - parameter discussionNumber: (path)  
     - parameter direction: (query) One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to .desc)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsListDiscussionCommentsLegacy(teamId: Int, discussionNumber: Int, direction: Direction_teamsListDiscussionCommentsLegacy? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [TeamDiscussionComment]?,_ error: Error?) -> Void)) {
        teamsListDiscussionCommentsLegacyWithRequestBuilder(teamId: teamId, discussionNumber: discussionNumber, direction: direction, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List discussion comments (Legacy)
     - GET /teams/{team_id}/discussions/{discussion_number}/comments
     - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#list-discussion-comments) endpoint.  List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/teams#list-discussion-comments-legacy
}
     - parameter teamId: (path)  
     - parameter discussionNumber: (path)  
     - parameter direction: (query) One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to .desc)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[TeamDiscussionComment]> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsListDiscussionCommentsLegacyWithRequestBuilder(teamId: Int, discussionNumber: Int, direction: Direction_teamsListDiscussionCommentsLegacy? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[TeamDiscussionComment]> {
        var path = "/teams/{team_id}/discussions/{discussion_number}/comments"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let discussionNumberPreEscape = "\(APIHelper.mapValueToPathItem(discussionNumber))"
        let discussionNumberPostEscape = discussionNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{discussion_number}", with: discussionNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "direction": direction?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[TeamDiscussionComment]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter direction
     */
    public enum Direction_teamsListDiscussionsInOrg: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     List discussions
     
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter direction: (query) One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to .desc)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsListDiscussionsInOrg(org: String, teamSlug: String, direction: Direction_teamsListDiscussionsInOrg? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [TeamDiscussion]?,_ error: Error?) -> Void)) {
        teamsListDiscussionsInOrgWithRequestBuilder(org: org, teamSlug: teamSlug, direction: direction, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List discussions
     - GET /orgs/{org}/teams/{team_slug}/discussions
     - List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/teams#list-discussions
}
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter direction: (query) One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to .desc)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[TeamDiscussion]> 
     */
    open class func teamsListDiscussionsInOrgWithRequestBuilder(org: String, teamSlug: String, direction: Direction_teamsListDiscussionsInOrg? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[TeamDiscussion]> {
        var path = "/orgs/{org}/teams/{team_slug}/discussions"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let teamSlugPreEscape = "\(APIHelper.mapValueToPathItem(teamSlug))"
        let teamSlugPostEscape = teamSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_slug}", with: teamSlugPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "direction": direction?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[TeamDiscussion]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter direction
     */
    public enum Direction_teamsListDiscussionsLegacy: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     List discussions (Legacy)
     
     - parameter teamId: (path)  
     - parameter direction: (query) One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to .desc)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsListDiscussionsLegacy(teamId: Int, direction: Direction_teamsListDiscussionsLegacy? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [TeamDiscussion]?,_ error: Error?) -> Void)) {
        teamsListDiscussionsLegacyWithRequestBuilder(teamId: teamId, direction: direction, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List discussions (Legacy)
     - GET /teams/{team_id}/discussions
     - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#list-discussions) endpoint.  List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/teams#list-discussions-legacy
}
     - parameter teamId: (path)  
     - parameter direction: (query) One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to .desc)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[TeamDiscussion]> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsListDiscussionsLegacyWithRequestBuilder(teamId: Int, direction: Direction_teamsListDiscussionsLegacy? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[TeamDiscussion]> {
        var path = "/teams/{team_id}/discussions"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "direction": direction?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[TeamDiscussion]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List teams for the authenticated user
     
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsListForAuthenticatedUser(perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [TeamFull]?,_ error: Error?) -> Void)) {
        teamsListForAuthenticatedUserWithRequestBuilder(perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List teams for the authenticated user
     - GET /user/teams
     - List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/).
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/teams/#list-teams-for-the-authenticated-user
}
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[TeamFull]> 
     */
    open class func teamsListForAuthenticatedUserWithRequestBuilder(perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[TeamFull]> {
        let path = "/user/teams"
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[TeamFull]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter role
     */
    public enum Role_teamsListMembersInOrg: String, CaseIterable {
        case member = "member"
        case maintainer = "maintainer"
        case all = "all"
    }

    /**
     List team members
     
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter role: (query) Filters members returned by their role in the team. Can be one of:   \\* &#x60;member&#x60; - normal members of the team.   \\* &#x60;maintainer&#x60; - team maintainers.   \\* &#x60;all&#x60; - all members of the team. (optional, default to .all)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsListMembersInOrg(org: String, teamSlug: String, role: Role_teamsListMembersInOrg? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [SimpleUser]?,_ error: Error?) -> Void)) {
        teamsListMembersInOrgWithRequestBuilder(org: org, teamSlug: teamSlug, role: role, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List team members
     - GET /orgs/{org}/teams/{team_slug}/members
     - Team members will include the members of child teams.  To list members in a team, the team must be visible to the authenticated user.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/teams#list-team-members
}
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter role: (query) Filters members returned by their role in the team. Can be one of:   \\* &#x60;member&#x60; - normal members of the team.   \\* &#x60;maintainer&#x60; - team maintainers.   \\* &#x60;all&#x60; - all members of the team. (optional, default to .all)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[SimpleUser]> 
     */
    open class func teamsListMembersInOrgWithRequestBuilder(org: String, teamSlug: String, role: Role_teamsListMembersInOrg? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[SimpleUser]> {
        var path = "/orgs/{org}/teams/{team_slug}/members"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let teamSlugPreEscape = "\(APIHelper.mapValueToPathItem(teamSlug))"
        let teamSlugPostEscape = teamSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_slug}", with: teamSlugPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "role": role?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[SimpleUser]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter role
     */
    public enum Role_teamsListMembersLegacy: String, CaseIterable {
        case member = "member"
        case maintainer = "maintainer"
        case all = "all"
    }

    /**
     List team members (Legacy)
     
     - parameter teamId: (path)  
     - parameter role: (query) Filters members returned by their role in the team. Can be one of:   \\* &#x60;member&#x60; - normal members of the team.   \\* &#x60;maintainer&#x60; - team maintainers.   \\* &#x60;all&#x60; - all members of the team. (optional, default to .all)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsListMembersLegacy(teamId: Int, role: Role_teamsListMembersLegacy? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [SimpleUser]?,_ error: Error?) -> Void)) {
        teamsListMembersLegacyWithRequestBuilder(teamId: teamId, role: role, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List team members (Legacy)
     - GET /teams/{team_id}/members
     - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#list-team-members) endpoint.  Team members will include the members of child teams.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/teams#list-team-members-legacy
}
     - parameter teamId: (path)  
     - parameter role: (query) Filters members returned by their role in the team. Can be one of:   \\* &#x60;member&#x60; - normal members of the team.   \\* &#x60;maintainer&#x60; - team maintainers.   \\* &#x60;all&#x60; - all members of the team. (optional, default to .all)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[SimpleUser]> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsListMembersLegacyWithRequestBuilder(teamId: Int, role: Role_teamsListMembersLegacy? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[SimpleUser]> {
        var path = "/teams/{team_id}/members"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "role": role?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[SimpleUser]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List team projects
     
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsListProjectsInOrg(org: String, teamSlug: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [TeamProject]?,_ error: Error?) -> Void)) {
        teamsListProjectsInOrgWithRequestBuilder(org: org, teamSlug: teamSlug, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List team projects
     - GET /orgs/{org}/teams/{team_slug}/projects
     - Lists the organization projects for a team.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/teams/#list-team-projects
}
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[TeamProject]> 
     */
    open class func teamsListProjectsInOrgWithRequestBuilder(org: String, teamSlug: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[TeamProject]> {
        var path = "/orgs/{org}/teams/{team_slug}/projects"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let teamSlugPreEscape = "\(APIHelper.mapValueToPathItem(teamSlug))"
        let teamSlugPostEscape = teamSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_slug}", with: teamSlugPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[TeamProject]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List team projects (Legacy)
     
     - parameter teamId: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsListProjectsLegacy(teamId: Int, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [TeamProject]?,_ error: Error?) -> Void)) {
        teamsListProjectsLegacyWithRequestBuilder(teamId: teamId, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List team projects (Legacy)
     - GET /teams/{team_id}/projects
     - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#list-team-projects) endpoint.  Lists the organization projects for a team.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/teams/#list-team-projects-legacy
}
     - parameter teamId: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[TeamProject]> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsListProjectsLegacyWithRequestBuilder(teamId: Int, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[TeamProject]> {
        var path = "/teams/{team_id}/projects"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[TeamProject]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List team repositories
     
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsListReposInOrg(org: String, teamSlug: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [MinimalRepository]?,_ error: Error?) -> Void)) {
        teamsListReposInOrgWithRequestBuilder(org: org, teamSlug: teamSlug, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List team repositories
     - GET /orgs/{org}/teams/{team_slug}/repos
     - Lists a team's repositories visible to the authenticated user.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/teams/#list-team-repositories
}
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[MinimalRepository]> 
     */
    open class func teamsListReposInOrgWithRequestBuilder(org: String, teamSlug: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[MinimalRepository]> {
        var path = "/orgs/{org}/teams/{team_slug}/repos"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let teamSlugPreEscape = "\(APIHelper.mapValueToPathItem(teamSlug))"
        let teamSlugPostEscape = teamSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_slug}", with: teamSlugPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[MinimalRepository]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List team repositories (Legacy)
     
     - parameter teamId: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsListReposLegacy(teamId: Int, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [MinimalRepository]?,_ error: Error?) -> Void)) {
        teamsListReposLegacyWithRequestBuilder(teamId: teamId, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List team repositories (Legacy)
     - GET /teams/{team_id}/repos
     - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#list-team-repositories) endpoint.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/teams/#list-team-repositories-legacy
}
     - parameter teamId: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[MinimalRepository]> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsListReposLegacyWithRequestBuilder(teamId: Int, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[MinimalRepository]> {
        var path = "/teams/{team_id}/repos"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[MinimalRepository]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove team member (Legacy)
     
     - parameter teamId: (path)  
     - parameter username: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsRemoveMemberLegacy(teamId: Int, username: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        teamsRemoveMemberLegacyWithRequestBuilder(teamId: teamId, username: username).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove team member (Legacy)
     - DELETE /teams/{team_id}/members/{username}
     - The \"Remove team member\" endpoint (described below) is deprecated.  We recommend using the [Remove team membership for a user](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.  **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/teams#remove-team-member-legacy
}
     - parameter teamId: (path)  
     - parameter username: (path)  
     - returns: RequestBuilder<Void> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsRemoveMemberLegacyWithRequestBuilder(teamId: Int, username: String) -> RequestBuilder<Void> {
        var path = "/teams/{team_id}/members/{username}"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove team membership for a user
     
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter username: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsRemoveMembershipForUserInOrg(org: String, teamSlug: String, username: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        teamsRemoveMembershipForUserInOrgWithRequestBuilder(org: org, teamSlug: teamSlug, username: username).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove team membership for a user
     - DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}
     - Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.  **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"  **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/teams#remove-team-membership-for-a-user
}
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter username: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func teamsRemoveMembershipForUserInOrgWithRequestBuilder(org: String, teamSlug: String, username: String) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/teams/{team_slug}/memberships/{username}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let teamSlugPreEscape = "\(APIHelper.mapValueToPathItem(teamSlug))"
        let teamSlugPostEscape = teamSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_slug}", with: teamSlugPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove team membership for a user (Legacy)
     
     - parameter teamId: (path)  
     - parameter username: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsRemoveMembershipForUserLegacy(teamId: Int, username: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        teamsRemoveMembershipForUserLegacyWithRequestBuilder(teamId: teamId, username: username).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove team membership for a user (Legacy)
     - DELETE /teams/{team_id}/memberships/{username}
     - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#remove-team-membership-for-a-user) endpoint.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.  **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/teams#remove-team-membership-for-a-user-legacy
}
     - parameter teamId: (path)  
     - parameter username: (path)  
     - returns: RequestBuilder<Void> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsRemoveMembershipForUserLegacyWithRequestBuilder(teamId: Int, username: String) -> RequestBuilder<Void> {
        var path = "/teams/{team_id}/memberships/{username}"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove a project from a team
     
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter projectId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsRemoveProjectInOrg(org: String, teamSlug: String, projectId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        teamsRemoveProjectInOrgWithRequestBuilder(org: org, teamSlug: teamSlug, projectId: projectId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove a project from a team
     - DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}
     - Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/teams/#remove-a-project-from-a-team
}
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter projectId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func teamsRemoveProjectInOrgWithRequestBuilder(org: String, teamSlug: String, projectId: Int) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/teams/{team_slug}/projects/{project_id}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let teamSlugPreEscape = "\(APIHelper.mapValueToPathItem(teamSlug))"
        let teamSlugPostEscape = teamSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_slug}", with: teamSlugPostEscape, options: .literal, range: nil)
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove a project from a team (Legacy)
     
     - parameter teamId: (path)  
     - parameter projectId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsRemoveProjectLegacy(teamId: Int, projectId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        teamsRemoveProjectLegacyWithRequestBuilder(teamId: teamId, projectId: projectId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove a project from a team (Legacy)
     - DELETE /teams/{team_id}/projects/{project_id}
     - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#remove-a-project-from-a-team) endpoint.  Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/teams/#remove-a-project-from-a-team-legacy
}
     - parameter teamId: (path)  
     - parameter projectId: (path)  
     - returns: RequestBuilder<Void> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsRemoveProjectLegacyWithRequestBuilder(teamId: Int, projectId: Int) -> RequestBuilder<Void> {
        var path = "/teams/{team_id}/projects/{project_id}"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove a repository from a team
     
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsRemoveRepoInOrg(org: String, teamSlug: String, owner: String, repo: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        teamsRemoveRepoInOrgWithRequestBuilder(org: org, teamSlug: teamSlug, owner: owner, repo: repo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove a repository from a team
     - DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
     - If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/teams/#remove-a-repository-from-a-team
}
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter owner: (path)  
     - parameter repo: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func teamsRemoveRepoInOrgWithRequestBuilder(org: String, teamSlug: String, owner: String, repo: String) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let teamSlugPreEscape = "\(APIHelper.mapValueToPathItem(teamSlug))"
        let teamSlugPostEscape = teamSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_slug}", with: teamSlugPostEscape, options: .literal, range: nil)
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove a repository from a team (Legacy)
     
     - parameter teamId: (path)  
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsRemoveRepoLegacy(teamId: Int, owner: String, repo: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        teamsRemoveRepoLegacyWithRequestBuilder(teamId: teamId, owner: owner, repo: repo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove a repository from a team (Legacy)
     - DELETE /teams/{team_id}/repos/{owner}/{repo}
     - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#remove-a-repository-from-a-team) endpoint.  If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/teams/#remove-a-repository-from-a-team-legacy
}
     - parameter teamId: (path)  
     - parameter owner: (path)  
     - parameter repo: (path)  
     - returns: RequestBuilder<Void> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsRemoveRepoLegacyWithRequestBuilder(teamId: Int, owner: String, repo: String) -> RequestBuilder<Void> {
        var path = "/teams/{team_id}/repos/{owner}/{repo}"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update a discussion comment
     
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter discussionNumber: (path)  
     - parameter commentNumber: (path)  
     - parameter inlineObject58: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsUpdateDiscussionCommentInOrg(org: String, teamSlug: String, discussionNumber: Int, commentNumber: Int, inlineObject58: InlineObject58? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: TeamDiscussionComment?,_ error: Error?) -> Void)) {
        teamsUpdateDiscussionCommentInOrgWithRequestBuilder(org: org, teamSlug: teamSlug, discussionNumber: discussionNumber, commentNumber: commentNumber, inlineObject58: inlineObject58).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a discussion comment
     - PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}
     - Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/teams#update-a-discussion-comment
}
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter discussionNumber: (path)  
     - parameter commentNumber: (path)  
     - parameter inlineObject58: (body)  (optional)
     - returns: RequestBuilder<TeamDiscussionComment> 
     */
    open class func teamsUpdateDiscussionCommentInOrgWithRequestBuilder(org: String, teamSlug: String, discussionNumber: Int, commentNumber: Int, inlineObject58: InlineObject58? = nil) -> RequestBuilder<TeamDiscussionComment> {
        var path = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let teamSlugPreEscape = "\(APIHelper.mapValueToPathItem(teamSlug))"
        let teamSlugPostEscape = teamSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_slug}", with: teamSlugPostEscape, options: .literal, range: nil)
        let discussionNumberPreEscape = "\(APIHelper.mapValueToPathItem(discussionNumber))"
        let discussionNumberPostEscape = discussionNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{discussion_number}", with: discussionNumberPostEscape, options: .literal, range: nil)
        let commentNumberPreEscape = "\(APIHelper.mapValueToPathItem(commentNumber))"
        let commentNumberPostEscape = commentNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_number}", with: commentNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject58)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TeamDiscussionComment>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a discussion comment (Legacy)
     
     - parameter teamId: (path)  
     - parameter discussionNumber: (path)  
     - parameter commentNumber: (path)  
     - parameter inlineObject168: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsUpdateDiscussionCommentLegacy(teamId: Int, discussionNumber: Int, commentNumber: Int, inlineObject168: InlineObject168? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: TeamDiscussionComment?,_ error: Error?) -> Void)) {
        teamsUpdateDiscussionCommentLegacyWithRequestBuilder(teamId: teamId, discussionNumber: discussionNumber, commentNumber: commentNumber, inlineObject168: inlineObject168).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a discussion comment (Legacy)
     - PATCH /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}
     - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#update-a-discussion-comment) endpoint.  Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/teams#update-a-discussion-comment-legacy
}
     - parameter teamId: (path)  
     - parameter discussionNumber: (path)  
     - parameter commentNumber: (path)  
     - parameter inlineObject168: (body)  (optional)
     - returns: RequestBuilder<TeamDiscussionComment> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsUpdateDiscussionCommentLegacyWithRequestBuilder(teamId: Int, discussionNumber: Int, commentNumber: Int, inlineObject168: InlineObject168? = nil) -> RequestBuilder<TeamDiscussionComment> {
        var path = "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let discussionNumberPreEscape = "\(APIHelper.mapValueToPathItem(discussionNumber))"
        let discussionNumberPostEscape = discussionNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{discussion_number}", with: discussionNumberPostEscape, options: .literal, range: nil)
        let commentNumberPreEscape = "\(APIHelper.mapValueToPathItem(commentNumber))"
        let commentNumberPostEscape = commentNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_number}", with: commentNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject168)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TeamDiscussionComment>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a discussion
     
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter discussionNumber: (path)  
     - parameter inlineObject56: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsUpdateDiscussionInOrg(org: String, teamSlug: String, discussionNumber: Int, inlineObject56: InlineObject56? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: TeamDiscussion?,_ error: Error?) -> Void)) {
        teamsUpdateDiscussionInOrgWithRequestBuilder(org: org, teamSlug: teamSlug, discussionNumber: discussionNumber, inlineObject56: inlineObject56).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a discussion
     - PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}
     - Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/teams#update-a-discussion
}
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter discussionNumber: (path)  
     - parameter inlineObject56: (body)  (optional)
     - returns: RequestBuilder<TeamDiscussion> 
     */
    open class func teamsUpdateDiscussionInOrgWithRequestBuilder(org: String, teamSlug: String, discussionNumber: Int, inlineObject56: InlineObject56? = nil) -> RequestBuilder<TeamDiscussion> {
        var path = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let teamSlugPreEscape = "\(APIHelper.mapValueToPathItem(teamSlug))"
        let teamSlugPostEscape = teamSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_slug}", with: teamSlugPostEscape, options: .literal, range: nil)
        let discussionNumberPreEscape = "\(APIHelper.mapValueToPathItem(discussionNumber))"
        let discussionNumberPostEscape = discussionNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{discussion_number}", with: discussionNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject56)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TeamDiscussion>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a discussion (Legacy)
     
     - parameter teamId: (path)  
     - parameter discussionNumber: (path)  
     - parameter inlineObject166: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsUpdateDiscussionLegacy(teamId: Int, discussionNumber: Int, inlineObject166: InlineObject166? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: TeamDiscussion?,_ error: Error?) -> Void)) {
        teamsUpdateDiscussionLegacyWithRequestBuilder(teamId: teamId, discussionNumber: discussionNumber, inlineObject166: inlineObject166).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a discussion (Legacy)
     - PATCH /teams/{team_id}/discussions/{discussion_number}
     - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#update-a-discussion) endpoint.  Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/teams#update-a-discussion-legacy
}
     - parameter teamId: (path)  
     - parameter discussionNumber: (path)  
     - parameter inlineObject166: (body)  (optional)
     - returns: RequestBuilder<TeamDiscussion> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsUpdateDiscussionLegacyWithRequestBuilder(teamId: Int, discussionNumber: Int, inlineObject166: InlineObject166? = nil) -> RequestBuilder<TeamDiscussion> {
        var path = "/teams/{team_id}/discussions/{discussion_number}"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let discussionNumberPreEscape = "\(APIHelper.mapValueToPathItem(discussionNumber))"
        let discussionNumberPostEscape = discussionNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{discussion_number}", with: discussionNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject166)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TeamDiscussion>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a team
     
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter inlineObject54: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsUpdateInOrg(org: String, teamSlug: String, inlineObject54: InlineObject54? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: TeamFull?,_ error: Error?) -> Void)) {
        teamsUpdateInOrgWithRequestBuilder(org: org, teamSlug: teamSlug, inlineObject54: inlineObject54).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a team
     - PATCH /orgs/{org}/teams/{team_slug}
     - To edit a team, the authenticated user must either be an organization owner or a team maintainer.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/teams/#update-a-team
}
     - parameter org: (path)  
     - parameter teamSlug: (path) team_slug parameter 
     - parameter inlineObject54: (body)  (optional)
     - returns: RequestBuilder<TeamFull> 
     */
    open class func teamsUpdateInOrgWithRequestBuilder(org: String, teamSlug: String, inlineObject54: InlineObject54? = nil) -> RequestBuilder<TeamFull> {
        var path = "/orgs/{org}/teams/{team_slug}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let teamSlugPreEscape = "\(APIHelper.mapValueToPathItem(teamSlug))"
        let teamSlugPostEscape = teamSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_slug}", with: teamSlugPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject54)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TeamFull>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a team (Legacy)
     
     - parameter teamId: (path)  
     - parameter inlineObject164: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsUpdateLegacy(teamId: Int, inlineObject164: InlineObject164? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: TeamFull?,_ error: Error?) -> Void)) {
        teamsUpdateLegacyWithRequestBuilder(teamId: teamId, inlineObject164: inlineObject164).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a team (Legacy)
     - PATCH /teams/{team_id}
     - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#update-a-team) endpoint.  To edit a team, the authenticated user must either be an organization owner or a team maintainer.  **Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/teams/#update-a-team-legacy
}
     - parameter teamId: (path)  
     - parameter inlineObject164: (body)  (optional)
     - returns: RequestBuilder<TeamFull> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func teamsUpdateLegacyWithRequestBuilder(teamId: Int, inlineObject164: InlineObject164? = nil) -> RequestBuilder<TeamFull> {
        var path = "/teams/{team_id}"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject164)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TeamFull>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
