//
// CodeScanningAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class CodeScanningAPI {
    /**
     Get a code scanning alert
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter alertNumber: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func codeScanningGetAlert(owner: String, repo: String, alertNumber: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: CodeScanningAlertCodeScanningAlert?,_ error: Error?) -> Void)) {
        codeScanningGetAlertWithRequestBuilder(owner: owner, repo: repo, alertNumber: alertNumber).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a code scanning alert
     - GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}
     - Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.  The security `alert_number` is found at the end of the security alert's URL. For example, the security alert ID for `https://github.com/Octo-org/octo-repo/security/code-scanning/88` is `88`.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/code-scanning/#get-a-code-scanning-alert
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter alertNumber: (path)  
     - returns: RequestBuilder<CodeScanningAlertCodeScanningAlert> 
     */
    open class func codeScanningGetAlertWithRequestBuilder(owner: String, repo: String, alertNumber: Int) -> RequestBuilder<CodeScanningAlertCodeScanningAlert> {
        var path = "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let alertNumberPreEscape = "\(APIHelper.mapValueToPathItem(alertNumber))"
        let alertNumberPostEscape = alertNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{alert_number}", with: alertNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CodeScanningAlertCodeScanningAlert>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List code scanning alerts for a repository
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter state: (query) Set to &#x60;open&#x60;, &#x60;fixed&#x60;, or &#x60;dismissed&#x60; to list code scanning alerts in a specific state. (optional)
     - parameter ref: (query) Set a full Git reference to list alerts for a specific branch. The &#x60;ref&#x60; must be formatted as &#x60;refs/heads/&lt;branch name&gt;&#x60;. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func codeScanningListAlertsForRepo(owner: String, repo: String, state: CodeScanningAlertState? = nil, ref: String? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [CodeScanningAlertCodeScanningAlertItems]?,_ error: Error?) -> Void)) {
        codeScanningListAlertsForRepoWithRequestBuilder(owner: owner, repo: repo, state: state, ref: ref).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List code scanning alerts for a repository
     - GET /repos/{owner}/{repo}/code-scanning/alerts
     - Lists all open code scanning alerts for the default branch (usually `main` or `master`). You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/code-scanning/#list-code-scanning-alerts-for-a-repository
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter state: (query) Set to &#x60;open&#x60;, &#x60;fixed&#x60;, or &#x60;dismissed&#x60; to list code scanning alerts in a specific state. (optional)
     - parameter ref: (query) Set a full Git reference to list alerts for a specific branch. The &#x60;ref&#x60; must be formatted as &#x60;refs/heads/&lt;branch name&gt;&#x60;. (optional)
     - returns: RequestBuilder<[CodeScanningAlertCodeScanningAlertItems]> 
     */
    open class func codeScanningListAlertsForRepoWithRequestBuilder(owner: String, repo: String, state: CodeScanningAlertState? = nil, ref: String? = nil) -> RequestBuilder<[CodeScanningAlertCodeScanningAlertItems]> {
        var path = "/repos/{owner}/{repo}/code-scanning/alerts"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "state": state?.encodeToJSON(), 
            "ref": ref?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[CodeScanningAlertCodeScanningAlertItems]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List recent code scanning analyses for a repository
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter ref: (query) Set a full Git reference to list alerts for a specific branch. The &#x60;ref&#x60; must be formatted as &#x60;refs/heads/&lt;branch name&gt;&#x60;. (optional)
     - parameter toolName: (query) Set a single code scanning tool name to filter alerts by tool. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func codeScanningListRecentAnalyses(owner: String, repo: String, ref: String? = nil, toolName: String? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [CodeScanningAnalysisCodeScanningAnalysis]?,_ error: Error?) -> Void)) {
        codeScanningListRecentAnalysesWithRequestBuilder(owner: owner, repo: repo, ref: ref, toolName: toolName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List recent code scanning analyses for a repository
     - GET /repos/{owner}/{repo}/code-scanning/analyses
     - List the details of recent code scanning analyses for a repository. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/code-scanning/#list-recent-analyses
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter ref: (query) Set a full Git reference to list alerts for a specific branch. The &#x60;ref&#x60; must be formatted as &#x60;refs/heads/&lt;branch name&gt;&#x60;. (optional)
     - parameter toolName: (query) Set a single code scanning tool name to filter alerts by tool. (optional)
     - returns: RequestBuilder<[CodeScanningAnalysisCodeScanningAnalysis]> 
     */
    open class func codeScanningListRecentAnalysesWithRequestBuilder(owner: String, repo: String, ref: String? = nil, toolName: String? = nil) -> RequestBuilder<[CodeScanningAnalysisCodeScanningAnalysis]> {
        var path = "/repos/{owner}/{repo}/code-scanning/analyses"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "ref": ref?.encodeToJSON(), 
            "tool_name": toolName?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[CodeScanningAnalysisCodeScanningAnalysis]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update a code scanning alert
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter alertNumber: (path) The security alert number, found at the end of the security alert&#39;s URL. 
     - parameter inlineObject92: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func codeScanningUpdateAlert(owner: String, repo: String, alertNumber: Int, inlineObject92: InlineObject92? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: CodeScanningAlertCodeScanningAlert?,_ error: Error?) -> Void)) {
        codeScanningUpdateAlertWithRequestBuilder(owner: owner, repo: repo, alertNumber: alertNumber, inlineObject92: inlineObject92).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a code scanning alert
     - PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}
     - Updates the status of a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/code-scanning/#upload-a-code-scanning-alert
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter alertNumber: (path) The security alert number, found at the end of the security alert&#39;s URL. 
     - parameter inlineObject92: (body)  (optional)
     - returns: RequestBuilder<CodeScanningAlertCodeScanningAlert> 
     */
    open class func codeScanningUpdateAlertWithRequestBuilder(owner: String, repo: String, alertNumber: Int, inlineObject92: InlineObject92? = nil) -> RequestBuilder<CodeScanningAlertCodeScanningAlert> {
        var path = "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let alertNumberPreEscape = "\(APIHelper.mapValueToPathItem(alertNumber))"
        let alertNumberPostEscape = alertNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{alert_number}", with: alertNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject92)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CodeScanningAlertCodeScanningAlert>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Upload a SARIF file
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject93: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func codeScanningUploadSarif(owner: String, repo: String, inlineObject93: InlineObject93? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        codeScanningUploadSarifWithRequestBuilder(owner: owner, repo: repo, inlineObject93: inlineObject93).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Upload a SARIF file
     - POST /repos/{owner}/{repo}/code-scanning/sarifs
     - Upload a SARIF file containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/code-scanning/#upload-a-sarif-analysis
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject93: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func codeScanningUploadSarifWithRequestBuilder(owner: String, repo: String, inlineObject93: InlineObject93? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/code-scanning/sarifs"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject93)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
