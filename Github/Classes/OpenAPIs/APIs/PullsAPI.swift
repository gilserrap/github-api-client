//
// PullsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class PullsAPI {
    /**
     Check if a pull request has been merged
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pullsCheckIfMerged(owner: String, repo: String, pullNumber: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        pullsCheckIfMergedWithRequestBuilder(owner: owner, repo: repo, pullNumber: pullNumber).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Check if a pull request has been merged
     - GET /repos/{owner}/{repo}/pulls/{pull_number}/merge
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/pulls/#check-if-a-pull-request-has-been-merged
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func pullsCheckIfMergedWithRequestBuilder(owner: String, repo: String, pullNumber: Int) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/pulls/{pull_number}/merge"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let pullNumberPreEscape = "\(APIHelper.mapValueToPathItem(pullNumber))"
        let pullNumberPostEscape = pullNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pull_number}", with: pullNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a pull request
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject136: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pullsCreate(owner: String, repo: String, inlineObject136: InlineObject136? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: PullRequest?,_ error: Error?) -> Void)) {
        pullsCreateWithRequestBuilder(owner: owner, repo: repo, inlineObject136: inlineObject136).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a pull request
     - POST /repos/{owner}/{repo}/pulls
     - Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.  You can create a new pull request.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.
     - responseHeaders: [Location(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/pulls/#create-a-pull-request
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject136: (body)  (optional)
     - returns: RequestBuilder<PullRequest> 
     */
    open class func pullsCreateWithRequestBuilder(owner: String, repo: String, inlineObject136: InlineObject136? = nil) -> RequestBuilder<PullRequest> {
        var path = "/repos/{owner}/{repo}/pulls"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject136)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PullRequest>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a reply for a review comment
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter commentId: (path) comment_id parameter 
     - parameter inlineObject141: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pullsCreateReplyForReviewComment(owner: String, repo: String, pullNumber: Int, commentId: Int, inlineObject141: InlineObject141? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: PullRequestReviewComment?,_ error: Error?) -> Void)) {
        pullsCreateReplyForReviewCommentWithRequestBuilder(owner: owner, repo: repo, pullNumber: pullNumber, commentId: commentId, inlineObject141: inlineObject141).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a reply for a review comment
     - POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies
     - Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.
     - responseHeaders: [Location(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#create-a-reply-for-a-review-comment
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter commentId: (path) comment_id parameter 
     - parameter inlineObject141: (body)  (optional)
     - returns: RequestBuilder<PullRequestReviewComment> 
     */
    open class func pullsCreateReplyForReviewCommentWithRequestBuilder(owner: String, repo: String, pullNumber: Int, commentId: Int, inlineObject141: InlineObject141? = nil) -> RequestBuilder<PullRequestReviewComment> {
        var path = "/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let pullNumberPreEscape = "\(APIHelper.mapValueToPathItem(pullNumber))"
        let pullNumberPostEscape = pullNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pull_number}", with: pullNumberPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(APIHelper.mapValueToPathItem(commentId))"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_id}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject141)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PullRequestReviewComment>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a review for a pull request
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter inlineObject145: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pullsCreateReview(owner: String, repo: String, pullNumber: Int, inlineObject145: InlineObject145? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: PullRequestReview?,_ error: Error?) -> Void)) {
        pullsCreateReviewWithRequestBuilder(owner: owner, repo: repo, pullNumber: pullNumber, inlineObject145: inlineObject145).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a review for a pull request
     - POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews
     - This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.  Pull request reviews created in the `PENDING` state do not include the `submitted_at` property in the response.  **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#get-a-pull-request) endpoint.  The `position` value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#create-a-review-for-a-pull-request
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter inlineObject145: (body)  (optional)
     - returns: RequestBuilder<PullRequestReview> 
     */
    open class func pullsCreateReviewWithRequestBuilder(owner: String, repo: String, pullNumber: Int, inlineObject145: InlineObject145? = nil) -> RequestBuilder<PullRequestReview> {
        var path = "/repos/{owner}/{repo}/pulls/{pull_number}/reviews"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let pullNumberPreEscape = "\(APIHelper.mapValueToPathItem(pullNumber))"
        let pullNumberPostEscape = pullNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pull_number}", with: pullNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject145)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PullRequestReview>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a review comment for a pull request
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter inlineObject140: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pullsCreateReviewComment(owner: String, repo: String, pullNumber: Int, inlineObject140: InlineObject140? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: PullRequestReviewComment?,_ error: Error?) -> Void)) {
        pullsCreateReviewCommentWithRequestBuilder(owner: owner, repo: repo, pullNumber: pullNumber, inlineObject140: inlineObject140).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a review comment for a pull request
     - POST /repos/{owner}/{repo}/pulls/{pull_number}/comments
     -  Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see \"[Create an issue comment](https://docs.github.com/enterprise-server@3.0/rest/reference/issues#create-an-issue-comment).\" We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.  You can still create a review comment using the `position` parameter. When you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required. For more information, see the [`comfort-fade` preview notice](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#create-a-review-comment-for-a-pull-request-preview-notices).  **Note:** The position value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.
     - responseHeaders: [Location(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#create-a-review-comment-for-a-pull-request
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter inlineObject140: (body)  (optional)
     - returns: RequestBuilder<PullRequestReviewComment> 
     */
    open class func pullsCreateReviewCommentWithRequestBuilder(owner: String, repo: String, pullNumber: Int, inlineObject140: InlineObject140? = nil) -> RequestBuilder<PullRequestReviewComment> {
        var path = "/repos/{owner}/{repo}/pulls/{pull_number}/comments"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let pullNumberPreEscape = "\(APIHelper.mapValueToPathItem(pullNumber))"
        let pullNumberPostEscape = pullNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pull_number}", with: pullNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject140)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PullRequestReviewComment>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a pending review for a pull request
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter reviewId: (path) review_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pullsDeletePendingReview(owner: String, repo: String, pullNumber: Int, reviewId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: PullRequestReview?,_ error: Error?) -> Void)) {
        pullsDeletePendingReviewWithRequestBuilder(owner: owner, repo: repo, pullNumber: pullNumber, reviewId: reviewId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a pending review for a pull request
     - DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#delete-a-pending-review-for-a-pull-request
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter reviewId: (path) review_id parameter 
     - returns: RequestBuilder<PullRequestReview> 
     */
    open class func pullsDeletePendingReviewWithRequestBuilder(owner: String, repo: String, pullNumber: Int, reviewId: Int) -> RequestBuilder<PullRequestReview> {
        var path = "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let pullNumberPreEscape = "\(APIHelper.mapValueToPathItem(pullNumber))"
        let pullNumberPostEscape = pullNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pull_number}", with: pullNumberPostEscape, options: .literal, range: nil)
        let reviewIdPreEscape = "\(APIHelper.mapValueToPathItem(reviewId))"
        let reviewIdPostEscape = reviewIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{review_id}", with: reviewIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PullRequestReview>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a review comment for a pull request
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pullsDeleteReviewComment(owner: String, repo: String, commentId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        pullsDeleteReviewCommentWithRequestBuilder(owner: owner, repo: repo, commentId: commentId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a review comment for a pull request
     - DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}
     - Deletes a review comment.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#delete-a-review-comment-for-a-pull-request
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - returns: RequestBuilder<Void> 
     */
    open class func pullsDeleteReviewCommentWithRequestBuilder(owner: String, repo: String, commentId: Int) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/pulls/comments/{comment_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(APIHelper.mapValueToPathItem(commentId))"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_id}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Dismiss a review for a pull request
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter reviewId: (path) review_id parameter 
     - parameter inlineObject147: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pullsDismissReview(owner: String, repo: String, pullNumber: Int, reviewId: Int, inlineObject147: InlineObject147? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: PullRequestReview?,_ error: Error?) -> Void)) {
        pullsDismissReviewWithRequestBuilder(owner: owner, repo: repo, pullNumber: pullNumber, reviewId: reviewId, inlineObject147: inlineObject147).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Dismiss a review for a pull request
     - PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals
     - **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#dismiss-a-review-for-a-pull-request
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter reviewId: (path) review_id parameter 
     - parameter inlineObject147: (body)  (optional)
     - returns: RequestBuilder<PullRequestReview> 
     */
    open class func pullsDismissReviewWithRequestBuilder(owner: String, repo: String, pullNumber: Int, reviewId: Int, inlineObject147: InlineObject147? = nil) -> RequestBuilder<PullRequestReview> {
        var path = "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let pullNumberPreEscape = "\(APIHelper.mapValueToPathItem(pullNumber))"
        let pullNumberPostEscape = pullNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pull_number}", with: pullNumberPostEscape, options: .literal, range: nil)
        let reviewIdPreEscape = "\(APIHelper.mapValueToPathItem(reviewId))"
        let reviewIdPostEscape = reviewIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{review_id}", with: reviewIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject147)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PullRequestReview>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get a pull request
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pullsGet(owner: String, repo: String, pullNumber: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: PullRequest?,_ error: Error?) -> Void)) {
        pullsGetWithRequestBuilder(owner: owner, repo: repo, pullNumber: pullNumber).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a pull request
     - GET /repos/{owner}/{repo}/pulls/{pull_number}
     - Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists details of a pull request by providing its number.  When you get, [create](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#update-a-pull-request) a pull request, GitHub Enterprise Server creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see \"[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@3.0/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\".  The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub Enterprise Server has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.  The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:  *   If merged as a [merge commit](https://help.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit. *   If merged via a [squash](https://help.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch. *   If [rebased](https://help.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.  Pass the appropriate [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/pulls/#get-a-pull-request
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - returns: RequestBuilder<PullRequest> 
     */
    open class func pullsGetWithRequestBuilder(owner: String, repo: String, pullNumber: Int) -> RequestBuilder<PullRequest> {
        var path = "/repos/{owner}/{repo}/pulls/{pull_number}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let pullNumberPreEscape = "\(APIHelper.mapValueToPathItem(pullNumber))"
        let pullNumberPostEscape = pullNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pull_number}", with: pullNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PullRequest>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a review for a pull request
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter reviewId: (path) review_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pullsGetReview(owner: String, repo: String, pullNumber: Int, reviewId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: PullRequestReview?,_ error: Error?) -> Void)) {
        pullsGetReviewWithRequestBuilder(owner: owner, repo: repo, pullNumber: pullNumber, reviewId: reviewId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a review for a pull request
     - GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#get-a-review-for-a-pull-request
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter reviewId: (path) review_id parameter 
     - returns: RequestBuilder<PullRequestReview> 
     */
    open class func pullsGetReviewWithRequestBuilder(owner: String, repo: String, pullNumber: Int, reviewId: Int) -> RequestBuilder<PullRequestReview> {
        var path = "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let pullNumberPreEscape = "\(APIHelper.mapValueToPathItem(pullNumber))"
        let pullNumberPostEscape = pullNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pull_number}", with: pullNumberPostEscape, options: .literal, range: nil)
        let reviewIdPreEscape = "\(APIHelper.mapValueToPathItem(reviewId))"
        let reviewIdPostEscape = reviewIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{review_id}", with: reviewIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PullRequestReview>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a review comment for a pull request
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pullsGetReviewComment(owner: String, repo: String, commentId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: PullRequestReviewComment?,_ error: Error?) -> Void)) {
        pullsGetReviewCommentWithRequestBuilder(owner: owner, repo: repo, commentId: commentId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a review comment for a pull request
     - GET /repos/{owner}/{repo}/pulls/comments/{comment_id}
     - Provides details for a review comment.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#get-a-review-comment-for-a-pull-request
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - returns: RequestBuilder<PullRequestReviewComment> 
     */
    open class func pullsGetReviewCommentWithRequestBuilder(owner: String, repo: String, commentId: Int) -> RequestBuilder<PullRequestReviewComment> {
        var path = "/repos/{owner}/{repo}/pulls/comments/{comment_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(APIHelper.mapValueToPathItem(commentId))"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_id}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PullRequestReviewComment>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter state
     */
    public enum State_pullsList: String, CaseIterable {
        case _open = "open"
        case closed = "closed"
        case all = "all"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_pullsList: String, CaseIterable {
        case created = "created"
        case updated = "updated"
        case popularity = "popularity"
        case longRunning = "long-running"
    }

    /**
     * enum for parameter direction
     */
    public enum Direction_pullsList: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     List pull requests
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter state: (query) Either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60; to filter by state. (optional, default to ._open)
     - parameter head: (query) Filter pulls by head user or head organization and branch name in the format of &#x60;user:ref-name&#x60; or &#x60;organization:ref-name&#x60;. For example: &#x60;github:new-script-format&#x60; or &#x60;octocat:test-branch&#x60;. (optional)
     - parameter base: (query) Filter pulls by base branch name. Example: &#x60;gh-pages&#x60;. (optional)
     - parameter sort: (query) What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;popularity&#x60; (comment count) or &#x60;long-running&#x60; (age, filtering by pulls updated in the last month). (optional, default to .created)
     - parameter direction: (query) The direction of the sort. Can be either &#x60;asc&#x60; or &#x60;desc&#x60;. Default: &#x60;desc&#x60; when sort is &#x60;created&#x60; or sort is not specified, otherwise &#x60;asc&#x60;. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pullsList(owner: String, repo: String, state: State_pullsList? = nil, head: String? = nil, base: String? = nil, sort: Sort_pullsList? = nil, direction: Direction_pullsList? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [PullRequestSimple]?,_ error: Error?) -> Void)) {
        pullsListWithRequestBuilder(owner: owner, repo: repo, state: state, head: head, base: base, sort: sort, direction: direction, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List pull requests
     - GET /repos/{owner}/{repo}/pulls
     - Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/pulls/#list-pull-requests
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter state: (query) Either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60; to filter by state. (optional, default to ._open)
     - parameter head: (query) Filter pulls by head user or head organization and branch name in the format of &#x60;user:ref-name&#x60; or &#x60;organization:ref-name&#x60;. For example: &#x60;github:new-script-format&#x60; or &#x60;octocat:test-branch&#x60;. (optional)
     - parameter base: (query) Filter pulls by base branch name. Example: &#x60;gh-pages&#x60;. (optional)
     - parameter sort: (query) What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;popularity&#x60; (comment count) or &#x60;long-running&#x60; (age, filtering by pulls updated in the last month). (optional, default to .created)
     - parameter direction: (query) The direction of the sort. Can be either &#x60;asc&#x60; or &#x60;desc&#x60;. Default: &#x60;desc&#x60; when sort is &#x60;created&#x60; or sort is not specified, otherwise &#x60;asc&#x60;. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[PullRequestSimple]> 
     */
    open class func pullsListWithRequestBuilder(owner: String, repo: String, state: State_pullsList? = nil, head: String? = nil, base: String? = nil, sort: Sort_pullsList? = nil, direction: Direction_pullsList? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[PullRequestSimple]> {
        var path = "/repos/{owner}/{repo}/pulls"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "state": state?.encodeToJSON(), 
            "head": head?.encodeToJSON(), 
            "base": base?.encodeToJSON(), 
            "sort": sort?.encodeToJSON(), 
            "direction": direction?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[PullRequestSimple]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List comments for a pull request review
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter reviewId: (path) review_id parameter 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pullsListCommentsForReview(owner: String, repo: String, pullNumber: Int, reviewId: Int, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [ReviewComment]?,_ error: Error?) -> Void)) {
        pullsListCommentsForReviewWithRequestBuilder(owner: owner, repo: repo, pullNumber: pullNumber, reviewId: reviewId, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List comments for a pull request review
     - GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments
     - List comments for a specific pull request review.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-comments-for-a-pull-request-review
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter reviewId: (path) review_id parameter 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[ReviewComment]> 
     */
    open class func pullsListCommentsForReviewWithRequestBuilder(owner: String, repo: String, pullNumber: Int, reviewId: Int, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[ReviewComment]> {
        var path = "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let pullNumberPreEscape = "\(APIHelper.mapValueToPathItem(pullNumber))"
        let pullNumberPostEscape = pullNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pull_number}", with: pullNumberPostEscape, options: .literal, range: nil)
        let reviewIdPreEscape = "\(APIHelper.mapValueToPathItem(reviewId))"
        let reviewIdPostEscape = reviewIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{review_id}", with: reviewIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[ReviewComment]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List commits on a pull request
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pullsListCommits(owner: String, repo: String, pullNumber: Int, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Commit]?,_ error: Error?) -> Void)) {
        pullsListCommitsWithRequestBuilder(owner: owner, repo: repo, pullNumber: pullNumber, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List commits on a pull request
     - GET /repos/{owner}/{repo}/pulls/{pull_number}/commits
     - Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-commits) endpoint.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/pulls/#list-commits-on-a-pull-request
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[Commit]> 
     */
    open class func pullsListCommitsWithRequestBuilder(owner: String, repo: String, pullNumber: Int, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[Commit]> {
        var path = "/repos/{owner}/{repo}/pulls/{pull_number}/commits"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let pullNumberPreEscape = "\(APIHelper.mapValueToPathItem(pullNumber))"
        let pullNumberPostEscape = pullNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pull_number}", with: pullNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Commit]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List pull requests files
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pullsListFiles(owner: String, repo: String, pullNumber: Int, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [DiffEntry]?,_ error: Error?) -> Void)) {
        pullsListFilesWithRequestBuilder(owner: owner, repo: repo, pullNumber: pullNumber, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List pull requests files
     - GET /repos/{owner}/{repo}/pulls/{pull_number}/files
     - **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/pulls/#list-pull-requests-files
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[DiffEntry]> 
     */
    open class func pullsListFilesWithRequestBuilder(owner: String, repo: String, pullNumber: Int, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[DiffEntry]> {
        var path = "/repos/{owner}/{repo}/pulls/{pull_number}/files"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let pullNumberPreEscape = "\(APIHelper.mapValueToPathItem(pullNumber))"
        let pullNumberPostEscape = pullNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pull_number}", with: pullNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[DiffEntry]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List requested reviewers for a pull request
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pullsListRequestedReviewers(owner: String, repo: String, pullNumber: Int, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: PullRequestReviewRequest?,_ error: Error?) -> Void)) {
        pullsListRequestedReviewersWithRequestBuilder(owner: owner, repo: repo, pullNumber: pullNumber, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List requested reviewers for a pull request
     - GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-requested-reviewers-for-a-pull-request
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<PullRequestReviewRequest> 
     */
    open class func pullsListRequestedReviewersWithRequestBuilder(owner: String, repo: String, pullNumber: Int, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<PullRequestReviewRequest> {
        var path = "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let pullNumberPreEscape = "\(APIHelper.mapValueToPathItem(pullNumber))"
        let pullNumberPostEscape = pullNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pull_number}", with: pullNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<PullRequestReviewRequest>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_pullsListReviewComments: String, CaseIterable {
        case created = "created"
        case updated = "updated"
    }

    /**
     * enum for parameter direction
     */
    public enum Direction_pullsListReviewComments: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     List review comments on a pull request
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter sort: (query) One of &#x60;created&#x60; (when the repository was starred) or &#x60;updated&#x60; (when it was last pushed to). (optional, default to .created)
     - parameter direction: (query) Can be either &#x60;asc&#x60; or &#x60;desc&#x60;. Ignored without &#x60;sort&#x60; parameter. (optional)
     - parameter since: (query) Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pullsListReviewComments(owner: String, repo: String, pullNumber: Int, sort: Sort_pullsListReviewComments? = nil, direction: Direction_pullsListReviewComments? = nil, since: String? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [PullRequestReviewComment]?,_ error: Error?) -> Void)) {
        pullsListReviewCommentsWithRequestBuilder(owner: owner, repo: repo, pullNumber: pullNumber, sort: sort, direction: direction, since: since, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List review comments on a pull request
     - GET /repos/{owner}/{repo}/pulls/{pull_number}/comments
     - Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-review-comments-on-a-pull-request
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter sort: (query) One of &#x60;created&#x60; (when the repository was starred) or &#x60;updated&#x60; (when it was last pushed to). (optional, default to .created)
     - parameter direction: (query) Can be either &#x60;asc&#x60; or &#x60;desc&#x60;. Ignored without &#x60;sort&#x60; parameter. (optional)
     - parameter since: (query) Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[PullRequestReviewComment]> 
     */
    open class func pullsListReviewCommentsWithRequestBuilder(owner: String, repo: String, pullNumber: Int, sort: Sort_pullsListReviewComments? = nil, direction: Direction_pullsListReviewComments? = nil, since: String? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[PullRequestReviewComment]> {
        var path = "/repos/{owner}/{repo}/pulls/{pull_number}/comments"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let pullNumberPreEscape = "\(APIHelper.mapValueToPathItem(pullNumber))"
        let pullNumberPostEscape = pullNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pull_number}", with: pullNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "sort": sort?.encodeToJSON(), 
            "direction": direction?.encodeToJSON(), 
            "since": since?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[PullRequestReviewComment]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_pullsListReviewCommentsForRepo: String, CaseIterable {
        case created = "created"
        case updated = "updated"
    }

    /**
     * enum for parameter direction
     */
    public enum Direction_pullsListReviewCommentsForRepo: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     List review comments in a repository
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter sort: (query) One of &#x60;created&#x60; (when the repository was starred) or &#x60;updated&#x60; (when it was last pushed to). (optional, default to .created)
     - parameter direction: (query) Can be either &#x60;asc&#x60; or &#x60;desc&#x60;. Ignored without &#x60;sort&#x60; parameter. (optional)
     - parameter since: (query) Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pullsListReviewCommentsForRepo(owner: String, repo: String, sort: Sort_pullsListReviewCommentsForRepo? = nil, direction: Direction_pullsListReviewCommentsForRepo? = nil, since: String? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [PullRequestReviewComment]?,_ error: Error?) -> Void)) {
        pullsListReviewCommentsForRepoWithRequestBuilder(owner: owner, repo: repo, sort: sort, direction: direction, since: since, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List review comments in a repository
     - GET /repos/{owner}/{repo}/pulls/comments
     - Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-review-comments-in-a-repository
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter sort: (query) One of &#x60;created&#x60; (when the repository was starred) or &#x60;updated&#x60; (when it was last pushed to). (optional, default to .created)
     - parameter direction: (query) Can be either &#x60;asc&#x60; or &#x60;desc&#x60;. Ignored without &#x60;sort&#x60; parameter. (optional)
     - parameter since: (query) Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[PullRequestReviewComment]> 
     */
    open class func pullsListReviewCommentsForRepoWithRequestBuilder(owner: String, repo: String, sort: Sort_pullsListReviewCommentsForRepo? = nil, direction: Direction_pullsListReviewCommentsForRepo? = nil, since: String? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[PullRequestReviewComment]> {
        var path = "/repos/{owner}/{repo}/pulls/comments"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "sort": sort?.encodeToJSON(), 
            "direction": direction?.encodeToJSON(), 
            "since": since?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[PullRequestReviewComment]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List reviews for a pull request
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pullsListReviews(owner: String, repo: String, pullNumber: Int, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [PullRequestReview]?,_ error: Error?) -> Void)) {
        pullsListReviewsWithRequestBuilder(owner: owner, repo: repo, pullNumber: pullNumber, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List reviews for a pull request
     - GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews
     - The list of reviews returns in chronological order.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-reviews-for-a-pull-request
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[PullRequestReview]> 
     */
    open class func pullsListReviewsWithRequestBuilder(owner: String, repo: String, pullNumber: Int, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[PullRequestReview]> {
        var path = "/repos/{owner}/{repo}/pulls/{pull_number}/reviews"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let pullNumberPreEscape = "\(APIHelper.mapValueToPathItem(pullNumber))"
        let pullNumberPostEscape = pullNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pull_number}", with: pullNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[PullRequestReview]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Merge a pull request
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter inlineObject142: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pullsMerge(owner: String, repo: String, pullNumber: Int, inlineObject142: InlineObject142? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: PullRequestMergeResult?,_ error: Error?) -> Void)) {
        pullsMergeWithRequestBuilder(owner: owner, repo: repo, pullNumber: pullNumber, inlineObject142: inlineObject142).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Merge a pull request
     - PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge
     - This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.0/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)\" for details.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/pulls/#merge-a-pull-request
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter inlineObject142: (body)  (optional)
     - returns: RequestBuilder<PullRequestMergeResult> 
     */
    open class func pullsMergeWithRequestBuilder(owner: String, repo: String, pullNumber: Int, inlineObject142: InlineObject142? = nil) -> RequestBuilder<PullRequestMergeResult> {
        var path = "/repos/{owner}/{repo}/pulls/{pull_number}/merge"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let pullNumberPreEscape = "\(APIHelper.mapValueToPathItem(pullNumber))"
        let pullNumberPostEscape = pullNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pull_number}", with: pullNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject142)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PullRequestMergeResult>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Remove requested reviewers from a pull request
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter inlineObject144: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pullsRemoveRequestedReviewers(owner: String, repo: String, pullNumber: Int, inlineObject144: InlineObject144? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        pullsRemoveRequestedReviewersWithRequestBuilder(owner: owner, repo: repo, pullNumber: pullNumber, inlineObject144: inlineObject144).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove requested reviewers from a pull request
     - DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#remove-requested-reviewers-from-a-pull-request
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter inlineObject144: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func pullsRemoveRequestedReviewersWithRequestBuilder(owner: String, repo: String, pullNumber: Int, inlineObject144: InlineObject144? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let pullNumberPreEscape = "\(APIHelper.mapValueToPathItem(pullNumber))"
        let pullNumberPostEscape = pullNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pull_number}", with: pullNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject144)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Request reviewers for a pull request
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter inlineObject143: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pullsRequestReviewers(owner: String, repo: String, pullNumber: Int, inlineObject143: InlineObject143? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: PullRequestSimple?,_ error: Error?) -> Void)) {
        pullsRequestReviewersWithRequestBuilder(owner: owner, repo: repo, pullNumber: pullNumber, inlineObject143: inlineObject143).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Request reviewers for a pull request
     - POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers
     - This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.0/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)\" for details.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#request-reviewers-for-a-pull-request
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter inlineObject143: (body)  (optional)
     - returns: RequestBuilder<PullRequestSimple> 
     */
    open class func pullsRequestReviewersWithRequestBuilder(owner: String, repo: String, pullNumber: Int, inlineObject143: InlineObject143? = nil) -> RequestBuilder<PullRequestSimple> {
        var path = "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let pullNumberPreEscape = "\(APIHelper.mapValueToPathItem(pullNumber))"
        let pullNumberPostEscape = pullNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pull_number}", with: pullNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject143)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PullRequestSimple>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Submit a review for a pull request
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter reviewId: (path) review_id parameter 
     - parameter inlineObject148: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pullsSubmitReview(owner: String, repo: String, pullNumber: Int, reviewId: Int, inlineObject148: InlineObject148? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: PullRequestReview?,_ error: Error?) -> Void)) {
        pullsSubmitReviewWithRequestBuilder(owner: owner, repo: repo, pullNumber: pullNumber, reviewId: reviewId, inlineObject148: inlineObject148).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Submit a review for a pull request
     - POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#submit-a-review-for-a-pull-request
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter reviewId: (path) review_id parameter 
     - parameter inlineObject148: (body)  (optional)
     - returns: RequestBuilder<PullRequestReview> 
     */
    open class func pullsSubmitReviewWithRequestBuilder(owner: String, repo: String, pullNumber: Int, reviewId: Int, inlineObject148: InlineObject148? = nil) -> RequestBuilder<PullRequestReview> {
        var path = "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let pullNumberPreEscape = "\(APIHelper.mapValueToPathItem(pullNumber))"
        let pullNumberPostEscape = pullNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pull_number}", with: pullNumberPostEscape, options: .literal, range: nil)
        let reviewIdPreEscape = "\(APIHelper.mapValueToPathItem(reviewId))"
        let reviewIdPostEscape = reviewIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{review_id}", with: reviewIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject148)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PullRequestReview>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a pull request
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter inlineObject139: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pullsUpdate(owner: String, repo: String, pullNumber: Int, inlineObject139: InlineObject139? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: PullRequest?,_ error: Error?) -> Void)) {
        pullsUpdateWithRequestBuilder(owner: owner, repo: repo, pullNumber: pullNumber, inlineObject139: inlineObject139).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a pull request
     - PATCH /repos/{owner}/{repo}/pulls/{pull_number}
     - Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/pulls/#update-a-pull-request
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter inlineObject139: (body)  (optional)
     - returns: RequestBuilder<PullRequest> 
     */
    open class func pullsUpdateWithRequestBuilder(owner: String, repo: String, pullNumber: Int, inlineObject139: InlineObject139? = nil) -> RequestBuilder<PullRequest> {
        var path = "/repos/{owner}/{repo}/pulls/{pull_number}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let pullNumberPreEscape = "\(APIHelper.mapValueToPathItem(pullNumber))"
        let pullNumberPostEscape = pullNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pull_number}", with: pullNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject139)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PullRequest>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a pull request branch
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter inlineObject149: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pullsUpdateBranch(owner: String, repo: String, pullNumber: Int, inlineObject149: InlineObject149? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse202?,_ error: Error?) -> Void)) {
        pullsUpdateBranchWithRequestBuilder(owner: owner, repo: repo, pullNumber: pullNumber, inlineObject149: inlineObject149).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a pull request branch
     - PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch
     - Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/pulls/#update-a-pull-request-branch
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter inlineObject149: (body)  (optional)
     - returns: RequestBuilder<InlineResponse202> 
     */
    open class func pullsUpdateBranchWithRequestBuilder(owner: String, repo: String, pullNumber: Int, inlineObject149: InlineObject149? = nil) -> RequestBuilder<InlineResponse202> {
        var path = "/repos/{owner}/{repo}/pulls/{pull_number}/update-branch"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let pullNumberPreEscape = "\(APIHelper.mapValueToPathItem(pullNumber))"
        let pullNumberPostEscape = pullNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pull_number}", with: pullNumberPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject149)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse202>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a review for a pull request
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter reviewId: (path) review_id parameter 
     - parameter inlineObject146: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pullsUpdateReview(owner: String, repo: String, pullNumber: Int, reviewId: Int, inlineObject146: InlineObject146? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: PullRequestReview?,_ error: Error?) -> Void)) {
        pullsUpdateReviewWithRequestBuilder(owner: owner, repo: repo, pullNumber: pullNumber, reviewId: reviewId, inlineObject146: inlineObject146).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a review for a pull request
     - PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}
     - Update the review summary comment with new text.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#update-a-review-for-a-pull-request
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter pullNumber: (path)  
     - parameter reviewId: (path) review_id parameter 
     - parameter inlineObject146: (body)  (optional)
     - returns: RequestBuilder<PullRequestReview> 
     */
    open class func pullsUpdateReviewWithRequestBuilder(owner: String, repo: String, pullNumber: Int, reviewId: Int, inlineObject146: InlineObject146? = nil) -> RequestBuilder<PullRequestReview> {
        var path = "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let pullNumberPreEscape = "\(APIHelper.mapValueToPathItem(pullNumber))"
        let pullNumberPostEscape = pullNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pull_number}", with: pullNumberPostEscape, options: .literal, range: nil)
        let reviewIdPreEscape = "\(APIHelper.mapValueToPathItem(reviewId))"
        let reviewIdPostEscape = reviewIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{review_id}", with: reviewIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject146)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PullRequestReview>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a review comment for a pull request
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - parameter inlineObject137: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pullsUpdateReviewComment(owner: String, repo: String, commentId: Int, inlineObject137: InlineObject137? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: PullRequestReviewComment?,_ error: Error?) -> Void)) {
        pullsUpdateReviewCommentWithRequestBuilder(owner: owner, repo: repo, commentId: commentId, inlineObject137: inlineObject137).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a review comment for a pull request
     - PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}
     - Enables you to edit a review comment.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#update-a-review-comment-for-a-pull-request
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter commentId: (path) comment_id parameter 
     - parameter inlineObject137: (body)  (optional)
     - returns: RequestBuilder<PullRequestReviewComment> 
     */
    open class func pullsUpdateReviewCommentWithRequestBuilder(owner: String, repo: String, commentId: Int, inlineObject137: InlineObject137? = nil) -> RequestBuilder<PullRequestReviewComment> {
        var path = "/repos/{owner}/{repo}/pulls/comments/{comment_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(APIHelper.mapValueToPathItem(commentId))"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_id}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject137)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PullRequestReviewComment>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
