//
// ActionsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class ActionsAPI {
    /**
     Add repository access to a self-hosted runner group in an organization
     
     - parameter org: (path)  
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter repositoryId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsAddRepoAccessToSelfHostedRunnerGroupInOrg(org: String, runnerGroupId: Int, repositoryId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsAddRepoAccessToSelfHostedRunnerGroupInOrgWithRequestBuilder(org: org, runnerGroupId: runnerGroupId, repositoryId: repositoryId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add repository access to a self-hosted runner group in an organization
     - PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}
     - Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\" You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#add-repository-acess-to-a-self-hosted-runner-group-in-an-organization
}
     - parameter org: (path)  
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter repositoryId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func actionsAddRepoAccessToSelfHostedRunnerGroupInOrgWithRequestBuilder(org: String, runnerGroupId: Int, repositoryId: Int) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let runnerGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(runnerGroupId))"
        let runnerGroupIdPostEscape = runnerGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runner_group_id}", with: runnerGroupIdPostEscape, options: .literal, range: nil)
        let repositoryIdPreEscape = "\(APIHelper.mapValueToPathItem(repositoryId))"
        let repositoryIdPostEscape = repositoryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repository_id}", with: repositoryIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Add selected repository to an organization secret
     
     - parameter org: (path)  
     - parameter secretName: (path) secret_name parameter 
     - parameter repositoryId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsAddSelectedRepoToOrgSecret(org: String, secretName: String, repositoryId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsAddSelectedRepoToOrgSecretWithRequestBuilder(org: org, secretName: secretName, repositoryId: repositoryId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add selected repository to an organization secret
     - PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}
     - Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.0/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#add-selected-repository-to-an-organization-secret
}
     - parameter org: (path)  
     - parameter secretName: (path) secret_name parameter 
     - parameter repositoryId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func actionsAddSelectedRepoToOrgSecretWithRequestBuilder(org: String, secretName: String, repositoryId: Int) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let secretNamePreEscape = "\(APIHelper.mapValueToPathItem(secretName))"
        let secretNamePostEscape = secretNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{secret_name}", with: secretNamePostEscape, options: .literal, range: nil)
        let repositoryIdPreEscape = "\(APIHelper.mapValueToPathItem(repositoryId))"
        let repositoryIdPostEscape = repositoryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repository_id}", with: repositoryIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Add a self-hosted runner to a group for an organization
     
     - parameter org: (path)  
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter runnerId: (path) Unique identifier of the self-hosted runner. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsAddSelfHostedRunnerToGroupForOrg(org: String, runnerGroupId: Int, runnerId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsAddSelfHostedRunnerToGroupForOrgWithRequestBuilder(org: org, runnerGroupId: runnerGroupId, runnerId: runnerId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add a self-hosted runner to a group for an organization
     - PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}
     - Adds a self-hosted runner to a runner group configured in an organization. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#add-a-self-hosted-runner-to-a-group-for-an-organization
}
     - parameter org: (path)  
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter runnerId: (path) Unique identifier of the self-hosted runner. 
     - returns: RequestBuilder<Void> 
     */
    open class func actionsAddSelfHostedRunnerToGroupForOrgWithRequestBuilder(org: String, runnerGroupId: Int, runnerId: Int) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let runnerGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(runnerGroupId))"
        let runnerGroupIdPostEscape = runnerGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runner_group_id}", with: runnerGroupIdPostEscape, options: .literal, range: nil)
        let runnerIdPreEscape = "\(APIHelper.mapValueToPathItem(runnerId))"
        let runnerIdPostEscape = runnerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runner_id}", with: runnerIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Cancel a workflow run
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter runId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsCancelWorkflowRun(owner: String, repo: String, runId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsCancelWorkflowRunWithRequestBuilder(owner: owner, repo: repo, runId: runId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Cancel a workflow run
     - POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel
     - Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#cancel-a-workflow-run
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter runId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func actionsCancelWorkflowRunWithRequestBuilder(owner: String, repo: String, runId: Int) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/actions/runs/{run_id}/cancel"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let runIdPreEscape = "\(APIHelper.mapValueToPathItem(runId))"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{run_id}", with: runIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create or update an organization secret
     
     - parameter org: (path)  
     - parameter secretName: (path) secret_name parameter 
     - parameter inlineObject44: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsCreateOrUpdateOrgSecret(org: String, secretName: String, inlineObject44: InlineObject44? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsCreateOrUpdateOrgSecretWithRequestBuilder(org: org, secretName: secretName, inlineObject44: inlineObject44).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create or update an organization secret
     - PUT /orgs/{org}/actions/secrets/{secret_name}
     - Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  ``` const sodium = require('tweetsodium');  const key = \"base64-encoded-public-key\"; const value = \"plain-text-secret\";  // Convert the message and key to Uint8Array's (Buffer implements that interface) const messageBytes = Buffer.from(value); const keyBytes = Buffer.from(key, 'base64');  // Encrypt using LibSodium. const encryptedBytes = sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted = Buffer.from(encryptedBytes).toString('base64');  console.log(encrypted); ```   #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.  ``` from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -> str:   \"\"\"Encrypt a Unicode string using the public key.\"\"\"   public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())   sealed_box = public.SealedBox(public_key)   encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))   return b64encode(encrypted).decode(\"utf-8\") ```  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  ``` var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\"); var publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");  var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); ```  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  ```ruby require \"rbnacl\" require \"base64\"  key = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\") public_key = RbNaCl::PublicKey.new(key)  box = RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret = box.encrypt(\"my_secret\")  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) ```
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#create-or-update-an-organization-secret
}
     - parameter org: (path)  
     - parameter secretName: (path) secret_name parameter 
     - parameter inlineObject44: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func actionsCreateOrUpdateOrgSecretWithRequestBuilder(org: String, secretName: String, inlineObject44: InlineObject44? = nil) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/actions/secrets/{secret_name}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let secretNamePreEscape = "\(APIHelper.mapValueToPathItem(secretName))"
        let secretNamePostEscape = secretNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{secret_name}", with: secretNamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject44)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create or update a repository secret
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter secretName: (path) secret_name parameter 
     - parameter inlineObject73: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsCreateOrUpdateRepoSecret(owner: String, repo: String, secretName: String, inlineObject73: InlineObject73? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsCreateOrUpdateRepoSecretWithRequestBuilder(owner: owner, repo: repo, secretName: secretName, inlineObject73: inlineObject73).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create or update a repository secret
     - PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}
     - Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  ``` const sodium = require('tweetsodium');  const key = \"base64-encoded-public-key\"; const value = \"plain-text-secret\";  // Convert the message and key to Uint8Array's (Buffer implements that interface) const messageBytes = Buffer.from(value); const keyBytes = Buffer.from(key, 'base64');  // Encrypt using LibSodium. const encryptedBytes = sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted = Buffer.from(encryptedBytes).toString('base64');  console.log(encrypted); ```   #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.  ``` from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -> str:   \"\"\"Encrypt a Unicode string using the public key.\"\"\"   public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())   sealed_box = public.SealedBox(public_key)   encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))   return b64encode(encrypted).decode(\"utf-8\") ```  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  ``` var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\"); var publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");  var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); ```  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  ```ruby require \"rbnacl\" require \"base64\"  key = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\") public_key = RbNaCl::PublicKey.new(key)  box = RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret = box.encrypt(\"my_secret\")  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) ```
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#create-or-update-a-repository-secret
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter secretName: (path) secret_name parameter 
     - parameter inlineObject73: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func actionsCreateOrUpdateRepoSecretWithRequestBuilder(owner: String, repo: String, secretName: String, inlineObject73: InlineObject73? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/actions/secrets/{secret_name}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let secretNamePreEscape = "\(APIHelper.mapValueToPathItem(secretName))"
        let secretNamePostEscape = secretNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{secret_name}", with: secretNamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject73)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a registration token for an organization
     
     - parameter org: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsCreateRegistrationTokenForOrg(org: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticationToken?,_ error: Error?) -> Void)) {
        actionsCreateRegistrationTokenForOrgWithRequestBuilder(org: org).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a registration token for an organization
     - POST /orgs/{org}/actions/runners/registration-token
     - Returns a token that you can pass to the `config` script. The token expires after one hour.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.  #### Example using registration token  Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.  ``` ./config.sh --url https://github.com/octo-org --token TOKEN ```
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#create-a-registration-token-for-an-organization
}
     - parameter org: (path)  
     - returns: RequestBuilder<AuthenticationToken> 
     */
    open class func actionsCreateRegistrationTokenForOrgWithRequestBuilder(org: String) -> RequestBuilder<AuthenticationToken> {
        var path = "/orgs/{org}/actions/runners/registration-token"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AuthenticationToken>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a registration token for a repository
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsCreateRegistrationTokenForRepo(owner: String, repo: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticationToken?,_ error: Error?) -> Void)) {
        actionsCreateRegistrationTokenForRepoWithRequestBuilder(owner: owner, repo: repo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a registration token for a repository
     - POST /repos/{owner}/{repo}/actions/runners/registration-token
     - Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate using an access token with the `repo` scope to use this endpoint.  #### Example using registration token   Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.  ``` ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN ```
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#create-a-registration-token-for-a-repository
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - returns: RequestBuilder<AuthenticationToken> 
     */
    open class func actionsCreateRegistrationTokenForRepoWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<AuthenticationToken> {
        var path = "/repos/{owner}/{repo}/actions/runners/registration-token"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AuthenticationToken>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a remove token for an organization
     
     - parameter org: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsCreateRemoveTokenForOrg(org: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticationToken?,_ error: Error?) -> Void)) {
        actionsCreateRemoveTokenForOrgWithRequestBuilder(org: org).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a remove token for an organization
     - POST /orgs/{org}/actions/runners/remove-token
     - Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.  #### Example using remove token  To remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this endpoint.  ``` ./config.sh remove --token TOKEN ```
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#create-a-remove-token-for-an-organization
}
     - parameter org: (path)  
     - returns: RequestBuilder<AuthenticationToken> 
     */
    open class func actionsCreateRemoveTokenForOrgWithRequestBuilder(org: String) -> RequestBuilder<AuthenticationToken> {
        var path = "/orgs/{org}/actions/runners/remove-token"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AuthenticationToken>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a remove token for a repository
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsCreateRemoveTokenForRepo(owner: String, repo: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticationToken?,_ error: Error?) -> Void)) {
        actionsCreateRemoveTokenForRepoWithRequestBuilder(owner: owner, repo: repo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a remove token for a repository
     - POST /repos/{owner}/{repo}/actions/runners/remove-token
     - Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour. You must authenticate using an access token with the `repo` scope to use this endpoint.  #### Example using remove token   To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.  ``` ./config.sh remove --token TOKEN ```
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#create-a-remove-token-for-a-repository
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - returns: RequestBuilder<AuthenticationToken> 
     */
    open class func actionsCreateRemoveTokenForRepoWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<AuthenticationToken> {
        var path = "/repos/{owner}/{repo}/actions/runners/remove-token"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AuthenticationToken>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a self-hosted runner group for an organization
     
     - parameter org: (path)  
     - parameter inlineObject40: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsCreateSelfHostedRunnerGroupForOrg(org: String, inlineObject40: InlineObject40? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: RunnerGroupsOrg?,_ error: Error?) -> Void)) {
        actionsCreateSelfHostedRunnerGroupForOrgWithRequestBuilder(org: org, inlineObject40: inlineObject40).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a self-hosted runner group for an organization
     - POST /orgs/{org}/actions/runner-groups
     - The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"  Creates a new self-hosted runner group for an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#create-a-self-hosted-runner-group-for-an-organization
}
     - parameter org: (path)  
     - parameter inlineObject40: (body)  (optional)
     - returns: RequestBuilder<RunnerGroupsOrg> 
     */
    open class func actionsCreateSelfHostedRunnerGroupForOrgWithRequestBuilder(org: String, inlineObject40: InlineObject40? = nil) -> RequestBuilder<RunnerGroupsOrg> {
        var path = "/orgs/{org}/actions/runner-groups"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject40)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RunnerGroupsOrg>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a workflow dispatch event
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter workflowId: (path) The ID of the workflow. You can also pass the workflow file name as a string. 
     - parameter inlineObject74: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsCreateWorkflowDispatch(owner: String, repo: String, workflowId: String, inlineObject74: InlineObject74? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsCreateWorkflowDispatchWithRequestBuilder(owner: owner, repo: repo, workflowId: workflowId, inlineObject74: inlineObject74).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a workflow dispatch event
     - POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches
     - You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.  You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see \"[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch).\"  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see \"[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line).\"
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#create-a-workflow-dispatch-event
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter workflowId: (path) The ID of the workflow. You can also pass the workflow file name as a string. 
     - parameter inlineObject74: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func actionsCreateWorkflowDispatchWithRequestBuilder(owner: String, repo: String, workflowId: String, inlineObject74: InlineObject74? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let workflowIdPreEscape = "\(APIHelper.mapValueToPathItem(workflowId))"
        let workflowIdPostEscape = workflowIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workflow_id}", with: workflowIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject74)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete an artifact
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter artifactId: (path) artifact_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsDeleteArtifact(owner: String, repo: String, artifactId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsDeleteArtifactWithRequestBuilder(owner: owner, repo: repo, artifactId: artifactId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete an artifact
     - DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}
     - Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#delete-an-artifact
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter artifactId: (path) artifact_id parameter 
     - returns: RequestBuilder<Void> 
     */
    open class func actionsDeleteArtifactWithRequestBuilder(owner: String, repo: String, artifactId: Int) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let artifactIdPreEscape = "\(APIHelper.mapValueToPathItem(artifactId))"
        let artifactIdPostEscape = artifactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{artifact_id}", with: artifactIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete an organization secret
     
     - parameter org: (path)  
     - parameter secretName: (path) secret_name parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsDeleteOrgSecret(org: String, secretName: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsDeleteOrgSecretWithRequestBuilder(org: org, secretName: secretName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete an organization secret
     - DELETE /orgs/{org}/actions/secrets/{secret_name}
     - Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#delete-an-organization-secret
}
     - parameter org: (path)  
     - parameter secretName: (path) secret_name parameter 
     - returns: RequestBuilder<Void> 
     */
    open class func actionsDeleteOrgSecretWithRequestBuilder(org: String, secretName: String) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/actions/secrets/{secret_name}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let secretNamePreEscape = "\(APIHelper.mapValueToPathItem(secretName))"
        let secretNamePostEscape = secretNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{secret_name}", with: secretNamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a repository secret
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter secretName: (path) secret_name parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsDeleteRepoSecret(owner: String, repo: String, secretName: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsDeleteRepoSecretWithRequestBuilder(owner: owner, repo: repo, secretName: secretName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a repository secret
     - DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}
     - Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#delete-a-repository-secret
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter secretName: (path) secret_name parameter 
     - returns: RequestBuilder<Void> 
     */
    open class func actionsDeleteRepoSecretWithRequestBuilder(owner: String, repo: String, secretName: String) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/actions/secrets/{secret_name}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let secretNamePreEscape = "\(APIHelper.mapValueToPathItem(secretName))"
        let secretNamePostEscape = secretNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{secret_name}", with: secretNamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a self-hosted runner from an organization
     
     - parameter org: (path)  
     - parameter runnerId: (path) Unique identifier of the self-hosted runner. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsDeleteSelfHostedRunnerFromOrg(org: String, runnerId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsDeleteSelfHostedRunnerFromOrgWithRequestBuilder(org: org, runnerId: runnerId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a self-hosted runner from an organization
     - DELETE /orgs/{org}/actions/runners/{runner_id}
     - Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#delete-a-self-hosted-runner-from-an-organization
}
     - parameter org: (path)  
     - parameter runnerId: (path) Unique identifier of the self-hosted runner. 
     - returns: RequestBuilder<Void> 
     */
    open class func actionsDeleteSelfHostedRunnerFromOrgWithRequestBuilder(org: String, runnerId: Int) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/actions/runners/{runner_id}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let runnerIdPreEscape = "\(APIHelper.mapValueToPathItem(runnerId))"
        let runnerIdPostEscape = runnerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runner_id}", with: runnerIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a self-hosted runner from a repository
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter runnerId: (path) Unique identifier of the self-hosted runner. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsDeleteSelfHostedRunnerFromRepo(owner: String, repo: String, runnerId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsDeleteSelfHostedRunnerFromRepoWithRequestBuilder(owner: owner, repo: repo, runnerId: runnerId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a self-hosted runner from a repository
     - DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}
     - Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the `repo` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#delete-a-self-hosted-runner-from-a-repository
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter runnerId: (path) Unique identifier of the self-hosted runner. 
     - returns: RequestBuilder<Void> 
     */
    open class func actionsDeleteSelfHostedRunnerFromRepoWithRequestBuilder(owner: String, repo: String, runnerId: Int) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/actions/runners/{runner_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let runnerIdPreEscape = "\(APIHelper.mapValueToPathItem(runnerId))"
        let runnerIdPostEscape = runnerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runner_id}", with: runnerIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a self-hosted runner group from an organization
     
     - parameter org: (path)  
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsDeleteSelfHostedRunnerGroupFromOrg(org: String, runnerGroupId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsDeleteSelfHostedRunnerGroupFromOrgWithRequestBuilder(org: org, runnerGroupId: runnerGroupId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a self-hosted runner group from an organization
     - DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}
     - Deletes a self-hosted runner group for an organization. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#delete-a-self-hosted-runner-group-from-an-organization
}
     - parameter org: (path)  
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - returns: RequestBuilder<Void> 
     */
    open class func actionsDeleteSelfHostedRunnerGroupFromOrgWithRequestBuilder(org: String, runnerGroupId: Int) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/actions/runner-groups/{runner_group_id}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let runnerGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(runnerGroupId))"
        let runnerGroupIdPostEscape = runnerGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runner_group_id}", with: runnerGroupIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a workflow run
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter runId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsDeleteWorkflowRun(owner: String, repo: String, runId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsDeleteWorkflowRunWithRequestBuilder(owner: owner, repo: repo, runId: runId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a workflow run
     - DELETE /repos/{owner}/{repo}/actions/runs/{run_id}
     - Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#delete-a-workflow-run
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter runId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func actionsDeleteWorkflowRunWithRequestBuilder(owner: String, repo: String, runId: Int) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/actions/runs/{run_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let runIdPreEscape = "\(APIHelper.mapValueToPathItem(runId))"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{run_id}", with: runIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete workflow run logs
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter runId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsDeleteWorkflowRunLogs(owner: String, repo: String, runId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsDeleteWorkflowRunLogsWithRequestBuilder(owner: owner, repo: repo, runId: runId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete workflow run logs
     - DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs
     - Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#delete-workflow-run-logs
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter runId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func actionsDeleteWorkflowRunLogsWithRequestBuilder(owner: String, repo: String, runId: Int) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/actions/runs/{run_id}/logs"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let runIdPreEscape = "\(APIHelper.mapValueToPathItem(runId))"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{run_id}", with: runIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Disable a selected repository for GitHub Actions in an organization
     
     - parameter org: (path)  
     - parameter repositoryId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsDisableSelectedRepositoryGithubActionsOrganization(org: String, repositoryId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsDisableSelectedRepositoryGithubActionsOrganizationWithRequestBuilder(org: org, repositoryId: repositoryId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Disable a selected repository for GitHub Actions in an organization
     - DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}
     - Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#disable-a-selected-repository-for-github-actions-in-an-organization
}
     - parameter org: (path)  
     - parameter repositoryId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func actionsDisableSelectedRepositoryGithubActionsOrganizationWithRequestBuilder(org: String, repositoryId: Int) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/actions/permissions/repositories/{repository_id}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let repositoryIdPreEscape = "\(APIHelper.mapValueToPathItem(repositoryId))"
        let repositoryIdPostEscape = repositoryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repository_id}", with: repositoryIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Disable a workflow
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter workflowId: (path) The ID of the workflow. You can also pass the workflow file name as a string. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsDisableWorkflow(owner: String, repo: String, workflowId: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsDisableWorkflowWithRequestBuilder(owner: owner, repo: repo, workflowId: workflowId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Disable a workflow
     - PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable
     - Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#disable-a-workflow
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter workflowId: (path) The ID of the workflow. You can also pass the workflow file name as a string. 
     - returns: RequestBuilder<Void> 
     */
    open class func actionsDisableWorkflowWithRequestBuilder(owner: String, repo: String, workflowId: String) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let workflowIdPreEscape = "\(APIHelper.mapValueToPathItem(workflowId))"
        let workflowIdPostEscape = workflowIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workflow_id}", with: workflowIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Download an artifact
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter artifactId: (path) artifact_id parameter 
     - parameter archiveFormat: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsDownloadArtifact(owner: String, repo: String, artifactId: Int, archiveFormat: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsDownloadArtifactWithRequestBuilder(owner: owner, repo: repo, artifactId: artifactId, archiveFormat: archiveFormat).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Download an artifact
     - GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}
     - Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#download-an-artifact
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter artifactId: (path) artifact_id parameter 
     - parameter archiveFormat: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func actionsDownloadArtifactWithRequestBuilder(owner: String, repo: String, artifactId: Int, archiveFormat: String) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let artifactIdPreEscape = "\(APIHelper.mapValueToPathItem(artifactId))"
        let artifactIdPostEscape = artifactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{artifact_id}", with: artifactIdPostEscape, options: .literal, range: nil)
        let archiveFormatPreEscape = "\(APIHelper.mapValueToPathItem(archiveFormat))"
        let archiveFormatPostEscape = archiveFormatPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{archive_format}", with: archiveFormatPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Download job logs for a workflow run
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter jobId: (path) job_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsDownloadJobLogsForWorkflowRun(owner: String, repo: String, jobId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsDownloadJobLogsForWorkflowRunWithRequestBuilder(owner: owner, repo: repo, jobId: jobId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Download job logs for a workflow run
     - GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs
     - Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#download-job-logs-for-a-workflow-run
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter jobId: (path) job_id parameter 
     - returns: RequestBuilder<Void> 
     */
    open class func actionsDownloadJobLogsForWorkflowRunWithRequestBuilder(owner: String, repo: String, jobId: Int) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/actions/jobs/{job_id}/logs"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let jobIdPreEscape = "\(APIHelper.mapValueToPathItem(jobId))"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{job_id}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Download workflow run logs
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter runId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsDownloadWorkflowRunLogs(owner: String, repo: String, runId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsDownloadWorkflowRunLogsWithRequestBuilder(owner: owner, repo: repo, runId: runId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Download workflow run logs
     - GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs
     - Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#download-workflow-run-logs
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter runId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func actionsDownloadWorkflowRunLogsWithRequestBuilder(owner: String, repo: String, runId: Int) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/actions/runs/{run_id}/logs"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let runIdPreEscape = "\(APIHelper.mapValueToPathItem(runId))"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{run_id}", with: runIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Enable a selected repository for GitHub Actions in an organization
     
     - parameter org: (path)  
     - parameter repositoryId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsEnableSelectedRepositoryGithubActionsOrganization(org: String, repositoryId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsEnableSelectedRepositoryGithubActionsOrganizationWithRequestBuilder(org: org, repositoryId: repositoryId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Enable a selected repository for GitHub Actions in an organization
     - PUT /orgs/{org}/actions/permissions/repositories/{repository_id}
     - Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#enable-a-selected-repository-for-github-actions-in-an-organization
}
     - parameter org: (path)  
     - parameter repositoryId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func actionsEnableSelectedRepositoryGithubActionsOrganizationWithRequestBuilder(org: String, repositoryId: Int) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/actions/permissions/repositories/{repository_id}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let repositoryIdPreEscape = "\(APIHelper.mapValueToPathItem(repositoryId))"
        let repositoryIdPostEscape = repositoryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repository_id}", with: repositoryIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Enable a workflow
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter workflowId: (path) The ID of the workflow. You can also pass the workflow file name as a string. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsEnableWorkflow(owner: String, repo: String, workflowId: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsEnableWorkflowWithRequestBuilder(owner: owner, repo: repo, workflowId: workflowId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Enable a workflow
     - PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable
     - Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#enable-a-workflow
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter workflowId: (path) The ID of the workflow. You can also pass the workflow file name as a string. 
     - returns: RequestBuilder<Void> 
     */
    open class func actionsEnableWorkflowWithRequestBuilder(owner: String, repo: String, workflowId: String) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let workflowIdPreEscape = "\(APIHelper.mapValueToPathItem(workflowId))"
        let workflowIdPostEscape = workflowIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workflow_id}", with: workflowIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get allowed actions for an organization
     
     - parameter org: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsGetAllowedActionsOrganization(org: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: SelectedActions?,_ error: Error?) -> Void)) {
        actionsGetAllowedActionsOrganizationWithRequestBuilder(org: org).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get allowed actions for an organization
     - GET /orgs/{org}/actions/permissions/selected-actions
     - Gets the selected actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\"  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#get-allowed-actions-for-an-organization
}
     - parameter org: (path)  
     - returns: RequestBuilder<SelectedActions> 
     */
    open class func actionsGetAllowedActionsOrganizationWithRequestBuilder(org: String) -> RequestBuilder<SelectedActions> {
        var path = "/orgs/{org}/actions/permissions/selected-actions"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SelectedActions>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get allowed actions for a repository
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsGetAllowedActionsRepository(owner: String, repo: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: SelectedActions?,_ error: Error?) -> Void)) {
        actionsGetAllowedActionsRepositoryWithRequestBuilder(owner: owner, repo: repo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get allowed actions for a repository
     - GET /repos/{owner}/{repo}/actions/permissions/selected-actions
     - Gets the settings for selected actions that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\"  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#get-allowed-actions-for-a-repository
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - returns: RequestBuilder<SelectedActions> 
     */
    open class func actionsGetAllowedActionsRepositoryWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<SelectedActions> {
        var path = "/repos/{owner}/{repo}/actions/permissions/selected-actions"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SelectedActions>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get an artifact
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter artifactId: (path) artifact_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsGetArtifact(owner: String, repo: String, artifactId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Artifact?,_ error: Error?) -> Void)) {
        actionsGetArtifactWithRequestBuilder(owner: owner, repo: repo, artifactId: artifactId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get an artifact
     - GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}
     - Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#get-an-artifact
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter artifactId: (path) artifact_id parameter 
     - returns: RequestBuilder<Artifact> 
     */
    open class func actionsGetArtifactWithRequestBuilder(owner: String, repo: String, artifactId: Int) -> RequestBuilder<Artifact> {
        var path = "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let artifactIdPreEscape = "\(APIHelper.mapValueToPathItem(artifactId))"
        let artifactIdPostEscape = artifactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{artifact_id}", with: artifactIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Artifact>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get GitHub Actions permissions for an organization
     
     - parameter org: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsGetGithubActionsPermissionsOrganization(org: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: ActionsOrganizationPermissions?,_ error: Error?) -> Void)) {
        actionsGetGithubActionsPermissionsOrganizationWithRequestBuilder(org: org).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get GitHub Actions permissions for an organization
     - GET /orgs/{org}/actions/permissions
     - Gets the GitHub Actions permissions policy for repositories and allowed actions in an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#get-github-actions-permissions-for-an-organization
}
     - parameter org: (path)  
     - returns: RequestBuilder<ActionsOrganizationPermissions> 
     */
    open class func actionsGetGithubActionsPermissionsOrganizationWithRequestBuilder(org: String) -> RequestBuilder<ActionsOrganizationPermissions> {
        var path = "/orgs/{org}/actions/permissions"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ActionsOrganizationPermissions>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get GitHub Actions permissions for a repository
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsGetGithubActionsPermissionsRepository(owner: String, repo: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: ActionsRepositoryPermissions?,_ error: Error?) -> Void)) {
        actionsGetGithubActionsPermissionsRepositoryWithRequestBuilder(owner: owner, repo: repo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get GitHub Actions permissions for a repository
     - GET /repos/{owner}/{repo}/actions/permissions
     - Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions allowed to run in the repository.  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#get-github-actions-permissions-for-a-repository
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - returns: RequestBuilder<ActionsRepositoryPermissions> 
     */
    open class func actionsGetGithubActionsPermissionsRepositoryWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<ActionsRepositoryPermissions> {
        var path = "/repos/{owner}/{repo}/actions/permissions"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ActionsRepositoryPermissions>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a job for a workflow run
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter jobId: (path) job_id parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsGetJobForWorkflowRun(owner: String, repo: String, jobId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Job?,_ error: Error?) -> Void)) {
        actionsGetJobForWorkflowRunWithRequestBuilder(owner: owner, repo: repo, jobId: jobId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a job for a workflow run
     - GET /repos/{owner}/{repo}/actions/jobs/{job_id}
     - Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#get-a-job-for-a-workflow-run
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter jobId: (path) job_id parameter 
     - returns: RequestBuilder<Job> 
     */
    open class func actionsGetJobForWorkflowRunWithRequestBuilder(owner: String, repo: String, jobId: Int) -> RequestBuilder<Job> {
        var path = "/repos/{owner}/{repo}/actions/jobs/{job_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let jobIdPreEscape = "\(APIHelper.mapValueToPathItem(jobId))"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{job_id}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Job>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get an organization public key
     
     - parameter org: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsGetOrgPublicKey(org: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: ActionsPublicKey?,_ error: Error?) -> Void)) {
        actionsGetOrgPublicKeyWithRequestBuilder(org: org).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get an organization public key
     - GET /orgs/{org}/actions/secrets/public-key
     - Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#get-an-organization-public-key
}
     - parameter org: (path)  
     - returns: RequestBuilder<ActionsPublicKey> 
     */
    open class func actionsGetOrgPublicKeyWithRequestBuilder(org: String) -> RequestBuilder<ActionsPublicKey> {
        var path = "/orgs/{org}/actions/secrets/public-key"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ActionsPublicKey>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get an organization secret
     
     - parameter org: (path)  
     - parameter secretName: (path) secret_name parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsGetOrgSecret(org: String, secretName: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: OrganizationActionsSecret?,_ error: Error?) -> Void)) {
        actionsGetOrgSecretWithRequestBuilder(org: org, secretName: secretName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get an organization secret
     - GET /orgs/{org}/actions/secrets/{secret_name}
     - Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#get-an-organization-secret
}
     - parameter org: (path)  
     - parameter secretName: (path) secret_name parameter 
     - returns: RequestBuilder<OrganizationActionsSecret> 
     */
    open class func actionsGetOrgSecretWithRequestBuilder(org: String, secretName: String) -> RequestBuilder<OrganizationActionsSecret> {
        var path = "/orgs/{org}/actions/secrets/{secret_name}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let secretNamePreEscape = "\(APIHelper.mapValueToPathItem(secretName))"
        let secretNamePostEscape = secretNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{secret_name}", with: secretNamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrganizationActionsSecret>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a repository public key
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsGetRepoPublicKey(owner: String, repo: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: ActionsPublicKey?,_ error: Error?) -> Void)) {
        actionsGetRepoPublicKeyWithRequestBuilder(owner: owner, repo: repo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a repository public key
     - GET /repos/{owner}/{repo}/actions/secrets/public-key
     - Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#get-a-repository-public-key
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - returns: RequestBuilder<ActionsPublicKey> 
     */
    open class func actionsGetRepoPublicKeyWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<ActionsPublicKey> {
        var path = "/repos/{owner}/{repo}/actions/secrets/public-key"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ActionsPublicKey>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a repository secret
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter secretName: (path) secret_name parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsGetRepoSecret(owner: String, repo: String, secretName: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: ActionsSecret?,_ error: Error?) -> Void)) {
        actionsGetRepoSecretWithRequestBuilder(owner: owner, repo: repo, secretName: secretName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a repository secret
     - GET /repos/{owner}/{repo}/actions/secrets/{secret_name}
     - Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#get-a-repository-secret
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter secretName: (path) secret_name parameter 
     - returns: RequestBuilder<ActionsSecret> 
     */
    open class func actionsGetRepoSecretWithRequestBuilder(owner: String, repo: String, secretName: String) -> RequestBuilder<ActionsSecret> {
        var path = "/repos/{owner}/{repo}/actions/secrets/{secret_name}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let secretNamePreEscape = "\(APIHelper.mapValueToPathItem(secretName))"
        let secretNamePostEscape = secretNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{secret_name}", with: secretNamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ActionsSecret>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a self-hosted runner for an organization
     
     - parameter org: (path)  
     - parameter runnerId: (path) Unique identifier of the self-hosted runner. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsGetSelfHostedRunnerForOrg(org: String, runnerId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Runner?,_ error: Error?) -> Void)) {
        actionsGetSelfHostedRunnerForOrgWithRequestBuilder(org: org, runnerId: runnerId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a self-hosted runner for an organization
     - GET /orgs/{org}/actions/runners/{runner_id}
     - Gets a specific self-hosted runner configured in an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#get-a-self-hosted-runner-for-an-organization
}
     - parameter org: (path)  
     - parameter runnerId: (path) Unique identifier of the self-hosted runner. 
     - returns: RequestBuilder<Runner> 
     */
    open class func actionsGetSelfHostedRunnerForOrgWithRequestBuilder(org: String, runnerId: Int) -> RequestBuilder<Runner> {
        var path = "/orgs/{org}/actions/runners/{runner_id}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let runnerIdPreEscape = "\(APIHelper.mapValueToPathItem(runnerId))"
        let runnerIdPostEscape = runnerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runner_id}", with: runnerIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Runner>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a self-hosted runner for a repository
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter runnerId: (path) Unique identifier of the self-hosted runner. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsGetSelfHostedRunnerForRepo(owner: String, repo: String, runnerId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Runner?,_ error: Error?) -> Void)) {
        actionsGetSelfHostedRunnerForRepoWithRequestBuilder(owner: owner, repo: repo, runnerId: runnerId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a self-hosted runner for a repository
     - GET /repos/{owner}/{repo}/actions/runners/{runner_id}
     - Gets a specific self-hosted runner configured in a repository.  You must authenticate using an access token with the `repo` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#get-a-self-hosted-runner-for-a-repository
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter runnerId: (path) Unique identifier of the self-hosted runner. 
     - returns: RequestBuilder<Runner> 
     */
    open class func actionsGetSelfHostedRunnerForRepoWithRequestBuilder(owner: String, repo: String, runnerId: Int) -> RequestBuilder<Runner> {
        var path = "/repos/{owner}/{repo}/actions/runners/{runner_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let runnerIdPreEscape = "\(APIHelper.mapValueToPathItem(runnerId))"
        let runnerIdPostEscape = runnerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runner_id}", with: runnerIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Runner>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a self-hosted runner group for an organization
     
     - parameter org: (path)  
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsGetSelfHostedRunnerGroupForOrg(org: String, runnerGroupId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: RunnerGroupsOrg?,_ error: Error?) -> Void)) {
        actionsGetSelfHostedRunnerGroupForOrgWithRequestBuilder(org: org, runnerGroupId: runnerGroupId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a self-hosted runner group for an organization
     - GET /orgs/{org}/actions/runner-groups/{runner_group_id}
     - Gets a specific self-hosted runner group for an organization. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#get-a-self-hosted-runner-group-for-an-organization
}
     - parameter org: (path)  
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - returns: RequestBuilder<RunnerGroupsOrg> 
     */
    open class func actionsGetSelfHostedRunnerGroupForOrgWithRequestBuilder(org: String, runnerGroupId: Int) -> RequestBuilder<RunnerGroupsOrg> {
        var path = "/orgs/{org}/actions/runner-groups/{runner_group_id}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let runnerGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(runnerGroupId))"
        let runnerGroupIdPostEscape = runnerGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runner_group_id}", with: runnerGroupIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RunnerGroupsOrg>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a workflow
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter workflowId: (path) The ID of the workflow. You can also pass the workflow file name as a string. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsGetWorkflow(owner: String, repo: String, workflowId: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Workflow?,_ error: Error?) -> Void)) {
        actionsGetWorkflowWithRequestBuilder(owner: owner, repo: repo, workflowId: workflowId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a workflow
     - GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}
     - Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#get-a-workflow
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter workflowId: (path) The ID of the workflow. You can also pass the workflow file name as a string. 
     - returns: RequestBuilder<Workflow> 
     */
    open class func actionsGetWorkflowWithRequestBuilder(owner: String, repo: String, workflowId: String) -> RequestBuilder<Workflow> {
        var path = "/repos/{owner}/{repo}/actions/workflows/{workflow_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let workflowIdPreEscape = "\(APIHelper.mapValueToPathItem(workflowId))"
        let workflowIdPostEscape = workflowIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workflow_id}", with: workflowIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Workflow>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a workflow run
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter runId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsGetWorkflowRun(owner: String, repo: String, runId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: WorkflowRun?,_ error: Error?) -> Void)) {
        actionsGetWorkflowRunWithRequestBuilder(owner: owner, repo: repo, runId: runId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a workflow run
     - GET /repos/{owner}/{repo}/actions/runs/{run_id}
     - Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#get-a-workflow-run
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter runId: (path)  
     - returns: RequestBuilder<WorkflowRun> 
     */
    open class func actionsGetWorkflowRunWithRequestBuilder(owner: String, repo: String, runId: Int) -> RequestBuilder<WorkflowRun> {
        var path = "/repos/{owner}/{repo}/actions/runs/{run_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let runIdPreEscape = "\(APIHelper.mapValueToPathItem(runId))"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{run_id}", with: runIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkflowRun>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List artifacts for a repository
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsListArtifactsForRepo(owner: String, repo: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20012?,_ error: Error?) -> Void)) {
        actionsListArtifactsForRepoWithRequestBuilder(owner: owner, repo: repo, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List artifacts for a repository
     - GET /repos/{owner}/{repo}/actions/artifacts
     - Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#list-artifacts-for-a-repository
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<InlineResponse20012> 
     */
    open class func actionsListArtifactsForRepoWithRequestBuilder(owner: String, repo: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<InlineResponse20012> {
        var path = "/repos/{owner}/{repo}/actions/artifacts"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20012>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter filter
     */
    public enum Filter_actionsListJobsForWorkflowRun: String, CaseIterable {
        case latest = "latest"
        case all = "all"
    }

    /**
     List jobs for a workflow run
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter runId: (path)  
     - parameter filter: (query) Filters jobs by their &#x60;completed_at&#x60; timestamp. Can be one of:   \\* &#x60;latest&#x60;: Returns jobs from the most recent execution of the workflow run.   \\* &#x60;all&#x60;: Returns all jobs for a workflow run, including from old executions of the workflow run. (optional, default to .latest)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsListJobsForWorkflowRun(owner: String, repo: String, runId: Int, filter: Filter_actionsListJobsForWorkflowRun? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20014?,_ error: Error?) -> Void)) {
        actionsListJobsForWorkflowRunWithRequestBuilder(owner: owner, repo: repo, runId: runId, filter: filter, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List jobs for a workflow run
     - GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs
     - Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#parameters).
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#list-jobs-for-a-workflow-run
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter runId: (path)  
     - parameter filter: (query) Filters jobs by their &#x60;completed_at&#x60; timestamp. Can be one of:   \\* &#x60;latest&#x60;: Returns jobs from the most recent execution of the workflow run.   \\* &#x60;all&#x60;: Returns all jobs for a workflow run, including from old executions of the workflow run. (optional, default to .latest)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<InlineResponse20014> 
     */
    open class func actionsListJobsForWorkflowRunWithRequestBuilder(owner: String, repo: String, runId: Int, filter: Filter_actionsListJobsForWorkflowRun? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<InlineResponse20014> {
        var path = "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let runIdPreEscape = "\(APIHelper.mapValueToPathItem(runId))"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{run_id}", with: runIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter": filter?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20014>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List organization secrets
     
     - parameter org: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsListOrgSecrets(org: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse2009?,_ error: Error?) -> Void)) {
        actionsListOrgSecretsWithRequestBuilder(org: org, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List organization secrets
     - GET /orgs/{org}/actions/secrets
     - Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#list-organization-secrets
}
     - parameter org: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<InlineResponse2009> 
     */
    open class func actionsListOrgSecretsWithRequestBuilder(org: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<InlineResponse2009> {
        var path = "/orgs/{org}/actions/secrets"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse2009>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List repository access to a self-hosted runner group in an organization
     
     - parameter org: (path)  
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsListRepoAccessToSelfHostedRunnerGroupInOrg(org: String, runnerGroupId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse2006?,_ error: Error?) -> Void)) {
        actionsListRepoAccessToSelfHostedRunnerGroupInOrgWithRequestBuilder(org: org, runnerGroupId: runnerGroupId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List repository access to a self-hosted runner group in an organization
     - GET /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories
     - The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"  Lists the repositories with access to a self-hosted runner group configured in an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#list-repository-access-to-a-self-hosted-runner-group-in-an-organization
}
     - parameter org: (path)  
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - returns: RequestBuilder<InlineResponse2006> 
     */
    open class func actionsListRepoAccessToSelfHostedRunnerGroupInOrgWithRequestBuilder(org: String, runnerGroupId: Int) -> RequestBuilder<InlineResponse2006> {
        var path = "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let runnerGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(runnerGroupId))"
        let runnerGroupIdPostEscape = runnerGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runner_group_id}", with: runnerGroupIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse2006>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List repository secrets
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsListRepoSecrets(owner: String, repo: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20015?,_ error: Error?) -> Void)) {
        actionsListRepoSecretsWithRequestBuilder(owner: owner, repo: repo, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List repository secrets
     - GET /repos/{owner}/{repo}/actions/secrets
     - Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#list-repository-secrets
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<InlineResponse20015> 
     */
    open class func actionsListRepoSecretsWithRequestBuilder(owner: String, repo: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<InlineResponse20015> {
        var path = "/repos/{owner}/{repo}/actions/secrets"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20015>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List repository workflows
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsListRepoWorkflows(owner: String, repo: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20016?,_ error: Error?) -> Void)) {
        actionsListRepoWorkflowsWithRequestBuilder(owner: owner, repo: repo, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List repository workflows
     - GET /repos/{owner}/{repo}/actions/workflows
     - Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#list-repository-workflows
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<InlineResponse20016> 
     */
    open class func actionsListRepoWorkflowsWithRequestBuilder(owner: String, repo: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<InlineResponse20016> {
        var path = "/repos/{owner}/{repo}/actions/workflows"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20016>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List runner applications for an organization
     
     - parameter org: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsListRunnerApplicationsForOrg(org: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [RunnerApplication]?,_ error: Error?) -> Void)) {
        actionsListRunnerApplicationsForOrgWithRequestBuilder(org: org).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List runner applications for an organization
     - GET /orgs/{org}/actions/runners/downloads
     - Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#list-runner-applications-for-an-organization
}
     - parameter org: (path)  
     - returns: RequestBuilder<[RunnerApplication]> 
     */
    open class func actionsListRunnerApplicationsForOrgWithRequestBuilder(org: String) -> RequestBuilder<[RunnerApplication]> {
        var path = "/orgs/{org}/actions/runners/downloads"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[RunnerApplication]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List runner applications for a repository
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsListRunnerApplicationsForRepo(owner: String, repo: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [RunnerApplication]?,_ error: Error?) -> Void)) {
        actionsListRunnerApplicationsForRepoWithRequestBuilder(owner: owner, repo: repo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List runner applications for a repository
     - GET /repos/{owner}/{repo}/actions/runners/downloads
     - Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the `repo` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#list-runner-applications-for-a-repository
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - returns: RequestBuilder<[RunnerApplication]> 
     */
    open class func actionsListRunnerApplicationsForRepoWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<[RunnerApplication]> {
        var path = "/repos/{owner}/{repo}/actions/runners/downloads"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[RunnerApplication]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List selected repositories for an organization secret
     
     - parameter org: (path)  
     - parameter secretName: (path) secret_name parameter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsListSelectedReposForOrgSecret(org: String, secretName: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20010?,_ error: Error?) -> Void)) {
        actionsListSelectedReposForOrgSecretWithRequestBuilder(org: org, secretName: secretName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List selected repositories for an organization secret
     - GET /orgs/{org}/actions/secrets/{secret_name}/repositories
     - Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#list-selected-repositories-for-an-organization-secret
}
     - parameter org: (path)  
     - parameter secretName: (path) secret_name parameter 
     - returns: RequestBuilder<InlineResponse20010> 
     */
    open class func actionsListSelectedReposForOrgSecretWithRequestBuilder(org: String, secretName: String) -> RequestBuilder<InlineResponse20010> {
        var path = "/orgs/{org}/actions/secrets/{secret_name}/repositories"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let secretNamePreEscape = "\(APIHelper.mapValueToPathItem(secretName))"
        let secretNamePostEscape = secretNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{secret_name}", with: secretNamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse20010>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List selected repositories enabled for GitHub Actions in an organization
     
     - parameter org: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsListSelectedRepositoriesEnabledGithubActionsOrganization(org: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse2006?,_ error: Error?) -> Void)) {
        actionsListSelectedRepositoriesEnabledGithubActionsOrganizationWithRequestBuilder(org: org, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List selected repositories enabled for GitHub Actions in an organization
     - GET /orgs/{org}/actions/permissions/repositories
     - Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#list-selected-repositories-enabled-for-github-actions-in-an-organization
}
     - parameter org: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<InlineResponse2006> 
     */
    open class func actionsListSelectedRepositoriesEnabledGithubActionsOrganizationWithRequestBuilder(org: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<InlineResponse2006> {
        var path = "/orgs/{org}/actions/permissions/repositories"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse2006>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List self-hosted runner groups for an organization
     
     - parameter org: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsListSelfHostedRunnerGroupsForOrg(org: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse2007?,_ error: Error?) -> Void)) {
        actionsListSelfHostedRunnerGroupsForOrgWithRequestBuilder(org: org, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List self-hosted runner groups for an organization
     - GET /orgs/{org}/actions/runner-groups
     - Lists all self-hosted runner groups configured in an organization and inherited from an enterprise. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#list-self-hosted-runner-groups-for-an-organization
}
     - parameter org: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<InlineResponse2007> 
     */
    open class func actionsListSelfHostedRunnerGroupsForOrgWithRequestBuilder(org: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<InlineResponse2007> {
        var path = "/orgs/{org}/actions/runner-groups"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse2007>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List self-hosted runners for an organization
     
     - parameter org: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsListSelfHostedRunnersForOrg(org: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse2008?,_ error: Error?) -> Void)) {
        actionsListSelfHostedRunnersForOrgWithRequestBuilder(org: org, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List self-hosted runners for an organization
     - GET /orgs/{org}/actions/runners
     - Lists all self-hosted runners configured in an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#list-self-hosted-runners-for-an-organization
}
     - parameter org: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<InlineResponse2008> 
     */
    open class func actionsListSelfHostedRunnersForOrgWithRequestBuilder(org: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<InlineResponse2008> {
        var path = "/orgs/{org}/actions/runners"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse2008>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List self-hosted runners for a repository
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsListSelfHostedRunnersForRepo(owner: String, repo: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse2008?,_ error: Error?) -> Void)) {
        actionsListSelfHostedRunnersForRepoWithRequestBuilder(owner: owner, repo: repo, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List self-hosted runners for a repository
     - GET /repos/{owner}/{repo}/actions/runners
     - Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#list-self-hosted-runners-for-a-repository
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<InlineResponse2008> 
     */
    open class func actionsListSelfHostedRunnersForRepoWithRequestBuilder(owner: String, repo: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<InlineResponse2008> {
        var path = "/repos/{owner}/{repo}/actions/runners"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse2008>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List self-hosted runners in a group for an organization
     
     - parameter org: (path)  
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsListSelfHostedRunnersInGroupForOrg(org: String, runnerGroupId: Int, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse2003?,_ error: Error?) -> Void)) {
        actionsListSelfHostedRunnersInGroupForOrgWithRequestBuilder(org: org, runnerGroupId: runnerGroupId, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List self-hosted runners in a group for an organization
     - GET /orgs/{org}/actions/runner-groups/{runner_group_id}/runners
     - Lists self-hosted runners that are in a specific organization group. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#list-self-hosted-runners-in-a-group-for-an-organization
}
     - parameter org: (path)  
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<InlineResponse2003> 
     */
    open class func actionsListSelfHostedRunnersInGroupForOrgWithRequestBuilder(org: String, runnerGroupId: Int, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<InlineResponse2003> {
        var path = "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let runnerGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(runnerGroupId))"
        let runnerGroupIdPostEscape = runnerGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runner_group_id}", with: runnerGroupIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse2003>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List workflow run artifacts
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter runId: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsListWorkflowRunArtifacts(owner: String, repo: String, runId: Int, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20012?,_ error: Error?) -> Void)) {
        actionsListWorkflowRunArtifactsWithRequestBuilder(owner: owner, repo: repo, runId: runId, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List workflow run artifacts
     - GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts
     - Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#list-workflow-run-artifacts
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter runId: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<InlineResponse20012> 
     */
    open class func actionsListWorkflowRunArtifactsWithRequestBuilder(owner: String, repo: String, runId: Int, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<InlineResponse20012> {
        var path = "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let runIdPreEscape = "\(APIHelper.mapValueToPathItem(runId))"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{run_id}", with: runIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20012>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter status
     */
    public enum Status_actionsListWorkflowRuns: String, CaseIterable {
        case completed = "completed"
        case status = "status"
        case conclusion = "conclusion"
    }

    /**
     List workflow runs
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter workflowId: (path) The ID of the workflow. You can also pass the workflow file name as a string. 
     - parameter actor: (query) Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run. (optional)
     - parameter branch: (query) Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;. (optional)
     - parameter event: (query) Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot; (optional)
     - parameter status: (query) Returns workflow runs associated with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;completed&#x60;. For more information, see the &#x60;status&#x60; and &#x60;conclusion&#x60; options available in \&quot;[Create a check run](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#create-a-check-run).\&quot; (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsListWorkflowRuns(owner: String, repo: String, workflowId: String, actor: String? = nil, branch: String? = nil, event: String? = nil, status: Status_actionsListWorkflowRuns? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20013?,_ error: Error?) -> Void)) {
        actionsListWorkflowRunsWithRequestBuilder(owner: owner, repo: repo, workflowId: workflowId, actor: actor, branch: branch, event: event, status: status, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List workflow runs
     - GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs
     - List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#list-workflow-runs
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter workflowId: (path) The ID of the workflow. You can also pass the workflow file name as a string. 
     - parameter actor: (query) Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run. (optional)
     - parameter branch: (query) Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;. (optional)
     - parameter event: (query) Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot; (optional)
     - parameter status: (query) Returns workflow runs associated with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;completed&#x60;. For more information, see the &#x60;status&#x60; and &#x60;conclusion&#x60; options available in \&quot;[Create a check run](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#create-a-check-run).\&quot; (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<InlineResponse20013> 
     */
    open class func actionsListWorkflowRunsWithRequestBuilder(owner: String, repo: String, workflowId: String, actor: String? = nil, branch: String? = nil, event: String? = nil, status: Status_actionsListWorkflowRuns? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<InlineResponse20013> {
        var path = "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let workflowIdPreEscape = "\(APIHelper.mapValueToPathItem(workflowId))"
        let workflowIdPostEscape = workflowIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workflow_id}", with: workflowIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "actor": actor?.encodeToJSON(), 
            "branch": branch?.encodeToJSON(), 
            "event": event?.encodeToJSON(), 
            "status": status?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20013>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter status
     */
    public enum Status_actionsListWorkflowRunsForRepo: String, CaseIterable {
        case completed = "completed"
        case status = "status"
        case conclusion = "conclusion"
    }

    /**
     List workflow runs for a repository
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter actor: (query) Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run. (optional)
     - parameter branch: (query) Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;. (optional)
     - parameter event: (query) Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot; (optional)
     - parameter status: (query) Returns workflow runs associated with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;completed&#x60;. For more information, see the &#x60;status&#x60; and &#x60;conclusion&#x60; options available in \&quot;[Create a check run](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#create-a-check-run).\&quot; (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsListWorkflowRunsForRepo(owner: String, repo: String, actor: String? = nil, branch: String? = nil, event: String? = nil, status: Status_actionsListWorkflowRunsForRepo? = nil, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse20013?,_ error: Error?) -> Void)) {
        actionsListWorkflowRunsForRepoWithRequestBuilder(owner: owner, repo: repo, actor: actor, branch: branch, event: event, status: status, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List workflow runs for a repository
     - GET /repos/{owner}/{repo}/actions/runs
     - Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#list-workflow-runs-for-a-repository
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter actor: (query) Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run. (optional)
     - parameter branch: (query) Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;. (optional)
     - parameter event: (query) Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot; (optional)
     - parameter status: (query) Returns workflow runs associated with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;completed&#x60;. For more information, see the &#x60;status&#x60; and &#x60;conclusion&#x60; options available in \&quot;[Create a check run](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#create-a-check-run).\&quot; (optional)
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<InlineResponse20013> 
     */
    open class func actionsListWorkflowRunsForRepoWithRequestBuilder(owner: String, repo: String, actor: String? = nil, branch: String? = nil, event: String? = nil, status: Status_actionsListWorkflowRunsForRepo? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<InlineResponse20013> {
        var path = "/repos/{owner}/{repo}/actions/runs"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "actor": actor?.encodeToJSON(), 
            "branch": branch?.encodeToJSON(), 
            "event": event?.encodeToJSON(), 
            "status": status?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse20013>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Re-run a workflow
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter runId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsReRunWorkflow(owner: String, repo: String, runId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsReRunWorkflowWithRequestBuilder(owner: owner, repo: repo, runId: runId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Re-run a workflow
     - POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun
     - Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#re-run-a-workflow
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter runId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func actionsReRunWorkflowWithRequestBuilder(owner: String, repo: String, runId: Int) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let runIdPreEscape = "\(APIHelper.mapValueToPathItem(runId))"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{run_id}", with: runIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove repository access to a self-hosted runner group in an organization
     
     - parameter org: (path)  
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter repositoryId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg(org: String, runnerGroupId: Int, repositoryId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgWithRequestBuilder(org: org, runnerGroupId: runnerGroupId, repositoryId: repositoryId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove repository access to a self-hosted runner group in an organization
     - DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}
     - Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\" You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#remove-repository-access-to-a-self-hosted-runner-group-in-an-organization
}
     - parameter org: (path)  
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter repositoryId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgWithRequestBuilder(org: String, runnerGroupId: Int, repositoryId: Int) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let runnerGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(runnerGroupId))"
        let runnerGroupIdPostEscape = runnerGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runner_group_id}", with: runnerGroupIdPostEscape, options: .literal, range: nil)
        let repositoryIdPreEscape = "\(APIHelper.mapValueToPathItem(repositoryId))"
        let repositoryIdPostEscape = repositoryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repository_id}", with: repositoryIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove selected repository from an organization secret
     
     - parameter org: (path)  
     - parameter secretName: (path) secret_name parameter 
     - parameter repositoryId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsRemoveSelectedRepoFromOrgSecret(org: String, secretName: String, repositoryId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsRemoveSelectedRepoFromOrgSecretWithRequestBuilder(org: org, secretName: secretName, repositoryId: repositoryId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove selected repository from an organization secret
     - DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}
     - Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.0/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#remove-selected-repository-from-an-organization-secret
}
     - parameter org: (path)  
     - parameter secretName: (path) secret_name parameter 
     - parameter repositoryId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func actionsRemoveSelectedRepoFromOrgSecretWithRequestBuilder(org: String, secretName: String, repositoryId: Int) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let secretNamePreEscape = "\(APIHelper.mapValueToPathItem(secretName))"
        let secretNamePostEscape = secretNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{secret_name}", with: secretNamePostEscape, options: .literal, range: nil)
        let repositoryIdPreEscape = "\(APIHelper.mapValueToPathItem(repositoryId))"
        let repositoryIdPostEscape = repositoryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repository_id}", with: repositoryIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove a self-hosted runner from a group for an organization
     
     - parameter org: (path)  
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter runnerId: (path) Unique identifier of the self-hosted runner. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsRemoveSelfHostedRunnerFromGroupForOrg(org: String, runnerGroupId: Int, runnerId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsRemoveSelfHostedRunnerFromGroupForOrgWithRequestBuilder(org: org, runnerGroupId: runnerGroupId, runnerId: runnerId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove a self-hosted runner from a group for an organization
     - DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}
     - Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#remove-a-self-hosted-runner-from-a-group-for-an-organization
}
     - parameter org: (path)  
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter runnerId: (path) Unique identifier of the self-hosted runner. 
     - returns: RequestBuilder<Void> 
     */
    open class func actionsRemoveSelfHostedRunnerFromGroupForOrgWithRequestBuilder(org: String, runnerGroupId: Int, runnerId: Int) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let runnerGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(runnerGroupId))"
        let runnerGroupIdPostEscape = runnerGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runner_group_id}", with: runnerGroupIdPostEscape, options: .literal, range: nil)
        let runnerIdPreEscape = "\(APIHelper.mapValueToPathItem(runnerId))"
        let runnerIdPostEscape = runnerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runner_id}", with: runnerIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set allowed actions for an organization
     
     - parameter org: (path)  
     - parameter selectedActions: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsSetAllowedActionsOrganization(org: String, selectedActions: SelectedActions? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsSetAllowedActionsOrganizationWithRequestBuilder(org: org, selectedActions: selectedActions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set allowed actions for an organization
     - PUT /orgs/{org}/actions/permissions/selected-actions
     - Sets the actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  If the organization belongs to an enterprise that has `selected` actions set at the enterprise level, then you cannot override any of the enterprise's allowed actions settings.  To use the `patterns_allowed` setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories in the organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#set-allowed-actions-for-an-organization
}
     - parameter org: (path)  
     - parameter selectedActions: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func actionsSetAllowedActionsOrganizationWithRequestBuilder(org: String, selectedActions: SelectedActions? = nil) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/actions/permissions/selected-actions"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: selectedActions)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set allowed actions for a repository
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter selectedActions: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsSetAllowedActionsRepository(owner: String, repo: String, selectedActions: SelectedActions? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsSetAllowedActionsRepositoryWithRequestBuilder(owner: owner, repo: repo, selectedActions: selectedActions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set allowed actions for a repository
     - PUT /repos/{owner}/{repo}/actions/permissions/selected-actions
     - Sets the actions that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\"  If the repository belongs to an organization or enterprise that has `selected` actions set at the organization or enterprise levels, then you cannot override any of the allowed actions settings.  To use the `patterns_allowed` setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories.  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#set-allowed-actions-for-a-repository
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter selectedActions: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func actionsSetAllowedActionsRepositoryWithRequestBuilder(owner: String, repo: String, selectedActions: SelectedActions? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/actions/permissions/selected-actions"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: selectedActions)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set GitHub Actions permissions for an organization
     
     - parameter org: (path)  
     - parameter inlineObject38: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsSetGithubActionsPermissionsOrganization(org: String, inlineObject38: InlineObject38? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsSetGithubActionsPermissionsOrganizationWithRequestBuilder(org: org, inlineObject38: inlineObject38).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set GitHub Actions permissions for an organization
     - PUT /orgs/{org}/actions/permissions
     - Sets the GitHub Actions permissions policy for repositories and allowed actions in an organization.  If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as `allowed_actions` to `selected` actions, then you cannot override them for the organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#set-github-actions-permissions-for-an-organization
}
     - parameter org: (path)  
     - parameter inlineObject38: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func actionsSetGithubActionsPermissionsOrganizationWithRequestBuilder(org: String, inlineObject38: InlineObject38? = nil) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/actions/permissions"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject38)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set GitHub Actions permissions for a repository
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject72: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsSetGithubActionsPermissionsRepository(owner: String, repo: String, inlineObject72: InlineObject72? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsSetGithubActionsPermissionsRepositoryWithRequestBuilder(owner: owner, repo: repo, inlineObject72: inlineObject72).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set GitHub Actions permissions for a repository
     - PUT /repos/{owner}/{repo}/actions/permissions
     - Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions in the repository.  If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as `allowed_actions` to `selected` actions, then you cannot override them for the repository.  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#set-github-actions-permissions-for-a-repository
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter inlineObject72: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func actionsSetGithubActionsPermissionsRepositoryWithRequestBuilder(owner: String, repo: String, inlineObject72: InlineObject72? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/actions/permissions"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject72)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set repository access for a self-hosted runner group in an organization
     
     - parameter org: (path)  
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter inlineObject42: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsSetRepoAccessToSelfHostedRunnerGroupInOrg(org: String, runnerGroupId: Int, inlineObject42: InlineObject42? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsSetRepoAccessToSelfHostedRunnerGroupInOrgWithRequestBuilder(org: org, runnerGroupId: runnerGroupId, inlineObject42: inlineObject42).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set repository access for a self-hosted runner group in an organization
     - PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories
     - Replaces the list of repositories that have access to a self-hosted runner group configured in an organization. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#set-repository-access-to-a-self-hosted-runner-group-in-an-organization
}
     - parameter org: (path)  
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter inlineObject42: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func actionsSetRepoAccessToSelfHostedRunnerGroupInOrgWithRequestBuilder(org: String, runnerGroupId: Int, inlineObject42: InlineObject42? = nil) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let runnerGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(runnerGroupId))"
        let runnerGroupIdPostEscape = runnerGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runner_group_id}", with: runnerGroupIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject42)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set selected repositories for an organization secret
     
     - parameter org: (path)  
     - parameter secretName: (path) secret_name parameter 
     - parameter inlineObject45: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsSetSelectedReposForOrgSecret(org: String, secretName: String, inlineObject45: InlineObject45? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsSetSelectedReposForOrgSecretWithRequestBuilder(org: org, secretName: secretName, inlineObject45: inlineObject45).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set selected repositories for an organization secret
     - PUT /orgs/{org}/actions/secrets/{secret_name}/repositories
     - Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.0/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#set-selected-repositories-for-an-organization-secret
}
     - parameter org: (path)  
     - parameter secretName: (path) secret_name parameter 
     - parameter inlineObject45: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func actionsSetSelectedReposForOrgSecretWithRequestBuilder(org: String, secretName: String, inlineObject45: InlineObject45? = nil) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/actions/secrets/{secret_name}/repositories"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let secretNamePreEscape = "\(APIHelper.mapValueToPathItem(secretName))"
        let secretNamePostEscape = secretNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{secret_name}", with: secretNamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject45)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set selected repositories enabled for GitHub Actions in an organization
     
     - parameter org: (path)  
     - parameter inlineObject39: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsSetSelectedRepositoriesEnabledGithubActionsOrganization(org: String, inlineObject39: InlineObject39? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationWithRequestBuilder(org: org, inlineObject39: inlineObject39).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set selected repositories enabled for GitHub Actions in an organization
     - PUT /orgs/{org}/actions/permissions/repositories
     - Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#set-selected-repositories-enabled-for-github-actions-in-an-organization
}
     - parameter org: (path)  
     - parameter inlineObject39: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationWithRequestBuilder(org: String, inlineObject39: InlineObject39? = nil) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/actions/permissions/repositories"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject39)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set self-hosted runners in a group for an organization
     
     - parameter org: (path)  
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter inlineObject43: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsSetSelfHostedRunnersInGroupForOrg(org: String, runnerGroupId: Int, inlineObject43: InlineObject43? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actionsSetSelfHostedRunnersInGroupForOrgWithRequestBuilder(org: org, runnerGroupId: runnerGroupId, inlineObject43: inlineObject43).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set self-hosted runners in a group for an organization
     - PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/runners
     - Replaces the list of self-hosted runners that are part of an organization runner group. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#set-self-hosted-runners-in-a-group-for-an-organization
}
     - parameter org: (path)  
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter inlineObject43: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func actionsSetSelfHostedRunnersInGroupForOrgWithRequestBuilder(org: String, runnerGroupId: Int, inlineObject43: InlineObject43? = nil) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let runnerGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(runnerGroupId))"
        let runnerGroupIdPostEscape = runnerGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runner_group_id}", with: runnerGroupIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject43)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a self-hosted runner group for an organization
     
     - parameter org: (path)  
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter inlineObject41: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actionsUpdateSelfHostedRunnerGroupForOrg(org: String, runnerGroupId: Int, inlineObject41: InlineObject41? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: RunnerGroupsOrg?,_ error: Error?) -> Void)) {
        actionsUpdateSelfHostedRunnerGroupForOrgWithRequestBuilder(org: org, runnerGroupId: runnerGroupId, inlineObject41: inlineObject41).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a self-hosted runner group for an organization
     - PATCH /orgs/{org}/actions/runner-groups/{runner_group_id}
     - Updates the `name` and `visibility` of a self-hosted runner group in an organization. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/actions#update-a-self-hosted-runner-group-for-an-organization
}
     - parameter org: (path)  
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter inlineObject41: (body)  (optional)
     - returns: RequestBuilder<RunnerGroupsOrg> 
     */
    open class func actionsUpdateSelfHostedRunnerGroupForOrgWithRequestBuilder(org: String, runnerGroupId: Int, inlineObject41: InlineObject41? = nil) -> RequestBuilder<RunnerGroupsOrg> {
        var path = "/orgs/{org}/actions/runner-groups/{runner_group_id}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let runnerGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(runnerGroupId))"
        let runnerGroupIdPostEscape = runnerGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runner_group_id}", with: runnerGroupIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject41)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RunnerGroupsOrg>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
