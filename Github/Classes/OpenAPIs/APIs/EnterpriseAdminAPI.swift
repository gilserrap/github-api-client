//
// EnterpriseAdminAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class EnterpriseAdminAPI {
    /**
     Add an authorized SSH key
     
     - parameter inlineObject160: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminAddAuthorizedSshKey(inlineObject160: InlineObject160? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [SshKey]?,_ error: Error?) -> Void)) {
        enterpriseAdminAddAuthorizedSshKeyWithRequestBuilder(inlineObject160: inlineObject160).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add an authorized SSH key
     - POST /setup/api/settings/authorized-keys
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#add-an-authorized-ssh-key
}
     - parameter inlineObject160: (body)  (optional)
     - returns: RequestBuilder<[SshKey]> 
     */
    open class func enterpriseAdminAddAuthorizedSshKeyWithRequestBuilder(inlineObject160: InlineObject160? = nil) -> RequestBuilder<[SshKey]> {
        let path = "/setup/api/settings/authorized-keys"
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject160)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[SshKey]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Add organization access to a self-hosted runner group in an enterprise
     
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter orgId: (path) Unique identifier of an organization. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise(enterprise: String, runnerGroupId: Int, orgId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        enterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseWithRequestBuilder(enterprise: enterprise, runnerGroupId: runnerGroupId, orgId: orgId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add organization access to a self-hosted runner group in an enterprise
     - PUT /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}
     - Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise).\"  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#add-organization-access-to-a-self-hosted-runner-group-in-an-enterprise
}
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter orgId: (path) Unique identifier of an organization. 
     - returns: RequestBuilder<Void> 
     */
    open class func enterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseWithRequestBuilder(enterprise: String, runnerGroupId: Int, orgId: Int) -> RequestBuilder<Void> {
        var path = "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}"
        let enterprisePreEscape = "\(APIHelper.mapValueToPathItem(enterprise))"
        let enterprisePostEscape = enterprisePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{enterprise}", with: enterprisePostEscape, options: .literal, range: nil)
        let runnerGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(runnerGroupId))"
        let runnerGroupIdPostEscape = runnerGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runner_group_id}", with: runnerGroupIdPostEscape, options: .literal, range: nil)
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_id}", with: orgIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Add a self-hosted runner to a group for an enterprise
     
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter runnerId: (path) Unique identifier of the self-hosted runner. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminAddSelfHostedRunnerToGroupForEnterprise(enterprise: String, runnerGroupId: Int, runnerId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        enterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseWithRequestBuilder(enterprise: enterprise, runnerGroupId: runnerGroupId, runnerId: runnerId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add a self-hosted runner to a group for an enterprise
     - PUT /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}
     - Adds a self-hosted runner to a runner group configured in an enterprise.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#add-a-self-hosted-runner-to-a-group-for-an-enterprise
}
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter runnerId: (path) Unique identifier of the self-hosted runner. 
     - returns: RequestBuilder<Void> 
     */
    open class func enterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseWithRequestBuilder(enterprise: String, runnerGroupId: Int, runnerId: Int) -> RequestBuilder<Void> {
        var path = "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}"
        let enterprisePreEscape = "\(APIHelper.mapValueToPathItem(enterprise))"
        let enterprisePostEscape = enterprisePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{enterprise}", with: enterprisePostEscape, options: .literal, range: nil)
        let runnerGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(runnerGroupId))"
        let runnerGroupIdPostEscape = runnerGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runner_group_id}", with: runnerGroupIdPostEscape, options: .literal, range: nil)
        let runnerIdPreEscape = "\(APIHelper.mapValueToPathItem(runnerId))"
        let runnerIdPostEscape = runnerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runner_id}", with: runnerIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a GitHub license
     
     - parameter inlineObject162: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminCreateEnterpriseServerLicense(inlineObject162: InlineObject162? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        enterpriseAdminCreateEnterpriseServerLicenseWithRequestBuilder(inlineObject162: inlineObject162).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a GitHub license
     - POST /setup/api/start
     - When you boot a GitHub instance for the first time, you can use the following endpoint to upload a license:  Note that you need to POST to [`/setup/api/configure`](https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#start-a-configuration-process) to start the actual configuration process.  When using this endpoint, your GitHub instance must have a password set. This can be accomplished two ways:  1.  If you're working directly with the API before accessing the web interface, you must pass in the password parameter to set your password. 2.  If you set up your instance via the web interface before accessing the API, your calls to this endpoint do not need the password parameter.  For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#get-settings).
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#create-a-github-enterprise-server-license
}
     - parameter inlineObject162: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func enterpriseAdminCreateEnterpriseServerLicenseWithRequestBuilder(inlineObject162: InlineObject162? = nil) -> RequestBuilder<Void> {
        let path = "/setup/api/start"
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject162)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a global webhook
     
     - parameter accept: (header) This API is under preview and subject to change. 
     - parameter inlineObject: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminCreateGlobalWebhook(accept: String, inlineObject: InlineObject? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: GlobalHook?,_ error: Error?) -> Void)) {
        enterpriseAdminCreateGlobalWebhookWithRequestBuilder(accept: accept, inlineObject: inlineObject).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a global webhook
     - POST /admin/hooks
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#create-a-global-webhook
}
     - parameter accept: (header) This API is under preview and subject to change. 
     - parameter inlineObject: (body)  (optional)
     - returns: RequestBuilder<GlobalHook> 
     */
    open class func enterpriseAdminCreateGlobalWebhookWithRequestBuilder(accept: String, inlineObject: InlineObject? = nil) -> RequestBuilder<GlobalHook> {
        let path = "/admin/hooks"
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "accept": accept.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GlobalHook>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Create an impersonation OAuth token
     
     - parameter username: (path)  
     - parameter inlineObject12: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminCreateImpersonationOAuthToken(username: String, inlineObject12: InlineObject12? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Authorization?,_ error: Error?) -> Void)) {
        enterpriseAdminCreateImpersonationOAuthTokenWithRequestBuilder(username: username, inlineObject12: inlineObject12).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create an impersonation OAuth token
     - POST /admin/users/{username}/authorizations
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#create-an-impersonation-oauth-token
}
     - parameter username: (path)  
     - parameter inlineObject12: (body)  (optional)
     - returns: RequestBuilder<Authorization> 
     */
    open class func enterpriseAdminCreateImpersonationOAuthTokenWithRequestBuilder(username: String, inlineObject12: InlineObject12? = nil) -> RequestBuilder<Authorization> {
        var path = "/admin/users/{username}/authorizations"
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject12)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Authorization>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create an organization
     
     - parameter inlineObject4: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminCreateOrg(inlineObject4: InlineObject4? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: OrganizationSimple?,_ error: Error?) -> Void)) {
        enterpriseAdminCreateOrgWithRequestBuilder(inlineObject4: inlineObject4).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create an organization
     - POST /admin/organizations
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#create-an-organization
}
     - parameter inlineObject4: (body)  (optional)
     - returns: RequestBuilder<OrganizationSimple> 
     */
    open class func enterpriseAdminCreateOrgWithRequestBuilder(inlineObject4: InlineObject4? = nil) -> RequestBuilder<OrganizationSimple> {
        let path = "/admin/organizations"
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject4)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrganizationSimple>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a pre-receive environment
     
     - parameter inlineObject6: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminCreatePreReceiveEnvironment(inlineObject6: InlineObject6? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: PreReceiveEnvironment?,_ error: Error?) -> Void)) {
        enterpriseAdminCreatePreReceiveEnvironmentWithRequestBuilder(inlineObject6: inlineObject6).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a pre-receive environment
     - POST /admin/pre-receive-environments
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#create-a-pre-receive-environment
}
     - parameter inlineObject6: (body)  (optional)
     - returns: RequestBuilder<PreReceiveEnvironment> 
     */
    open class func enterpriseAdminCreatePreReceiveEnvironmentWithRequestBuilder(inlineObject6: InlineObject6? = nil) -> RequestBuilder<PreReceiveEnvironment> {
        let path = "/admin/pre-receive-environments"
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject6)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PreReceiveEnvironment>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a pre-receive hook
     
     - parameter inlineObject8: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminCreatePreReceiveHook(inlineObject8: InlineObject8? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: PreReceiveHook?,_ error: Error?) -> Void)) {
        enterpriseAdminCreatePreReceiveHookWithRequestBuilder(inlineObject8: inlineObject8).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a pre-receive hook
     - POST /admin/pre-receive-hooks
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#create-a-pre-receive-hook
}
     - parameter inlineObject8: (body)  (optional)
     - returns: RequestBuilder<PreReceiveHook> 
     */
    open class func enterpriseAdminCreatePreReceiveHookWithRequestBuilder(inlineObject8: InlineObject8? = nil) -> RequestBuilder<PreReceiveHook> {
        let path = "/admin/pre-receive-hooks"
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject8)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PreReceiveHook>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a registration token for an enterprise
     
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminCreateRegistrationTokenForEnterprise(enterprise: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticationToken?,_ error: Error?) -> Void)) {
        enterpriseAdminCreateRegistrationTokenForEnterpriseWithRequestBuilder(enterprise: enterprise).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a registration token for an enterprise
     - POST /enterprises/{enterprise}/actions/runners/registration-token
     - Returns a token that you can pass to the `config` script. The token expires after one hour.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.  #### Example using registration token  Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.  ``` ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN ```
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#create-a-registration-token-for-an-enterprise
}
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - returns: RequestBuilder<AuthenticationToken> 
     */
    open class func enterpriseAdminCreateRegistrationTokenForEnterpriseWithRequestBuilder(enterprise: String) -> RequestBuilder<AuthenticationToken> {
        var path = "/enterprises/{enterprise}/actions/runners/registration-token"
        let enterprisePreEscape = "\(APIHelper.mapValueToPathItem(enterprise))"
        let enterprisePostEscape = enterprisePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{enterprise}", with: enterprisePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AuthenticationToken>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a remove token for an enterprise
     
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminCreateRemoveTokenForEnterprise(enterprise: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticationToken?,_ error: Error?) -> Void)) {
        enterpriseAdminCreateRemoveTokenForEnterpriseWithRequestBuilder(enterprise: enterprise).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a remove token for an enterprise
     - POST /enterprises/{enterprise}/actions/runners/remove-token
     - Returns a token that you can pass to the `config` script to remove a self-hosted runner from an enterprise. The token expires after one hour.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.  #### Example using remove token  To remove your self-hosted runner from an enterprise, replace `TOKEN` with the remove token provided by this endpoint.  ``` ./config.sh remove --token TOKEN ```
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#create-a-remove-token-for-an-enterprise
}
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - returns: RequestBuilder<AuthenticationToken> 
     */
    open class func enterpriseAdminCreateRemoveTokenForEnterpriseWithRequestBuilder(enterprise: String) -> RequestBuilder<AuthenticationToken> {
        var path = "/enterprises/{enterprise}/actions/runners/remove-token"
        let enterprisePreEscape = "\(APIHelper.mapValueToPathItem(enterprise))"
        let enterprisePostEscape = enterprisePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{enterprise}", with: enterprisePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AuthenticationToken>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a self-hosted runner group for an enterprise
     
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter inlineObject27: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminCreateSelfHostedRunnerGroupForEnterprise(enterprise: String, inlineObject27: InlineObject27? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: RunnerGroupsEnterprise?,_ error: Error?) -> Void)) {
        enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseWithRequestBuilder(enterprise: enterprise, inlineObject27: inlineObject27).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a self-hosted runner group for an enterprise
     - POST /enterprises/{enterprise}/actions/runner-groups
     - Creates a new self-hosted runner group for an enterprise.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#create-self-hosted-runner-group-for-an-enterprise
}
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter inlineObject27: (body)  (optional)
     - returns: RequestBuilder<RunnerGroupsEnterprise> 
     */
    open class func enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseWithRequestBuilder(enterprise: String, inlineObject27: InlineObject27? = nil) -> RequestBuilder<RunnerGroupsEnterprise> {
        var path = "/enterprises/{enterprise}/actions/runner-groups"
        let enterprisePreEscape = "\(APIHelper.mapValueToPathItem(enterprise))"
        let enterprisePostEscape = enterprisePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{enterprise}", with: enterprisePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject27)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RunnerGroupsEnterprise>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a user
     
     - parameter inlineObject10: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminCreateUser(inlineObject10: InlineObject10? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: SimpleUser?,_ error: Error?) -> Void)) {
        enterpriseAdminCreateUserWithRequestBuilder(inlineObject10: inlineObject10).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a user
     - POST /admin/users
     - If an external authentication mechanism is used, the login name should match the login name in the external system. If you are using LDAP authentication, you should also [update the LDAP mapping](https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user) for the user.  The login name will be normalized to only contain alphanumeric characters or single hyphens. For example, if you send `\"octo_cat\"` as the login, a user named `\"octo-cat\"` will be created.  If the login name or email address is already associated with an account, the server will return a `422` response.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#create-a-user
}
     - parameter inlineObject10: (body)  (optional)
     - returns: RequestBuilder<SimpleUser> 
     */
    open class func enterpriseAdminCreateUserWithRequestBuilder(inlineObject10: InlineObject10? = nil) -> RequestBuilder<SimpleUser> {
        let path = "/admin/users"
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject10)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SimpleUser>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a global webhook
     
     - parameter accept: (header) This API is under preview and subject to change. 
     - parameter hookId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminDeleteGlobalWebhook(accept: String, hookId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        enterpriseAdminDeleteGlobalWebhookWithRequestBuilder(accept: accept, hookId: hookId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a global webhook
     - DELETE /admin/hooks/{hook_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#delete-a-global-webhook
}
     - parameter accept: (header) This API is under preview and subject to change. 
     - parameter hookId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func enterpriseAdminDeleteGlobalWebhookWithRequestBuilder(accept: String, hookId: Int) -> RequestBuilder<Void> {
        var path = "/admin/hooks/{hook_id}"
        let hookIdPreEscape = "\(APIHelper.mapValueToPathItem(hookId))"
        let hookIdPostEscape = hookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{hook_id}", with: hookIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "accept": accept.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Delete an impersonation OAuth token
     
     - parameter username: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminDeleteImpersonationOAuthToken(username: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        enterpriseAdminDeleteImpersonationOAuthTokenWithRequestBuilder(username: username).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete an impersonation OAuth token
     - DELETE /admin/users/{username}/authorizations
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#delete-an-impersonation-oauth-token
}
     - parameter username: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func enterpriseAdminDeleteImpersonationOAuthTokenWithRequestBuilder(username: String) -> RequestBuilder<Void> {
        var path = "/admin/users/{username}/authorizations"
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a personal access token
     
     - parameter tokenId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminDeletePersonalAccessToken(tokenId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        enterpriseAdminDeletePersonalAccessTokenWithRequestBuilder(tokenId: tokenId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a personal access token
     - DELETE /admin/tokens/{token_id}
     - Deletes a personal access token. Returns a `403 - Forbidden` status when a personal access token is in use. For example, if you access this endpoint with the same personal access token that you are trying to delete, you will receive this error.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#delete-a-personal-access-token
}
     - parameter tokenId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func enterpriseAdminDeletePersonalAccessTokenWithRequestBuilder(tokenId: Int) -> RequestBuilder<Void> {
        var path = "/admin/tokens/{token_id}"
        let tokenIdPreEscape = "\(APIHelper.mapValueToPathItem(tokenId))"
        let tokenIdPostEscape = tokenIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token_id}", with: tokenIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a pre-receive environment
     
     - parameter preReceiveEnvironmentId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminDeletePreReceiveEnvironment(preReceiveEnvironmentId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        enterpriseAdminDeletePreReceiveEnvironmentWithRequestBuilder(preReceiveEnvironmentId: preReceiveEnvironmentId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a pre-receive environment
     - DELETE /admin/pre-receive-environments/{pre_receive_environment_id}
     - If you attempt to delete an environment that cannot be deleted, you will receive a `422 Unprocessable Entity` response.  The possible error messages are:  *   _Cannot modify or delete the default environment_ *   _Cannot delete environment that has hooks_ *   _Cannot delete environment when download is in progress_
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#delete-a-pre-receive-environment
}
     - parameter preReceiveEnvironmentId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func enterpriseAdminDeletePreReceiveEnvironmentWithRequestBuilder(preReceiveEnvironmentId: Int) -> RequestBuilder<Void> {
        var path = "/admin/pre-receive-environments/{pre_receive_environment_id}"
        let preReceiveEnvironmentIdPreEscape = "\(APIHelper.mapValueToPathItem(preReceiveEnvironmentId))"
        let preReceiveEnvironmentIdPostEscape = preReceiveEnvironmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pre_receive_environment_id}", with: preReceiveEnvironmentIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a pre-receive hook
     
     - parameter preReceiveHookId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminDeletePreReceiveHook(preReceiveHookId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        enterpriseAdminDeletePreReceiveHookWithRequestBuilder(preReceiveHookId: preReceiveHookId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a pre-receive hook
     - DELETE /admin/pre-receive-hooks/{pre_receive_hook_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#delete-a-pre-receive-hook
}
     - parameter preReceiveHookId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func enterpriseAdminDeletePreReceiveHookWithRequestBuilder(preReceiveHookId: Int) -> RequestBuilder<Void> {
        var path = "/admin/pre-receive-hooks/{pre_receive_hook_id}"
        let preReceiveHookIdPreEscape = "\(APIHelper.mapValueToPathItem(preReceiveHookId))"
        let preReceiveHookIdPostEscape = preReceiveHookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pre_receive_hook_id}", with: preReceiveHookIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a public key
     
     - parameter keyIds: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminDeletePublicKey(keyIds: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        enterpriseAdminDeletePublicKeyWithRequestBuilder(keyIds: keyIds).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a public key
     - DELETE /admin/keys/{key_ids}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#delete-a-public-key
}
     - parameter keyIds: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func enterpriseAdminDeletePublicKeyWithRequestBuilder(keyIds: String) -> RequestBuilder<Void> {
        var path = "/admin/keys/{key_ids}"
        let keyIdsPreEscape = "\(APIHelper.mapValueToPathItem(keyIds))"
        let keyIdsPostEscape = keyIdsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{key_ids}", with: keyIdsPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a self-hosted runner from an enterprise
     
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter runnerId: (path) Unique identifier of the self-hosted runner. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminDeleteSelfHostedRunnerFromEnterprise(enterprise: String, runnerId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        enterpriseAdminDeleteSelfHostedRunnerFromEnterpriseWithRequestBuilder(enterprise: enterprise, runnerId: runnerId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a self-hosted runner from an enterprise
     - DELETE /enterprises/{enterprise}/actions/runners/{runner_id}
     - Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#delete-self-hosted-runner-from-an-enterprise
}
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter runnerId: (path) Unique identifier of the self-hosted runner. 
     - returns: RequestBuilder<Void> 
     */
    open class func enterpriseAdminDeleteSelfHostedRunnerFromEnterpriseWithRequestBuilder(enterprise: String, runnerId: Int) -> RequestBuilder<Void> {
        var path = "/enterprises/{enterprise}/actions/runners/{runner_id}"
        let enterprisePreEscape = "\(APIHelper.mapValueToPathItem(enterprise))"
        let enterprisePostEscape = enterprisePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{enterprise}", with: enterprisePostEscape, options: .literal, range: nil)
        let runnerIdPreEscape = "\(APIHelper.mapValueToPathItem(runnerId))"
        let runnerIdPostEscape = runnerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runner_id}", with: runnerIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a self-hosted runner group from an enterprise
     
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise(enterprise: String, runnerGroupId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        enterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseWithRequestBuilder(enterprise: enterprise, runnerGroupId: runnerGroupId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a self-hosted runner group from an enterprise
     - DELETE /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}
     - Deletes a self-hosted runner group for an enterprise.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#delete-a-self-hosted-runner-group-from-an-enterprise
}
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - returns: RequestBuilder<Void> 
     */
    open class func enterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseWithRequestBuilder(enterprise: String, runnerGroupId: Int) -> RequestBuilder<Void> {
        var path = "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}"
        let enterprisePreEscape = "\(APIHelper.mapValueToPathItem(enterprise))"
        let enterprisePostEscape = enterprisePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{enterprise}", with: enterprisePostEscape, options: .literal, range: nil)
        let runnerGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(runnerGroupId))"
        let runnerGroupIdPostEscape = runnerGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runner_group_id}", with: runnerGroupIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a user
     
     - parameter username: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminDeleteUser(username: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        enterpriseAdminDeleteUserWithRequestBuilder(username: username).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a user
     - DELETE /admin/users/{username}
     - Deleting a user will delete all their repositories, gists, applications, and personal settings. [Suspending a user](https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#suspend-a-user) is often a better option.  You can delete any user account except your own.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#delete-a-user
}
     - parameter username: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func enterpriseAdminDeleteUserWithRequestBuilder(username: String) -> RequestBuilder<Void> {
        var path = "/admin/users/{username}"
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Demote a site administrator
     
     - parameter username: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminDemoteSiteAdministrator(username: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        enterpriseAdminDemoteSiteAdministratorWithRequestBuilder(username: username).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Demote a site administrator
     - DELETE /users/{username}/site_admin
     - You can demote any user account except your own.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#demote-a-site-administrator
}
     - parameter username: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func enterpriseAdminDemoteSiteAdministratorWithRequestBuilder(username: String) -> RequestBuilder<Void> {
        var path = "/users/{username}/site_admin"
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Disable a selected organization for GitHub Actions in an enterprise
     
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter orgId: (path) Unique identifier of an organization. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise(enterprise: String, orgId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        enterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseWithRequestBuilder(enterprise: enterprise, orgId: orgId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Disable a selected organization for GitHub Actions in an enterprise
     - DELETE /enterprises/{enterprise}/actions/permissions/organizations/{org_id}
     - Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#disable-a-selected-organization-for-github-actions-in-an-enterprise
}
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter orgId: (path) Unique identifier of an organization. 
     - returns: RequestBuilder<Void> 
     */
    open class func enterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseWithRequestBuilder(enterprise: String, orgId: Int) -> RequestBuilder<Void> {
        var path = "/enterprises/{enterprise}/actions/permissions/organizations/{org_id}"
        let enterprisePreEscape = "\(APIHelper.mapValueToPathItem(enterprise))"
        let enterprisePostEscape = enterprisePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{enterprise}", with: enterprisePostEscape, options: .literal, range: nil)
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_id}", with: orgIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Enable or disable maintenance mode
     
     - parameter inlineObject158: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminEnableOrDisableMaintenanceMode(inlineObject158: InlineObject158? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: MaintenanceStatus?,_ error: Error?) -> Void)) {
        enterpriseAdminEnableOrDisableMaintenanceModeWithRequestBuilder(inlineObject158: inlineObject158).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Enable or disable maintenance mode
     - POST /setup/api/maintenance
     - The possible values for `enabled` are `true` and `false`. When it's `false`, the attribute `when` is ignored and the maintenance mode is turned off. `when` defines the time period when the maintenance was enabled.  The possible values for `when` are `now` or any date parseable by [mojombo/chronic](https://github.com/mojombo/chronic).
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#enable-or-disable-maintenance-mode
}
     - parameter inlineObject158: (body)  (optional)
     - returns: RequestBuilder<MaintenanceStatus> 
     */
    open class func enterpriseAdminEnableOrDisableMaintenanceModeWithRequestBuilder(inlineObject158: InlineObject158? = nil) -> RequestBuilder<MaintenanceStatus> {
        let path = "/setup/api/maintenance"
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject158)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MaintenanceStatus>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Enable a selected organization for GitHub Actions in an enterprise
     
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter orgId: (path) Unique identifier of an organization. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise(enterprise: String, orgId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        enterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseWithRequestBuilder(enterprise: enterprise, orgId: orgId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Enable a selected organization for GitHub Actions in an enterprise
     - PUT /enterprises/{enterprise}/actions/permissions/organizations/{org_id}
     - Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#enable-a-selected-organization-for-github-actions-in-an-enterprise
}
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter orgId: (path) Unique identifier of an organization. 
     - returns: RequestBuilder<Void> 
     */
    open class func enterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseWithRequestBuilder(enterprise: String, orgId: Int) -> RequestBuilder<Void> {
        var path = "/enterprises/{enterprise}/actions/permissions/organizations/{org_id}"
        let enterprisePreEscape = "\(APIHelper.mapValueToPathItem(enterprise))"
        let enterprisePostEscape = enterprisePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{enterprise}", with: enterprisePostEscape, options: .literal, range: nil)
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_id}", with: orgIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all authorized SSH keys
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminGetAllAuthorizedSshKeys(apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [SshKey]?,_ error: Error?) -> Void)) {
        enterpriseAdminGetAllAuthorizedSshKeysWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all authorized SSH keys
     - GET /setup/api/settings/authorized-keys
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#get-all-authorized-ssh-keys
}
     - returns: RequestBuilder<[SshKey]> 
     */
    open class func enterpriseAdminGetAllAuthorizedSshKeysWithRequestBuilder() -> RequestBuilder<[SshKey]> {
        let path = "/setup/api/settings/authorized-keys"
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[SshKey]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get allowed actions for an enterprise
     
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminGetAllowedActionsEnterprise(enterprise: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: SelectedActions?,_ error: Error?) -> Void)) {
        enterpriseAdminGetAllowedActionsEnterpriseWithRequestBuilder(enterprise: enterprise).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get allowed actions for an enterprise
     - GET /enterprises/{enterprise}/actions/permissions/selected-actions
     - Gets the selected actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#get-allowed-actions-for-an-enterprise
}
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - returns: RequestBuilder<SelectedActions> 
     */
    open class func enterpriseAdminGetAllowedActionsEnterpriseWithRequestBuilder(enterprise: String) -> RequestBuilder<SelectedActions> {
        var path = "/enterprises/{enterprise}/actions/permissions/selected-actions"
        let enterprisePreEscape = "\(APIHelper.mapValueToPathItem(enterprise))"
        let enterprisePostEscape = enterprisePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{enterprise}", with: enterprisePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SelectedActions>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the global announcement banner
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminGetAnnouncement(apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Announcement?,_ error: Error?) -> Void)) {
        enterpriseAdminGetAnnouncementWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the global announcement banner
     - GET /enterprise/announcement
     - Gets the current message and expiration date of the global announcement banner in your enterprise.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/enterprise-admin#get-the-current-announcement
}
     - returns: RequestBuilder<Announcement> 
     */
    open class func enterpriseAdminGetAnnouncementWithRequestBuilder() -> RequestBuilder<Announcement> {
        let path = "/enterprise/announcement"
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Announcement>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the configuration status
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminGetConfigurationStatus(apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: ConfigurationStatus?,_ error: Error?) -> Void)) {
        enterpriseAdminGetConfigurationStatusWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the configuration status
     - GET /setup/api/configcheck
     - This endpoint allows you to check the status of the most recent configuration process:  Note that you may need to wait several seconds after you start a process before you can check its status.  The different statuses are:  | Status        | Description                       | | ------------- | --------------------------------- | | `PENDING`     | The job has not started yet       | | `CONFIGURING` | The job is running                | | `DONE`        | The job has finished correctly    | | `FAILED`      | The job has finished unexpectedly |
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#get-the-configuration-status
}
     - returns: RequestBuilder<ConfigurationStatus> 
     */
    open class func enterpriseAdminGetConfigurationStatusWithRequestBuilder() -> RequestBuilder<ConfigurationStatus> {
        let path = "/setup/api/configcheck"
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ConfigurationStatus>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the download status for a pre-receive environment
     
     - parameter preReceiveEnvironmentId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminGetDownloadStatusForPreReceiveEnvironment(preReceiveEnvironmentId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: PreReceiveEnvironmentDownloadStatus?,_ error: Error?) -> Void)) {
        enterpriseAdminGetDownloadStatusForPreReceiveEnvironmentWithRequestBuilder(preReceiveEnvironmentId: preReceiveEnvironmentId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the download status for a pre-receive environment
     - GET /admin/pre-receive-environments/{pre_receive_environment_id}/downloads/latest
     - In addition to seeing the download status at the \"[Get a pre-receive environment](#get-a-pre-receive-environment)\" endpoint, there is also this separate endpoint for just the download status.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#get-the-download-status-for-a-pre-receive-environment
}
     - parameter preReceiveEnvironmentId: (path)  
     - returns: RequestBuilder<PreReceiveEnvironmentDownloadStatus> 
     */
    open class func enterpriseAdminGetDownloadStatusForPreReceiveEnvironmentWithRequestBuilder(preReceiveEnvironmentId: Int) -> RequestBuilder<PreReceiveEnvironmentDownloadStatus> {
        var path = "/admin/pre-receive-environments/{pre_receive_environment_id}/downloads/latest"
        let preReceiveEnvironmentIdPreEscape = "\(APIHelper.mapValueToPathItem(preReceiveEnvironmentId))"
        let preReceiveEnvironmentIdPostEscape = preReceiveEnvironmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pre_receive_environment_id}", with: preReceiveEnvironmentIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PreReceiveEnvironmentDownloadStatus>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get GitHub Actions permissions for an enterprise
     
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminGetGithubActionsPermissionsEnterprise(enterprise: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: ActionsEnterprisePermissions?,_ error: Error?) -> Void)) {
        enterpriseAdminGetGithubActionsPermissionsEnterpriseWithRequestBuilder(enterprise: enterprise).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get GitHub Actions permissions for an enterprise
     - GET /enterprises/{enterprise}/actions/permissions
     - Gets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#get-github-actions-permissions-for-an-enterprise
}
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - returns: RequestBuilder<ActionsEnterprisePermissions> 
     */
    open class func enterpriseAdminGetGithubActionsPermissionsEnterpriseWithRequestBuilder(enterprise: String) -> RequestBuilder<ActionsEnterprisePermissions> {
        var path = "/enterprises/{enterprise}/actions/permissions"
        let enterprisePreEscape = "\(APIHelper.mapValueToPathItem(enterprise))"
        let enterprisePostEscape = enterprisePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{enterprise}", with: enterprisePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ActionsEnterprisePermissions>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a global webhook
     
     - parameter accept: (header) This API is under preview and subject to change. 
     - parameter hookId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminGetGlobalWebhook(accept: String, hookId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: GlobalHook?,_ error: Error?) -> Void)) {
        enterpriseAdminGetGlobalWebhookWithRequestBuilder(accept: accept, hookId: hookId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a global webhook
     - GET /admin/hooks/{hook_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#get-a-global-webhook
}
     - parameter accept: (header) This API is under preview and subject to change. 
     - parameter hookId: (path)  
     - returns: RequestBuilder<GlobalHook> 
     */
    open class func enterpriseAdminGetGlobalWebhookWithRequestBuilder(accept: String, hookId: Int) -> RequestBuilder<GlobalHook> {
        var path = "/admin/hooks/{hook_id}"
        let hookIdPreEscape = "\(APIHelper.mapValueToPathItem(hookId))"
        let hookIdPostEscape = hookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{hook_id}", with: hookIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "accept": accept.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GlobalHook>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get license information
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminGetLicenseInformation(apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: LicenseInfo?,_ error: Error?) -> Void)) {
        enterpriseAdminGetLicenseInformationWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get license information
     - GET /enterprise/settings/license
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#get-license-information
}
     - returns: RequestBuilder<LicenseInfo> 
     */
    open class func enterpriseAdminGetLicenseInformationWithRequestBuilder() -> RequestBuilder<LicenseInfo> {
        let path = "/enterprise/settings/license"
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LicenseInfo>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the maintenance status
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminGetMaintenanceStatus(apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: MaintenanceStatus?,_ error: Error?) -> Void)) {
        enterpriseAdminGetMaintenanceStatusWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the maintenance status
     - GET /setup/api/maintenance
     - Check your installation's maintenance status:
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#get-the-maintenance-status
}
     - returns: RequestBuilder<MaintenanceStatus> 
     */
    open class func enterpriseAdminGetMaintenanceStatusWithRequestBuilder() -> RequestBuilder<MaintenanceStatus> {
        let path = "/setup/api/maintenance"
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MaintenanceStatus>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a pre-receive environment
     
     - parameter preReceiveEnvironmentId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminGetPreReceiveEnvironment(preReceiveEnvironmentId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: PreReceiveEnvironment?,_ error: Error?) -> Void)) {
        enterpriseAdminGetPreReceiveEnvironmentWithRequestBuilder(preReceiveEnvironmentId: preReceiveEnvironmentId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a pre-receive environment
     - GET /admin/pre-receive-environments/{pre_receive_environment_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#get-a-pre-receive-environment
}
     - parameter preReceiveEnvironmentId: (path)  
     - returns: RequestBuilder<PreReceiveEnvironment> 
     */
    open class func enterpriseAdminGetPreReceiveEnvironmentWithRequestBuilder(preReceiveEnvironmentId: Int) -> RequestBuilder<PreReceiveEnvironment> {
        var path = "/admin/pre-receive-environments/{pre_receive_environment_id}"
        let preReceiveEnvironmentIdPreEscape = "\(APIHelper.mapValueToPathItem(preReceiveEnvironmentId))"
        let preReceiveEnvironmentIdPostEscape = preReceiveEnvironmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pre_receive_environment_id}", with: preReceiveEnvironmentIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PreReceiveEnvironment>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a pre-receive hook
     
     - parameter preReceiveHookId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminGetPreReceiveHook(preReceiveHookId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: PreReceiveHook?,_ error: Error?) -> Void)) {
        enterpriseAdminGetPreReceiveHookWithRequestBuilder(preReceiveHookId: preReceiveHookId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a pre-receive hook
     - GET /admin/pre-receive-hooks/{pre_receive_hook_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#get-a-pre-receive-hook
}
     - parameter preReceiveHookId: (path)  
     - returns: RequestBuilder<PreReceiveHook> 
     */
    open class func enterpriseAdminGetPreReceiveHookWithRequestBuilder(preReceiveHookId: Int) -> RequestBuilder<PreReceiveHook> {
        var path = "/admin/pre-receive-hooks/{pre_receive_hook_id}"
        let preReceiveHookIdPreEscape = "\(APIHelper.mapValueToPathItem(preReceiveHookId))"
        let preReceiveHookIdPostEscape = preReceiveHookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pre_receive_hook_id}", with: preReceiveHookIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PreReceiveHook>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a pre-receive hook for an organization
     
     - parameter org: (path)  
     - parameter preReceiveHookId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminGetPreReceiveHookForOrg(org: String, preReceiveHookId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: OrgPreReceiveHook?,_ error: Error?) -> Void)) {
        enterpriseAdminGetPreReceiveHookForOrgWithRequestBuilder(org: org, preReceiveHookId: preReceiveHookId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a pre-receive hook for an organization
     - GET /orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#get-a-pre-receive-hook-for-an-organization
}
     - parameter org: (path)  
     - parameter preReceiveHookId: (path)  
     - returns: RequestBuilder<OrgPreReceiveHook> 
     */
    open class func enterpriseAdminGetPreReceiveHookForOrgWithRequestBuilder(org: String, preReceiveHookId: Int) -> RequestBuilder<OrgPreReceiveHook> {
        var path = "/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let preReceiveHookIdPreEscape = "\(APIHelper.mapValueToPathItem(preReceiveHookId))"
        let preReceiveHookIdPostEscape = preReceiveHookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pre_receive_hook_id}", with: preReceiveHookIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgPreReceiveHook>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a pre-receive hook for a repository
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter preReceiveHookId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminGetPreReceiveHookForRepo(owner: String, repo: String, preReceiveHookId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: RepositoryPreReceiveHook?,_ error: Error?) -> Void)) {
        enterpriseAdminGetPreReceiveHookForRepoWithRequestBuilder(owner: owner, repo: repo, preReceiveHookId: preReceiveHookId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a pre-receive hook for a repository
     - GET /repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#get-a-pre-receive-hook-for-a-repository
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter preReceiveHookId: (path)  
     - returns: RequestBuilder<RepositoryPreReceiveHook> 
     */
    open class func enterpriseAdminGetPreReceiveHookForRepoWithRequestBuilder(owner: String, repo: String, preReceiveHookId: Int) -> RequestBuilder<RepositoryPreReceiveHook> {
        var path = "/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let preReceiveHookIdPreEscape = "\(APIHelper.mapValueToPathItem(preReceiveHookId))"
        let preReceiveHookIdPostEscape = preReceiveHookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pre_receive_hook_id}", with: preReceiveHookIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RepositoryPreReceiveHook>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a self-hosted runner for an enterprise
     
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter runnerId: (path) Unique identifier of the self-hosted runner. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminGetSelfHostedRunnerForEnterprise(enterprise: String, runnerId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Runner?,_ error: Error?) -> Void)) {
        enterpriseAdminGetSelfHostedRunnerForEnterpriseWithRequestBuilder(enterprise: enterprise, runnerId: runnerId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a self-hosted runner for an enterprise
     - GET /enterprises/{enterprise}/actions/runners/{runner_id}
     - Gets a specific self-hosted runner configured in an enterprise.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#get-a-self-hosted-runner-for-an-enterprise
}
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter runnerId: (path) Unique identifier of the self-hosted runner. 
     - returns: RequestBuilder<Runner> 
     */
    open class func enterpriseAdminGetSelfHostedRunnerForEnterpriseWithRequestBuilder(enterprise: String, runnerId: Int) -> RequestBuilder<Runner> {
        var path = "/enterprises/{enterprise}/actions/runners/{runner_id}"
        let enterprisePreEscape = "\(APIHelper.mapValueToPathItem(enterprise))"
        let enterprisePostEscape = enterprisePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{enterprise}", with: enterprisePostEscape, options: .literal, range: nil)
        let runnerIdPreEscape = "\(APIHelper.mapValueToPathItem(runnerId))"
        let runnerIdPostEscape = runnerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runner_id}", with: runnerIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Runner>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a self-hosted runner group for an enterprise
     
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminGetSelfHostedRunnerGroupForEnterprise(enterprise: String, runnerGroupId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: RunnerGroupsEnterprise?,_ error: Error?) -> Void)) {
        enterpriseAdminGetSelfHostedRunnerGroupForEnterpriseWithRequestBuilder(enterprise: enterprise, runnerGroupId: runnerGroupId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a self-hosted runner group for an enterprise
     - GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}
     - Gets a specific self-hosted runner group for an enterprise.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#get-a-self-hosted-runner-group-for-an-enterprise
}
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - returns: RequestBuilder<RunnerGroupsEnterprise> 
     */
    open class func enterpriseAdminGetSelfHostedRunnerGroupForEnterpriseWithRequestBuilder(enterprise: String, runnerGroupId: Int) -> RequestBuilder<RunnerGroupsEnterprise> {
        var path = "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}"
        let enterprisePreEscape = "\(APIHelper.mapValueToPathItem(enterprise))"
        let enterprisePostEscape = enterprisePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{enterprise}", with: enterprisePostEscape, options: .literal, range: nil)
        let runnerGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(runnerGroupId))"
        let runnerGroupIdPostEscape = runnerGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runner_group_id}", with: runnerGroupIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RunnerGroupsEnterprise>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get settings
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminGetSettings(apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: EnterpriseSettings?,_ error: Error?) -> Void)) {
        enterpriseAdminGetSettingsWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get settings
     - GET /setup/api/settings
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#get-settings
}
     - returns: RequestBuilder<EnterpriseSettings> 
     */
    open class func enterpriseAdminGetSettingsWithRequestBuilder() -> RequestBuilder<EnterpriseSettings> {
        let path = "/setup/api/settings"
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EnterpriseSettings>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get statistics
     
     - parameter type: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminGetTypeStats(type: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: EnterpriseOverview?,_ error: Error?) -> Void)) {
        enterpriseAdminGetTypeStatsWithRequestBuilder(type: type).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get statistics
     - GET /enterprise/stats/{type}
     - There are a variety of types to choose from:  | Type         | Description                                                                                         | | ------------ | --------------------------------------------------------------------------------------------------- | | `issues`     | The number of open and closed issues.                                                               | | `hooks`      | The number of active and inactive hooks.                                                            | | `milestones` | The number of open and closed milestones.                                                           | | `orgs`       | The number of organizations, teams, team members, and disabled organizations.                       | | `comments`   | The number of comments on issues, pull requests, commits, and gists.                                | | `pages`      | The number of GitHub Pages sites.                                                                   | | `users`      | The number of suspended and admin users.                                                            | | `gists`      | The number of private and public gists.                                                             | | `pulls`      | The number of merged, mergeable, and unmergeable pull requests.                                     | | `repos`      | The number of organization-owned repositories, root repositories, forks, pushed commits, and wikis. | | `all`        | All of the statistics listed above.                                                                 |  These statistics are cached and will be updated approximately every 10 minutes.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#get-statistics
}
     - parameter type: (path)  
     - returns: RequestBuilder<EnterpriseOverview> 
     */
    open class func enterpriseAdminGetTypeStatsWithRequestBuilder(type: String) -> RequestBuilder<EnterpriseOverview> {
        var path = "/enterprise/stats/{type}"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EnterpriseOverview>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List global webhooks
     
     - parameter accept: (header) This API is under preview and subject to change. 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminListGlobalWebhooks(accept: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [GlobalHook]?,_ error: Error?) -> Void)) {
        enterpriseAdminListGlobalWebhooksWithRequestBuilder(accept: accept, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List global webhooks
     - GET /admin/hooks
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#list-global-webhooks
}
     - parameter accept: (header) This API is under preview and subject to change. 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[GlobalHook]> 
     */
    open class func enterpriseAdminListGlobalWebhooksWithRequestBuilder(accept: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[GlobalHook]> {
        let path = "/admin/hooks"
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "accept": accept.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GlobalHook]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     List organization access to a self-hosted runner group in an enterprise
     
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise(enterprise: String, runnerGroupId: Int, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse2001?,_ error: Error?) -> Void)) {
        enterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseWithRequestBuilder(enterprise: enterprise, runnerGroupId: runnerGroupId, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List organization access to a self-hosted runner group in an enterprise
     - GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations
     - Lists the organizations with access to a self-hosted runner group.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#list-organization-access-to-a-self-hosted-runner-group-in-a-enterprise
}
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<InlineResponse2001> 
     */
    open class func enterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseWithRequestBuilder(enterprise: String, runnerGroupId: Int, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<InlineResponse2001> {
        var path = "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations"
        let enterprisePreEscape = "\(APIHelper.mapValueToPathItem(enterprise))"
        let enterprisePostEscape = enterprisePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{enterprise}", with: enterprisePostEscape, options: .literal, range: nil)
        let runnerGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(runnerGroupId))"
        let runnerGroupIdPostEscape = runnerGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runner_group_id}", with: runnerGroupIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse2001>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List personal access tokens
     
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminListPersonalAccessTokens(perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [Authorization]?,_ error: Error?) -> Void)) {
        enterpriseAdminListPersonalAccessTokensWithRequestBuilder(perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List personal access tokens
     - GET /admin/tokens
     - Lists personal access tokens for all users, including admin users.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#list-personal-access-tokens
}
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[Authorization]> 
     */
    open class func enterpriseAdminListPersonalAccessTokensWithRequestBuilder(perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[Authorization]> {
        let path = "/admin/tokens"
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Authorization]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List pre-receive environments
     
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminListPreReceiveEnvironments(perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [PreReceiveEnvironment]?,_ error: Error?) -> Void)) {
        enterpriseAdminListPreReceiveEnvironmentsWithRequestBuilder(perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List pre-receive environments
     - GET /admin/pre-receive-environments
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#list-pre-receive-environments
}
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[PreReceiveEnvironment]> 
     */
    open class func enterpriseAdminListPreReceiveEnvironmentsWithRequestBuilder(perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[PreReceiveEnvironment]> {
        let path = "/admin/pre-receive-environments"
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[PreReceiveEnvironment]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List pre-receive hooks
     
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminListPreReceiveHooks(perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [PreReceiveHook]?,_ error: Error?) -> Void)) {
        enterpriseAdminListPreReceiveHooksWithRequestBuilder(perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List pre-receive hooks
     - GET /admin/pre-receive-hooks
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#list-pre-receive-hooks
}
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[PreReceiveHook]> 
     */
    open class func enterpriseAdminListPreReceiveHooksWithRequestBuilder(perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[PreReceiveHook]> {
        let path = "/admin/pre-receive-hooks"
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[PreReceiveHook]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List pre-receive hooks for an organization
     
     - parameter org: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminListPreReceiveHooksForOrg(org: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [OrgPreReceiveHook]?,_ error: Error?) -> Void)) {
        enterpriseAdminListPreReceiveHooksForOrgWithRequestBuilder(org: org, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List pre-receive hooks for an organization
     - GET /orgs/{org}/pre-receive-hooks
     - List all pre-receive hooks that are enabled or testing for this organization as well as any disabled hooks that can be configured at the organization level. Globally disabled pre-receive hooks that do not allow downstream configuration are not listed.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#list-pre-receive-hooks-for-an-organization
}
     - parameter org: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[OrgPreReceiveHook]> 
     */
    open class func enterpriseAdminListPreReceiveHooksForOrgWithRequestBuilder(org: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[OrgPreReceiveHook]> {
        var path = "/orgs/{org}/pre-receive-hooks"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[OrgPreReceiveHook]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List pre-receive hooks for a repository
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminListPreReceiveHooksForRepo(owner: String, repo: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [RepositoryPreReceiveHook]?,_ error: Error?) -> Void)) {
        enterpriseAdminListPreReceiveHooksForRepoWithRequestBuilder(owner: owner, repo: repo, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List pre-receive hooks for a repository
     - GET /repos/{owner}/{repo}/pre-receive-hooks
     - List all pre-receive hooks that are enabled or testing for this repository as well as any disabled hooks that are allowed to be enabled at the repository level. Pre-receive hooks that are disabled at a higher level and are not configurable will not be listed.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#list-pre-receive-hooks-for-a-repository
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[RepositoryPreReceiveHook]> 
     */
    open class func enterpriseAdminListPreReceiveHooksForRepoWithRequestBuilder(owner: String, repo: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[RepositoryPreReceiveHook]> {
        var path = "/repos/{owner}/{repo}/pre-receive-hooks"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[RepositoryPreReceiveHook]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List public keys
     
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminListPublicKeys(perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [EnterprisePublicKey]?,_ error: Error?) -> Void)) {
        enterpriseAdminListPublicKeysWithRequestBuilder(perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List public keys
     - GET /admin/keys
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#list-public-keys
}
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<[EnterprisePublicKey]> 
     */
    open class func enterpriseAdminListPublicKeysWithRequestBuilder(perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<[EnterprisePublicKey]> {
        let path = "/admin/keys"
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[EnterprisePublicKey]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List runner applications for an enterprise
     
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminListRunnerApplicationsForEnterprise(enterprise: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [RunnerApplication]?,_ error: Error?) -> Void)) {
        enterpriseAdminListRunnerApplicationsForEnterpriseWithRequestBuilder(enterprise: enterprise).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List runner applications for an enterprise
     - GET /enterprises/{enterprise}/actions/runners/downloads
     - Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#list-runner-applications-for-an-enterprise
}
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - returns: RequestBuilder<[RunnerApplication]> 
     */
    open class func enterpriseAdminListRunnerApplicationsForEnterpriseWithRequestBuilder(enterprise: String) -> RequestBuilder<[RunnerApplication]> {
        var path = "/enterprises/{enterprise}/actions/runners/downloads"
        let enterprisePreEscape = "\(APIHelper.mapValueToPathItem(enterprise))"
        let enterprisePostEscape = enterprisePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{enterprise}", with: enterprisePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[RunnerApplication]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List selected organizations enabled for GitHub Actions in an enterprise
     
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise(enterprise: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse2001?,_ error: Error?) -> Void)) {
        enterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseWithRequestBuilder(enterprise: enterprise, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List selected organizations enabled for GitHub Actions in an enterprise
     - GET /enterprises/{enterprise}/actions/permissions/organizations
     - Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#list-selected-organizations-enabled-for-github-actions-in-an-enterprise
}
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<InlineResponse2001> 
     */
    open class func enterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseWithRequestBuilder(enterprise: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<InlineResponse2001> {
        var path = "/enterprises/{enterprise}/actions/permissions/organizations"
        let enterprisePreEscape = "\(APIHelper.mapValueToPathItem(enterprise))"
        let enterprisePostEscape = enterprisePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{enterprise}", with: enterprisePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse2001>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List self-hosted runner groups for an enterprise
     
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminListSelfHostedRunnerGroupsForEnterprise(enterprise: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse2002?,_ error: Error?) -> Void)) {
        enterpriseAdminListSelfHostedRunnerGroupsForEnterpriseWithRequestBuilder(enterprise: enterprise, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List self-hosted runner groups for an enterprise
     - GET /enterprises/{enterprise}/actions/runner-groups
     - Lists all self-hosted runner groups for an enterprise.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#list-self-hosted-runner-groups-for-an-enterprise
}
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<InlineResponse2002> 
     */
    open class func enterpriseAdminListSelfHostedRunnerGroupsForEnterpriseWithRequestBuilder(enterprise: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<InlineResponse2002> {
        var path = "/enterprises/{enterprise}/actions/runner-groups"
        let enterprisePreEscape = "\(APIHelper.mapValueToPathItem(enterprise))"
        let enterprisePostEscape = enterprisePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{enterprise}", with: enterprisePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List self-hosted runners for an enterprise
     
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminListSelfHostedRunnersForEnterprise(enterprise: String, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse2004?,_ error: Error?) -> Void)) {
        enterpriseAdminListSelfHostedRunnersForEnterpriseWithRequestBuilder(enterprise: enterprise, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List self-hosted runners for an enterprise
     - GET /enterprises/{enterprise}/actions/runners
     - Lists all self-hosted runners configured for an enterprise.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#list-self-hosted-runners-for-an-enterprise
}
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<InlineResponse2004> 
     */
    open class func enterpriseAdminListSelfHostedRunnersForEnterpriseWithRequestBuilder(enterprise: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<InlineResponse2004> {
        var path = "/enterprises/{enterprise}/actions/runners"
        let enterprisePreEscape = "\(APIHelper.mapValueToPathItem(enterprise))"
        let enterprisePostEscape = enterprisePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{enterprise}", with: enterprisePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse2004>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List self-hosted runners in a group for an enterprise
     
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminListSelfHostedRunnersInGroupForEnterprise(enterprise: String, runnerGroupId: Int, perPage: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse2003?,_ error: Error?) -> Void)) {
        enterpriseAdminListSelfHostedRunnersInGroupForEnterpriseWithRequestBuilder(enterprise: enterprise, runnerGroupId: runnerGroupId, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List self-hosted runners in a group for an enterprise
     - GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners
     - Lists the self-hosted runners that are in a specific enterprise group.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     - responseHeaders: [Link(String)]
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#list-self-hosted-runners-in-a-group-for-an-enterprise
}
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter perPage: (query) Results per page (max 100) (optional, default to 30)
     - parameter page: (query) Page number of the results to fetch. (optional, default to 1)
     - returns: RequestBuilder<InlineResponse2003> 
     */
    open class func enterpriseAdminListSelfHostedRunnersInGroupForEnterpriseWithRequestBuilder(enterprise: String, runnerGroupId: Int, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<InlineResponse2003> {
        var path = "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners"
        let enterprisePreEscape = "\(APIHelper.mapValueToPathItem(enterprise))"
        let enterprisePostEscape = enterprisePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{enterprise}", with: enterprisePostEscape, options: .literal, range: nil)
        let runnerGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(runnerGroupId))"
        let runnerGroupIdPostEscape = runnerGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runner_group_id}", with: runnerGroupIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse2003>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Ping a global webhook
     
     - parameter accept: (header) This API is under preview and subject to change. 
     - parameter hookId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminPingGlobalWebhook(accept: String, hookId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        enterpriseAdminPingGlobalWebhookWithRequestBuilder(accept: accept, hookId: hookId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Ping a global webhook
     - POST /admin/hooks/{hook_id}/pings
     - This will trigger a [ping event](https://docs.github.com/enterprise-server@3.0/webhooks/#ping-event) to be sent to the webhook.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#ping-a-global-webhook
}
     - parameter accept: (header) This API is under preview and subject to change. 
     - parameter hookId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func enterpriseAdminPingGlobalWebhookWithRequestBuilder(accept: String, hookId: Int) -> RequestBuilder<Void> {
        var path = "/admin/hooks/{hook_id}/pings"
        let hookIdPreEscape = "\(APIHelper.mapValueToPathItem(hookId))"
        let hookIdPostEscape = hookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{hook_id}", with: hookIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "accept": accept.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Promote a user to be a site administrator
     
     - parameter username: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminPromoteUserToBeSiteAdministrator(username: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        enterpriseAdminPromoteUserToBeSiteAdministratorWithRequestBuilder(username: username).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Promote a user to be a site administrator
     - PUT /users/{username}/site_admin
     - Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs).\"
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#promote-a-user-to-be-a-site-administrator
}
     - parameter username: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func enterpriseAdminPromoteUserToBeSiteAdministratorWithRequestBuilder(username: String) -> RequestBuilder<Void> {
        var path = "/users/{username}/site_admin"
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove the global announcement banner
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminRemoveAnnouncement(apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        enterpriseAdminRemoveAnnouncementWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove the global announcement banner
     - DELETE /enterprise/announcement
     - Removes the global announcement banner in your enterprise.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/enterprise-admin#clear-the-current-announcement
}
     - returns: RequestBuilder<Void> 
     */
    open class func enterpriseAdminRemoveAnnouncementWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/enterprise/announcement"
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove an authorized SSH key
     
     - parameter inlineObject161: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminRemoveAuthorizedSshKey(inlineObject161: InlineObject161? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: [SshKey]?,_ error: Error?) -> Void)) {
        enterpriseAdminRemoveAuthorizedSshKeyWithRequestBuilder(inlineObject161: inlineObject161).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove an authorized SSH key
     - DELETE /setup/api/settings/authorized-keys
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#remove-an-authorized-ssh-key
}
     - parameter inlineObject161: (body)  (optional)
     - returns: RequestBuilder<[SshKey]> 
     */
    open class func enterpriseAdminRemoveAuthorizedSshKeyWithRequestBuilder(inlineObject161: InlineObject161? = nil) -> RequestBuilder<[SshKey]> {
        let path = "/setup/api/settings/authorized-keys"
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject161)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[SshKey]>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Remove organization access to a self-hosted runner group in an enterprise
     
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter orgId: (path) Unique identifier of an organization. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise(enterprise: String, runnerGroupId: Int, orgId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        enterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseWithRequestBuilder(enterprise: enterprise, runnerGroupId: runnerGroupId, orgId: orgId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove organization access to a self-hosted runner group in an enterprise
     - DELETE /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}
     - Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise).\"  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#remove-organization-access-to-a-self-hosted-runner-group-in-an-enterprise
}
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter orgId: (path) Unique identifier of an organization. 
     - returns: RequestBuilder<Void> 
     */
    open class func enterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseWithRequestBuilder(enterprise: String, runnerGroupId: Int, orgId: Int) -> RequestBuilder<Void> {
        var path = "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}"
        let enterprisePreEscape = "\(APIHelper.mapValueToPathItem(enterprise))"
        let enterprisePostEscape = enterprisePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{enterprise}", with: enterprisePostEscape, options: .literal, range: nil)
        let runnerGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(runnerGroupId))"
        let runnerGroupIdPostEscape = runnerGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runner_group_id}", with: runnerGroupIdPostEscape, options: .literal, range: nil)
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_id}", with: orgIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove pre-receive hook enforcement for an organization
     
     - parameter org: (path)  
     - parameter preReceiveHookId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminRemovePreReceiveHookEnforcementForOrg(org: String, preReceiveHookId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: OrgPreReceiveHook?,_ error: Error?) -> Void)) {
        enterpriseAdminRemovePreReceiveHookEnforcementForOrgWithRequestBuilder(org: org, preReceiveHookId: preReceiveHookId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove pre-receive hook enforcement for an organization
     - DELETE /orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}
     - Removes any overrides for this hook at the org level for this org.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#remove-pre-receive-hook-enforcement-for-an-organization
}
     - parameter org: (path)  
     - parameter preReceiveHookId: (path)  
     - returns: RequestBuilder<OrgPreReceiveHook> 
     */
    open class func enterpriseAdminRemovePreReceiveHookEnforcementForOrgWithRequestBuilder(org: String, preReceiveHookId: Int) -> RequestBuilder<OrgPreReceiveHook> {
        var path = "/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let preReceiveHookIdPreEscape = "\(APIHelper.mapValueToPathItem(preReceiveHookId))"
        let preReceiveHookIdPostEscape = preReceiveHookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pre_receive_hook_id}", with: preReceiveHookIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgPreReceiveHook>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove pre-receive hook enforcement for a repository
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter preReceiveHookId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminRemovePreReceiveHookEnforcementForRepo(owner: String, repo: String, preReceiveHookId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: RepositoryPreReceiveHook?,_ error: Error?) -> Void)) {
        enterpriseAdminRemovePreReceiveHookEnforcementForRepoWithRequestBuilder(owner: owner, repo: repo, preReceiveHookId: preReceiveHookId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove pre-receive hook enforcement for a repository
     - DELETE /repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}
     - Deletes any overridden enforcement on this repository for the specified hook.  Responds with effective values inherited from owner and/or global level.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#remove-pre-receive-hook-enforcement-for-a-repository
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter preReceiveHookId: (path)  
     - returns: RequestBuilder<RepositoryPreReceiveHook> 
     */
    open class func enterpriseAdminRemovePreReceiveHookEnforcementForRepoWithRequestBuilder(owner: String, repo: String, preReceiveHookId: Int) -> RequestBuilder<RepositoryPreReceiveHook> {
        var path = "/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let preReceiveHookIdPreEscape = "\(APIHelper.mapValueToPathItem(preReceiveHookId))"
        let preReceiveHookIdPostEscape = preReceiveHookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pre_receive_hook_id}", with: preReceiveHookIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RepositoryPreReceiveHook>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove a self-hosted runner from a group for an enterprise
     
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter runnerId: (path) Unique identifier of the self-hosted runner. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise(enterprise: String, runnerGroupId: Int, runnerId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseWithRequestBuilder(enterprise: enterprise, runnerGroupId: runnerGroupId, runnerId: runnerId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove a self-hosted runner from a group for an enterprise
     - DELETE /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}
     - Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#remove-a-self-hosted-runner-from-a-group-for-an-enterprise
}
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter runnerId: (path) Unique identifier of the self-hosted runner. 
     - returns: RequestBuilder<Void> 
     */
    open class func enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseWithRequestBuilder(enterprise: String, runnerGroupId: Int, runnerId: Int) -> RequestBuilder<Void> {
        var path = "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}"
        let enterprisePreEscape = "\(APIHelper.mapValueToPathItem(enterprise))"
        let enterprisePostEscape = enterprisePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{enterprise}", with: enterprisePostEscape, options: .literal, range: nil)
        let runnerGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(runnerGroupId))"
        let runnerGroupIdPostEscape = runnerGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runner_group_id}", with: runnerGroupIdPostEscape, options: .literal, range: nil)
        let runnerIdPreEscape = "\(APIHelper.mapValueToPathItem(runnerId))"
        let runnerIdPostEscape = runnerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runner_id}", with: runnerIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set allowed actions for an enterprise
     
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter selectedActions: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminSetAllowedActionsEnterprise(enterprise: String, selectedActions: SelectedActions? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        enterpriseAdminSetAllowedActionsEnterpriseWithRequestBuilder(enterprise: enterprise, selectedActions: selectedActions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set allowed actions for an enterprise
     - PUT /enterprises/{enterprise}/actions/permissions/selected-actions
     - Sets the actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#set-allowed-actions-for-an-enterprise
}
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter selectedActions: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func enterpriseAdminSetAllowedActionsEnterpriseWithRequestBuilder(enterprise: String, selectedActions: SelectedActions? = nil) -> RequestBuilder<Void> {
        var path = "/enterprises/{enterprise}/actions/permissions/selected-actions"
        let enterprisePreEscape = "\(APIHelper.mapValueToPathItem(enterprise))"
        let enterprisePostEscape = enterprisePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{enterprise}", with: enterprisePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: selectedActions)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set the global announcement banner
     
     - parameter announcement: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminSetAnnouncement(announcement: Announcement? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Announcement?,_ error: Error?) -> Void)) {
        enterpriseAdminSetAnnouncementWithRequestBuilder(announcement: announcement).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set the global announcement banner
     - PATCH /enterprise/announcement
     - Sets the message and expiration time for the global announcement banner in your enterprise.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/v3/enterprise-admin#set-the-current-announcement
}
     - parameter announcement: (body)  (optional)
     - returns: RequestBuilder<Announcement> 
     */
    open class func enterpriseAdminSetAnnouncementWithRequestBuilder(announcement: Announcement? = nil) -> RequestBuilder<Announcement> {
        let path = "/enterprise/announcement"
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: announcement)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Announcement>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set GitHub Actions permissions for an enterprise
     
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter inlineObject25: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminSetGithubActionsPermissionsEnterprise(enterprise: String, inlineObject25: InlineObject25? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        enterpriseAdminSetGithubActionsPermissionsEnterpriseWithRequestBuilder(enterprise: enterprise, inlineObject25: inlineObject25).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set GitHub Actions permissions for an enterprise
     - PUT /enterprises/{enterprise}/actions/permissions
     - Sets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#set-github-actions-permissions-for-an-enterprise
}
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter inlineObject25: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func enterpriseAdminSetGithubActionsPermissionsEnterpriseWithRequestBuilder(enterprise: String, inlineObject25: InlineObject25? = nil) -> RequestBuilder<Void> {
        var path = "/enterprises/{enterprise}/actions/permissions"
        let enterprisePreEscape = "\(APIHelper.mapValueToPathItem(enterprise))"
        let enterprisePostEscape = enterprisePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{enterprise}", with: enterprisePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject25)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set organization access for a self-hosted runner group in an enterprise
     
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter inlineObject29: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise(enterprise: String, runnerGroupId: Int, inlineObject29: InlineObject29? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseWithRequestBuilder(enterprise: enterprise, runnerGroupId: runnerGroupId, inlineObject29: inlineObject29).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set organization access for a self-hosted runner group in an enterprise
     - PUT /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations
     - Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#set-organization-access-to-a-self-hosted-runner-group-in-an-enterprise
}
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter inlineObject29: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseWithRequestBuilder(enterprise: String, runnerGroupId: Int, inlineObject29: InlineObject29? = nil) -> RequestBuilder<Void> {
        var path = "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations"
        let enterprisePreEscape = "\(APIHelper.mapValueToPathItem(enterprise))"
        let enterprisePostEscape = enterprisePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{enterprise}", with: enterprisePostEscape, options: .literal, range: nil)
        let runnerGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(runnerGroupId))"
        let runnerGroupIdPostEscape = runnerGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runner_group_id}", with: runnerGroupIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject29)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set selected organizations enabled for GitHub Actions in an enterprise
     
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter inlineObject26: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise(enterprise: String, inlineObject26: InlineObject26? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseWithRequestBuilder(enterprise: enterprise, inlineObject26: inlineObject26).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set selected organizations enabled for GitHub Actions in an enterprise
     - PUT /enterprises/{enterprise}/actions/permissions/organizations
     - Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#set-selected-organizations-enabled-for-github-actions-in-an-enterprise
}
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter inlineObject26: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseWithRequestBuilder(enterprise: String, inlineObject26: InlineObject26? = nil) -> RequestBuilder<Void> {
        var path = "/enterprises/{enterprise}/actions/permissions/organizations"
        let enterprisePreEscape = "\(APIHelper.mapValueToPathItem(enterprise))"
        let enterprisePostEscape = enterprisePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{enterprise}", with: enterprisePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject26)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set self-hosted runners in a group for an enterprise
     
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter inlineObject30: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminSetSelfHostedRunnersInGroupForEnterprise(enterprise: String, runnerGroupId: Int, inlineObject30: InlineObject30? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseWithRequestBuilder(enterprise: enterprise, runnerGroupId: runnerGroupId, inlineObject30: inlineObject30).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set self-hosted runners in a group for an enterprise
     - PUT /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners
     - Replaces the list of self-hosted runners that that are part of an enterprise runner group.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#set-self-hosted-runners-in-a-group-for-an-enterprise
}
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter inlineObject30: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseWithRequestBuilder(enterprise: String, runnerGroupId: Int, inlineObject30: InlineObject30? = nil) -> RequestBuilder<Void> {
        var path = "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners"
        let enterprisePreEscape = "\(APIHelper.mapValueToPathItem(enterprise))"
        let enterprisePostEscape = enterprisePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{enterprise}", with: enterprisePostEscape, options: .literal, range: nil)
        let runnerGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(runnerGroupId))"
        let runnerGroupIdPostEscape = runnerGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runner_group_id}", with: runnerGroupIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject30)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set settings
     
     - parameter inlineObject159: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminSetSettings(inlineObject159: InlineObject159? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        enterpriseAdminSetSettingsWithRequestBuilder(inlineObject159: inlineObject159).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set settings
     - PUT /setup/api/settings
     - For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#get-settings).
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#set-settings
}
     - parameter inlineObject159: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func enterpriseAdminSetSettingsWithRequestBuilder(inlineObject159: InlineObject159? = nil) -> RequestBuilder<Void> {
        let path = "/setup/api/settings"
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject159)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Start a configuration process
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminStartConfigurationProcess(apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        enterpriseAdminStartConfigurationProcessWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Start a configuration process
     - POST /setup/api/configure
     - This endpoint allows you to start a configuration process at any time for your updated settings to take effect:
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#start-a-configuration-process
}
     - returns: RequestBuilder<Void> 
     */
    open class func enterpriseAdminStartConfigurationProcessWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/setup/api/configure"
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Start a pre-receive environment download
     
     - parameter preReceiveEnvironmentId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminStartPreReceiveEnvironmentDownload(preReceiveEnvironmentId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: PreReceiveEnvironmentDownloadStatus?,_ error: Error?) -> Void)) {
        enterpriseAdminStartPreReceiveEnvironmentDownloadWithRequestBuilder(preReceiveEnvironmentId: preReceiveEnvironmentId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Start a pre-receive environment download
     - POST /admin/pre-receive-environments/{pre_receive_environment_id}/downloads
     - Triggers a new download of the environment tarball from the environment's `image_url`. When the download is finished, the newly downloaded tarball will overwrite the existing environment.  If a download cannot be triggered, you will receive a `422 Unprocessable Entity` response.  The possible error messages are:  * _Cannot modify or delete the default environment_ * _Can not start a new download when a download is in progress_
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#start-a-pre-receive-environment-download
}
     - parameter preReceiveEnvironmentId: (path)  
     - returns: RequestBuilder<PreReceiveEnvironmentDownloadStatus> 
     */
    open class func enterpriseAdminStartPreReceiveEnvironmentDownloadWithRequestBuilder(preReceiveEnvironmentId: Int) -> RequestBuilder<PreReceiveEnvironmentDownloadStatus> {
        var path = "/admin/pre-receive-environments/{pre_receive_environment_id}/downloads"
        let preReceiveEnvironmentIdPreEscape = "\(APIHelper.mapValueToPathItem(preReceiveEnvironmentId))"
        let preReceiveEnvironmentIdPostEscape = preReceiveEnvironmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pre_receive_environment_id}", with: preReceiveEnvironmentIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PreReceiveEnvironmentDownloadStatus>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Suspend a user
     
     - parameter username: (path)  
     - parameter inlineObject180: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminSuspendUser(username: String, inlineObject180: InlineObject180? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        enterpriseAdminSuspendUserWithRequestBuilder(username: username, inlineObject180: inlineObject180).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Suspend a user
     - PUT /users/{username}/suspended
     - If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://help.github.com/enterprise/admin/guides/user-management/using-ldap), Active Directory LDAP-authenticated users cannot be suspended through this API. If you attempt to suspend an Active Directory LDAP-authenticated user through this API, it will return a `403` response.  You can suspend any user account except your own.  Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs).\"
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#suspend-a-user
}
     - parameter username: (path)  
     - parameter inlineObject180: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func enterpriseAdminSuspendUserWithRequestBuilder(username: String, inlineObject180: InlineObject180? = nil) -> RequestBuilder<Void> {
        var path = "/users/{username}/suspended"
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject180)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Sync LDAP mapping for a team
     
     - parameter teamId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminSyncLdapMappingForTeam(teamId: Int, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse201?,_ error: Error?) -> Void)) {
        enterpriseAdminSyncLdapMappingForTeamWithRequestBuilder(teamId: teamId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Sync LDAP mapping for a team
     - POST /admin/ldap/teams/{team_id}/sync
     - Note that this API call does not automatically initiate an LDAP sync. Rather, if a `201` is returned, the sync job is queued successfully, and is performed when the instance is ready.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#sync-ldap-mapping-for-a-team
}
     - parameter teamId: (path)  
     - returns: RequestBuilder<InlineResponse201> 
     */
    open class func enterpriseAdminSyncLdapMappingForTeamWithRequestBuilder(teamId: Int) -> RequestBuilder<InlineResponse201> {
        var path = "/admin/ldap/teams/{team_id}/sync"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse201>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Sync LDAP mapping for a user
     
     - parameter username: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminSyncLdapMappingForUser(username: String, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse201?,_ error: Error?) -> Void)) {
        enterpriseAdminSyncLdapMappingForUserWithRequestBuilder(username: username).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Sync LDAP mapping for a user
     - POST /admin/ldap/users/{username}/sync
     - Note that this API call does not automatically initiate an LDAP sync. Rather, if a `201` is returned, the sync job is queued successfully, and is performed when the instance is ready.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#sync-ldap-mapping-for-a-user
}
     - parameter username: (path)  
     - returns: RequestBuilder<InlineResponse201> 
     */
    open class func enterpriseAdminSyncLdapMappingForUserWithRequestBuilder(username: String) -> RequestBuilder<InlineResponse201> {
        var path = "/admin/ldap/users/{username}/sync"
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse201>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Unsuspend a user
     
     - parameter username: (path)  
     - parameter inlineObject181: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminUnsuspendUser(username: String, inlineObject181: InlineObject181? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        enterpriseAdminUnsuspendUserWithRequestBuilder(username: username, inlineObject181: inlineObject181).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Unsuspend a user
     - DELETE /users/{username}/suspended
     - If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://help.github.com/enterprise/admin/guides/user-management/using-ldap), this API is disabled and will return a `403` response. Active Directory LDAP-authenticated users cannot be unsuspended using the API.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#unsuspend-a-user
}
     - parameter username: (path)  
     - parameter inlineObject181: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func enterpriseAdminUnsuspendUserWithRequestBuilder(username: String, inlineObject181: InlineObject181? = nil) -> RequestBuilder<Void> {
        var path = "/users/{username}/suspended"
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject181)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a global webhook
     
     - parameter accept: (header) This API is under preview and subject to change. 
     - parameter hookId: (path)  
     - parameter inlineObject1: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminUpdateGlobalWebhook(accept: String, hookId: Int, inlineObject1: InlineObject1? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: GlobalHook2?,_ error: Error?) -> Void)) {
        enterpriseAdminUpdateGlobalWebhookWithRequestBuilder(accept: accept, hookId: hookId, inlineObject1: inlineObject1).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a global webhook
     - PATCH /admin/hooks/{hook_id}
     - Parameters that are not provided will be overwritten with the default value or removed if no default exists.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#update-a-global-webhook
}
     - parameter accept: (header) This API is under preview and subject to change. 
     - parameter hookId: (path)  
     - parameter inlineObject1: (body)  (optional)
     - returns: RequestBuilder<GlobalHook2> 
     */
    open class func enterpriseAdminUpdateGlobalWebhookWithRequestBuilder(accept: String, hookId: Int, inlineObject1: InlineObject1? = nil) -> RequestBuilder<GlobalHook2> {
        var path = "/admin/hooks/{hook_id}"
        let hookIdPreEscape = "\(APIHelper.mapValueToPathItem(hookId))"
        let hookIdPostEscape = hookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{hook_id}", with: hookIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject1)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "accept": accept.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GlobalHook2>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Update LDAP mapping for a team
     
     - parameter teamId: (path)  
     - parameter inlineObject2: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminUpdateLdapMappingForTeam(teamId: Int, inlineObject2: InlineObject2? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: LdapMappingTeam?,_ error: Error?) -> Void)) {
        enterpriseAdminUpdateLdapMappingForTeamWithRequestBuilder(teamId: teamId, inlineObject2: inlineObject2).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update LDAP mapping for a team
     - PATCH /admin/ldap/teams/{team_id}/mapping
     - Updates the [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. [LDAP synchronization](https://help.github.com/enterprise/admin/guides/user-management/using-ldap/#enabling-ldap-sync) must be enabled to map LDAP entries to a team. Use the [Create a team](https://docs.github.com/enterprise-server@3.0/v3/teams/#create-a-team) endpoint to create a team with LDAP mapping.  If you pass the `hellcat-preview` media type, you can also update the LDAP mapping of a child team.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#update-ldap-mapping-for-a-team
}
     - parameter teamId: (path)  
     - parameter inlineObject2: (body)  (optional)
     - returns: RequestBuilder<LdapMappingTeam> 
     */
    open class func enterpriseAdminUpdateLdapMappingForTeamWithRequestBuilder(teamId: Int, inlineObject2: InlineObject2? = nil) -> RequestBuilder<LdapMappingTeam> {
        var path = "/admin/ldap/teams/{team_id}/mapping"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject2)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LdapMappingTeam>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update LDAP mapping for a user
     
     - parameter username: (path)  
     - parameter inlineObject3: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminUpdateLdapMappingForUser(username: String, inlineObject3: InlineObject3? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: LdapMappingUser?,_ error: Error?) -> Void)) {
        enterpriseAdminUpdateLdapMappingForUserWithRequestBuilder(username: username, inlineObject3: inlineObject3).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update LDAP mapping for a user
     - PATCH /admin/ldap/users/{username}/mapping
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user
}
     - parameter username: (path)  
     - parameter inlineObject3: (body)  (optional)
     - returns: RequestBuilder<LdapMappingUser> 
     */
    open class func enterpriseAdminUpdateLdapMappingForUserWithRequestBuilder(username: String, inlineObject3: InlineObject3? = nil) -> RequestBuilder<LdapMappingUser> {
        var path = "/admin/ldap/users/{username}/mapping"
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject3)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LdapMappingUser>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update an organization name
     
     - parameter org: (path)  
     - parameter inlineObject5: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminUpdateOrgName(org: String, inlineObject5: InlineObject5? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse202?,_ error: Error?) -> Void)) {
        enterpriseAdminUpdateOrgNameWithRequestBuilder(org: org, inlineObject5: inlineObject5).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update an organization name
     - PATCH /admin/organizations/{org}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#update-an-organization-name
}
     - parameter org: (path)  
     - parameter inlineObject5: (body)  (optional)
     - returns: RequestBuilder<InlineResponse202> 
     */
    open class func enterpriseAdminUpdateOrgNameWithRequestBuilder(org: String, inlineObject5: InlineObject5? = nil) -> RequestBuilder<InlineResponse202> {
        var path = "/admin/organizations/{org}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject5)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse202>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a pre-receive environment
     
     - parameter preReceiveEnvironmentId: (path)  
     - parameter inlineObject7: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminUpdatePreReceiveEnvironment(preReceiveEnvironmentId: Int, inlineObject7: InlineObject7? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: PreReceiveEnvironment?,_ error: Error?) -> Void)) {
        enterpriseAdminUpdatePreReceiveEnvironmentWithRequestBuilder(preReceiveEnvironmentId: preReceiveEnvironmentId, inlineObject7: inlineObject7).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a pre-receive environment
     - PATCH /admin/pre-receive-environments/{pre_receive_environment_id}
     - You cannot modify the default environment. If you attempt to modify the default environment, you will receive a `422 Unprocessable Entity` response.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#update-a-pre-receive-environment
}
     - parameter preReceiveEnvironmentId: (path)  
     - parameter inlineObject7: (body)  (optional)
     - returns: RequestBuilder<PreReceiveEnvironment> 
     */
    open class func enterpriseAdminUpdatePreReceiveEnvironmentWithRequestBuilder(preReceiveEnvironmentId: Int, inlineObject7: InlineObject7? = nil) -> RequestBuilder<PreReceiveEnvironment> {
        var path = "/admin/pre-receive-environments/{pre_receive_environment_id}"
        let preReceiveEnvironmentIdPreEscape = "\(APIHelper.mapValueToPathItem(preReceiveEnvironmentId))"
        let preReceiveEnvironmentIdPostEscape = preReceiveEnvironmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pre_receive_environment_id}", with: preReceiveEnvironmentIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject7)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PreReceiveEnvironment>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a pre-receive hook
     
     - parameter preReceiveHookId: (path)  
     - parameter inlineObject9: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminUpdatePreReceiveHook(preReceiveHookId: Int, inlineObject9: InlineObject9? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: PreReceiveHook?,_ error: Error?) -> Void)) {
        enterpriseAdminUpdatePreReceiveHookWithRequestBuilder(preReceiveHookId: preReceiveHookId, inlineObject9: inlineObject9).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a pre-receive hook
     - PATCH /admin/pre-receive-hooks/{pre_receive_hook_id}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#update-a-pre-receive-hook
}
     - parameter preReceiveHookId: (path)  
     - parameter inlineObject9: (body)  (optional)
     - returns: RequestBuilder<PreReceiveHook> 
     */
    open class func enterpriseAdminUpdatePreReceiveHookWithRequestBuilder(preReceiveHookId: Int, inlineObject9: InlineObject9? = nil) -> RequestBuilder<PreReceiveHook> {
        var path = "/admin/pre-receive-hooks/{pre_receive_hook_id}"
        let preReceiveHookIdPreEscape = "\(APIHelper.mapValueToPathItem(preReceiveHookId))"
        let preReceiveHookIdPostEscape = preReceiveHookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pre_receive_hook_id}", with: preReceiveHookIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject9)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PreReceiveHook>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update pre-receive hook enforcement for an organization
     
     - parameter org: (path)  
     - parameter preReceiveHookId: (path)  
     - parameter inlineObject50: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminUpdatePreReceiveHookEnforcementForOrg(org: String, preReceiveHookId: Int, inlineObject50: InlineObject50? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: OrgPreReceiveHook?,_ error: Error?) -> Void)) {
        enterpriseAdminUpdatePreReceiveHookEnforcementForOrgWithRequestBuilder(org: org, preReceiveHookId: preReceiveHookId, inlineObject50: inlineObject50).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update pre-receive hook enforcement for an organization
     - PATCH /orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}
     - For pre-receive hooks which are allowed to be configured at the org level, you can set `enforcement` and `allow_downstream_configuration`
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#update-pre-receive-hook-enforcement-for-an-organization
}
     - parameter org: (path)  
     - parameter preReceiveHookId: (path)  
     - parameter inlineObject50: (body)  (optional)
     - returns: RequestBuilder<OrgPreReceiveHook> 
     */
    open class func enterpriseAdminUpdatePreReceiveHookEnforcementForOrgWithRequestBuilder(org: String, preReceiveHookId: Int, inlineObject50: InlineObject50? = nil) -> RequestBuilder<OrgPreReceiveHook> {
        var path = "/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}"
        let orgPreEscape = "\(APIHelper.mapValueToPathItem(org))"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let preReceiveHookIdPreEscape = "\(APIHelper.mapValueToPathItem(preReceiveHookId))"
        let preReceiveHookIdPostEscape = preReceiveHookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pre_receive_hook_id}", with: preReceiveHookIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject50)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgPreReceiveHook>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update pre-receive hook enforcement for a repository
     
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter preReceiveHookId: (path)  
     - parameter inlineObject134: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminUpdatePreReceiveHookEnforcementForRepo(owner: String, repo: String, preReceiveHookId: Int, inlineObject134: InlineObject134? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: RepositoryPreReceiveHook?,_ error: Error?) -> Void)) {
        enterpriseAdminUpdatePreReceiveHookEnforcementForRepoWithRequestBuilder(owner: owner, repo: repo, preReceiveHookId: preReceiveHookId, inlineObject134: inlineObject134).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update pre-receive hook enforcement for a repository
     - PATCH /repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}
     - For pre-receive hooks which are allowed to be configured at the repo level, you can set `enforcement`
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#update-pre-receive-hook-enforcement-for-a-repository
}
     - parameter owner: (path)  
     - parameter repo: (path)  
     - parameter preReceiveHookId: (path)  
     - parameter inlineObject134: (body)  (optional)
     - returns: RequestBuilder<RepositoryPreReceiveHook> 
     */
    open class func enterpriseAdminUpdatePreReceiveHookEnforcementForRepoWithRequestBuilder(owner: String, repo: String, preReceiveHookId: Int, inlineObject134: InlineObject134? = nil) -> RequestBuilder<RepositoryPreReceiveHook> {
        var path = "/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}"
        let ownerPreEscape = "\(APIHelper.mapValueToPathItem(owner))"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(APIHelper.mapValueToPathItem(repo))"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let preReceiveHookIdPreEscape = "\(APIHelper.mapValueToPathItem(preReceiveHookId))"
        let preReceiveHookIdPostEscape = preReceiveHookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pre_receive_hook_id}", with: preReceiveHookIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject134)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RepositoryPreReceiveHook>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a self-hosted runner group for an enterprise
     
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter inlineObject28: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise(enterprise: String, runnerGroupId: Int, inlineObject28: InlineObject28? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: RunnerGroupsEnterprise?,_ error: Error?) -> Void)) {
        enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseWithRequestBuilder(enterprise: enterprise, runnerGroupId: runnerGroupId, inlineObject28: inlineObject28).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a self-hosted runner group for an enterprise
     - PATCH /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}
     - Updates the `name` and `visibility` of a self-hosted runner group in an enterprise.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#update-a-self-hosted-runner-group-for-an-enterprise
}
     - parameter enterprise: (path) The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
     - parameter runnerGroupId: (path) Unique identifier of the self-hosted runner group. 
     - parameter inlineObject28: (body)  (optional)
     - returns: RequestBuilder<RunnerGroupsEnterprise> 
     */
    open class func enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseWithRequestBuilder(enterprise: String, runnerGroupId: Int, inlineObject28: InlineObject28? = nil) -> RequestBuilder<RunnerGroupsEnterprise> {
        var path = "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}"
        let enterprisePreEscape = "\(APIHelper.mapValueToPathItem(enterprise))"
        let enterprisePostEscape = enterprisePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{enterprise}", with: enterprisePostEscape, options: .literal, range: nil)
        let runnerGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(runnerGroupId))"
        let runnerGroupIdPostEscape = runnerGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runner_group_id}", with: runnerGroupIdPostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject28)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RunnerGroupsEnterprise>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update the username for a user
     
     - parameter username: (path)  
     - parameter inlineObject11: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminUpdateUsernameForUser(username: String, inlineObject11: InlineObject11? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse202?,_ error: Error?) -> Void)) {
        enterpriseAdminUpdateUsernameForUserWithRequestBuilder(username: username, inlineObject11: inlineObject11).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update the username for a user
     - PATCH /admin/users/{username}
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#update-the-username-for-a-user
}
     - parameter username: (path)  
     - parameter inlineObject11: (body)  (optional)
     - returns: RequestBuilder<InlineResponse202> 
     */
    open class func enterpriseAdminUpdateUsernameForUserWithRequestBuilder(username: String, inlineObject11: InlineObject11? = nil) -> RequestBuilder<InlineResponse202> {
        var path = "/admin/users/{username}"
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject11)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse202>.Type = GithubAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Upgrade a license
     
     - parameter inlineObject163: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enterpriseAdminUpgradeLicense(inlineObject163: InlineObject163? = nil, apiResponseQueue: DispatchQueue = GithubAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        enterpriseAdminUpgradeLicenseWithRequestBuilder(inlineObject163: inlineObject163).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Upgrade a license
     - POST /setup/api/upgrade
     - This API upgrades your license and also triggers the configuration process:
     - externalDocs: class ExternalDocumentation {
    description: API method documentation
    url: https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#upgrade-a-license
}
     - parameter inlineObject163: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func enterpriseAdminUpgradeLicenseWithRequestBuilder(inlineObject163: InlineObject163? = nil) -> RequestBuilder<Void> {
        let path = "/setup/api/upgrade"
        let URLString = GithubAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject163)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = GithubAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
